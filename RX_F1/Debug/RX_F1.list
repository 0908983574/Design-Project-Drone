
RX_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d4  0800c6e8  0800c6e8  0001c6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0bc  0800d0bc  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0bc  0800d0bc  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0bc  0800d0bc  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0c0  0800d0c0  0001d0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800d0c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a8  20000218  0800d2dc  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800d2dc  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001662e  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dba  00000000  00000000  0003686f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  00039630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e0  00000000  00000000  0003ab30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a998  00000000  00000000  0003bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016652  00000000  00000000  000568a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096b31  00000000  00000000  0006cefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103a2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d5c  00000000  00000000  00103a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c6d0 	.word	0x0800c6d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800c6d0 	.word	0x0800c6d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <NRF24_DelayMicroSeconds+0x38>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <NRF24_DelayMicroSeconds+0x3c>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9a      	lsrs	r2, r3, #18
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	fb02 f303 	mul.w	r3, r2, r3
 800112e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001130:	bf00      	nop
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1e5a      	subs	r2, r3, #1
 8001136:	60fa      	str	r2, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1fa      	bne.n	8001132 <NRF24_DelayMicroSeconds+0x22>
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	20000038 	.word	0x20000038
 800114c:	165e9f81 	.word	0x165e9f81

08001150 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf_CSN_PORT, nrf_CSN_PIN, GPIO_PIN_SET);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <NRF24_csn+0x1c>
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <NRF24_csn+0x30>)
 8001166:	f004 fdf6 	bl	8005d56 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf_CSN_PORT, nrf_CSN_PIN, GPIO_PIN_RESET);
}
 800116a:	e005      	b.n	8001178 <NRF24_csn+0x28>
	else HAL_GPIO_WritePin(nrf_CSN_PORT, nrf_CSN_PIN, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <NRF24_csn+0x30>)
 8001174:	f004 fdef 	bl	8005d56 <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40010c00 	.word	0x40010c00

08001184 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf_CE_PORT, nrf_CE_PIN, GPIO_PIN_SET);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <NRF24_ce+0x1c>
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <NRF24_ce+0x30>)
 800119a:	f004 fddc 	bl	8005d56 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf_CE_PORT, nrf_CE_PIN, GPIO_PIN_RESET);
}
 800119e:	e005      	b.n	80011ac <NRF24_ce+0x28>
	else HAL_GPIO_WritePin(nrf_CE_PORT, nrf_CE_PIN, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <NRF24_ce+0x30>)
 80011a8:	f004 fdd5 	bl	8005d56 <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40010800 	.word	0x40010800

080011b8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff ffc4 	bl	8001150 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011d2:	f107 010c 	add.w	r1, r7, #12
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	2201      	movs	r2, #1
 80011da:	480a      	ldr	r0, [pc, #40]	; (8001204 <NRF24_read_register+0x4c>)
 80011dc:	f006 fb40 	bl	8007860 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	1c59      	adds	r1, r3, #1
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	2201      	movs	r2, #1
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <NRF24_read_register+0x4c>)
 80011ec:	f006 fc74 	bl	8007ad8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
 80011f2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff ffab 	bl	8001150 <NRF24_csn>
	return retData;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	2000024c 	.word	0x2000024c

08001208 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	4613      	mov	r3, r2
 8001216:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff ff99 	bl	8001150 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	b2db      	uxtb	r3, r3
 8001226:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001228:	f107 010c 	add.w	r1, r7, #12
 800122c:	2364      	movs	r3, #100	; 0x64
 800122e:	2201      	movs	r2, #1
 8001230:	4808      	ldr	r0, [pc, #32]	; (8001254 <NRF24_read_registerN+0x4c>)
 8001232:	f006 fb15 	bl	8007860 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	b29a      	uxth	r2, r3
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <NRF24_read_registerN+0x4c>)
 8001240:	f006 fc4a 	bl	8007ad8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ff83 	bl	8001150 <NRF24_csn>
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000024c 	.word	0x2000024c

08001258 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ff71 	bl	8001150 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	b2db      	uxtb	r3, r3
 8001276:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800127c:	f107 010c 	add.w	r1, r7, #12
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	2202      	movs	r2, #2
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <NRF24_write_register+0x40>)
 8001286:	f006 faeb 	bl	8007860 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff ff60 	bl	8001150 <NRF24_csn>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000024c 	.word	0x2000024c

0800129c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ff4f 	bl	8001150 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80012bc:	f107 010c 	add.w	r1, r7, #12
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	2201      	movs	r2, #1
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <NRF24_write_registerN+0x4c>)
 80012c6:	f006 facb 	bl	8007860 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	2364      	movs	r3, #100	; 0x64
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <NRF24_write_registerN+0x4c>)
 80012d4:	f006 fac4 	bl	8007860 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff ff39 	bl	8001150 <NRF24_csn>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000024c 	.word	0x2000024c

080012ec <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80012f8:	f000 fa38 	bl	800176c <NRF24_getPayloadSize>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	4293      	cmp	r3, r2
 8001304:	d303      	bcc.n	800130e <NRF24_read_payload+0x22>
 8001306:	f000 fa31 	bl	800176c <NRF24_getPayloadSize>
 800130a:	4603      	mov	r3, r0
 800130c:	e000      	b.n	8001310 <NRF24_read_payload+0x24>
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff ff1c 	bl	8001150 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001318:	2361      	movs	r3, #97	; 0x61
 800131a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800131c:	f107 010e 	add.w	r1, r7, #14
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	2201      	movs	r2, #1
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <NRF24_read_payload+0x5c>)
 8001326:	f006 fa9b 	bl	8007860 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	b29a      	uxth	r2, r3
 800132e:	2364      	movs	r3, #100	; 0x64
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <NRF24_read_payload+0x5c>)
 8001334:	f006 fbd0 	bl	8007ad8 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff ff09 	bl	8001150 <NRF24_csn>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000024c 	.word	0x2000024c

0800134c <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001350:	21ff      	movs	r1, #255	; 0xff
 8001352:	20e1      	movs	r0, #225	; 0xe1
 8001354:	f7ff ff80 	bl	8001258 <NRF24_write_register>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001360:	21ff      	movs	r1, #255	; 0xff
 8001362:	20e2      	movs	r0, #226	; 0xe2
 8001364:	f7ff ff78 	bl	8001258 <NRF24_write_register>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001372:	2007      	movs	r0, #7
 8001374:	f7ff ff20 	bl	80011b8 <NRF24_read_register>
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800137c:	79fb      	ldrb	r3, [r7, #7]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001388:	b082      	sub	sp, #8
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800139c:	4b66      	ldr	r3, [pc, #408]	; (8001538 <NRF24_begin+0x1b0>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	2258      	movs	r2, #88	; 0x58
 80013a6:	4619      	mov	r1, r3
 80013a8:	f008 f882 	bl	80094b0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80013ac:	4a63      	ldr	r2, [pc, #396]	; (800153c <NRF24_begin+0x1b4>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80013b2:	4a63      	ldr	r2, [pc, #396]	; (8001540 <NRF24_begin+0x1b8>)
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80013b8:	4a62      	ldr	r2, [pc, #392]	; (8001544 <NRF24_begin+0x1bc>)
 80013ba:	883b      	ldrh	r3, [r7, #0]
 80013bc:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff fec6 	bl	8001150 <NRF24_csn>
	NRF24_ce(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fedd 	bl	8001184 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 80013ca:	2005      	movs	r0, #5
 80013cc:	f003 fc4c 	bl	8004c68 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 80013d0:	2108      	movs	r1, #8
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff40 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80013d8:	213f      	movs	r1, #63	; 0x3f
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff ff3c 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80013e0:	2103      	movs	r1, #3
 80013e2:	2002      	movs	r0, #2
 80013e4:	f7ff ff38 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80013e8:	2103      	movs	r1, #3
 80013ea:	2003      	movs	r0, #3
 80013ec:	f7ff ff34 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80013f0:	2103      	movs	r1, #3
 80013f2:	2004      	movs	r0, #4
 80013f4:	f7ff ff30 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80013f8:	2102      	movs	r1, #2
 80013fa:	2005      	movs	r0, #5
 80013fc:	f7ff ff2c 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001400:	210f      	movs	r1, #15
 8001402:	2006      	movs	r0, #6
 8001404:	f7ff ff28 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001408:	210e      	movs	r1, #14
 800140a:	2007      	movs	r0, #7
 800140c:	f7ff ff24 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001410:	2100      	movs	r1, #0
 8001412:	2008      	movs	r0, #8
 8001414:	f7ff ff20 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001418:	2100      	movs	r1, #0
 800141a:	2009      	movs	r0, #9
 800141c:	f7ff ff1c 	bl	8001258 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001420:	23e7      	movs	r3, #231	; 0xe7
 8001422:	733b      	strb	r3, [r7, #12]
 8001424:	23e7      	movs	r3, #231	; 0xe7
 8001426:	72fb      	strb	r3, [r7, #11]
 8001428:	23e7      	movs	r3, #231	; 0xe7
 800142a:	72bb      	strb	r3, [r7, #10]
 800142c:	23e7      	movs	r3, #231	; 0xe7
 800142e:	727b      	strb	r3, [r7, #9]
 8001430:	23e7      	movs	r3, #231	; 0xe7
 8001432:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	2205      	movs	r2, #5
 800143a:	4619      	mov	r1, r3
 800143c:	200a      	movs	r0, #10
 800143e:	f7ff ff2d 	bl	800129c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001442:	23c2      	movs	r3, #194	; 0xc2
 8001444:	733b      	strb	r3, [r7, #12]
 8001446:	23c2      	movs	r3, #194	; 0xc2
 8001448:	72fb      	strb	r3, [r7, #11]
 800144a:	23c2      	movs	r3, #194	; 0xc2
 800144c:	72bb      	strb	r3, [r7, #10]
 800144e:	23c2      	movs	r3, #194	; 0xc2
 8001450:	727b      	strb	r3, [r7, #9]
 8001452:	23c2      	movs	r3, #194	; 0xc2
 8001454:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2205      	movs	r2, #5
 800145c:	4619      	mov	r1, r3
 800145e:	200b      	movs	r0, #11
 8001460:	f7ff ff1c 	bl	800129c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001464:	21c3      	movs	r1, #195	; 0xc3
 8001466:	200c      	movs	r0, #12
 8001468:	f7ff fef6 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 800146c:	21c4      	movs	r1, #196	; 0xc4
 800146e:	200d      	movs	r0, #13
 8001470:	f7ff fef2 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001474:	21c5      	movs	r1, #197	; 0xc5
 8001476:	200e      	movs	r0, #14
 8001478:	f7ff feee 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 800147c:	21c6      	movs	r1, #198	; 0xc6
 800147e:	200f      	movs	r0, #15
 8001480:	f7ff feea 	bl	8001258 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001484:	23e7      	movs	r3, #231	; 0xe7
 8001486:	733b      	strb	r3, [r7, #12]
 8001488:	23e7      	movs	r3, #231	; 0xe7
 800148a:	72fb      	strb	r3, [r7, #11]
 800148c:	23e7      	movs	r3, #231	; 0xe7
 800148e:	72bb      	strb	r3, [r7, #10]
 8001490:	23e7      	movs	r3, #231	; 0xe7
 8001492:	727b      	strb	r3, [r7, #9]
 8001494:	23e7      	movs	r3, #231	; 0xe7
 8001496:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	2205      	movs	r2, #5
 800149e:	4619      	mov	r1, r3
 80014a0:	2010      	movs	r0, #16
 80014a2:	f7ff fefb 	bl	800129c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	2011      	movs	r0, #17
 80014aa:	f7ff fed5 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	2012      	movs	r0, #18
 80014b2:	f7ff fed1 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80014b6:	2100      	movs	r1, #0
 80014b8:	2013      	movs	r0, #19
 80014ba:	f7ff fecd 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80014be:	2100      	movs	r1, #0
 80014c0:	2014      	movs	r0, #20
 80014c2:	f7ff fec9 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 80014c6:	2100      	movs	r1, #0
 80014c8:	2015      	movs	r0, #21
 80014ca:	f7ff fec5 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80014ce:	2100      	movs	r1, #0
 80014d0:	2016      	movs	r0, #22
 80014d2:	f7ff fec1 	bl	8001258 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80014d6:	f000 fb01 	bl	8001adc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80014da:	2100      	movs	r1, #0
 80014dc:	201c      	movs	r0, #28
 80014de:	f7ff febb 	bl	8001258 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	201d      	movs	r0, #29
 80014e6:	f7ff feb7 	bl	8001258 <NRF24_write_register>
	printRadioSettings();
 80014ea:	f000 fb11 	bl	8001b10 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80014ee:	210f      	movs	r1, #15
 80014f0:	200f      	movs	r0, #15
 80014f2:	f000 f8f5 	bl	80016e0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80014f6:	2003      	movs	r0, #3
 80014f8:	f000 f9d7 	bl	80018aa <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f000 fa0d 	bl	800191c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001502:	2002      	movs	r0, #2
 8001504:	f000 fa50 	bl	80019a8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001508:	f000 f9a2 	bl	8001850 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800150c:	2020      	movs	r0, #32
 800150e:	f000 f917 	bl	8001740 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8001512:	f000 fada 	bl	8001aca <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001516:	204c      	movs	r0, #76	; 0x4c
 8001518:	f000 f8fd 	bl	8001716 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800151c:	f7ff ff16 	bl	800134c <NRF24_flush_tx>
	NRF24_flush_rx();
 8001520:	f7ff ff1c 	bl	800135c <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001524:	f000 fa68 	bl	80019f8 <NRF24_powerDown>
	
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001532:	b002      	add	sp, #8
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000024c 	.word	0x2000024c
 800153c:	20000244 	.word	0x20000244
 8001540:	20000248 	.word	0x20000248
 8001544:	2000024a 	.word	0x2000024a

08001548 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff fe33 	bl	80011b8 <NRF24_read_register>
 8001552:	4603      	mov	r3, r0
 8001554:	f043 0303 	orr.w	r3, r3, #3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	4619      	mov	r1, r3
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff fe7b 	bl	8001258 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <NRF24_startListening+0x48>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	4313      	orrs	r3, r2
 800156a:	d004      	beq.n	8001576 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800156c:	2205      	movs	r2, #5
 800156e:	4908      	ldr	r1, [pc, #32]	; (8001590 <NRF24_startListening+0x48>)
 8001570:	200a      	movs	r0, #10
 8001572:	f7ff fe93 	bl	800129c <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8001576:	f7ff fee9 	bl	800134c <NRF24_flush_tx>
	NRF24_flush_rx();
 800157a:	f7ff feef 	bl	800135c <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fe00 	bl	8001184 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001584:	2096      	movs	r0, #150	; 0x96
 8001586:	f7ff fdc3 	bl	8001110 <NRF24_DelayMicroSeconds>
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000238 	.word	0x20000238

08001594 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fdf3 	bl	8001184 <NRF24_ce>
	NRF24_flush_tx();
 800159e:	f7ff fed5 	bl	800134c <NRF24_flush_tx>
	NRF24_flush_rx();
 80015a2:	f7ff fedb 	bl	800135c <NRF24_flush_rx>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}

080015aa <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f000 fa31 	bl	8001a16 <NRF24_availablePipe>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}

080015ba <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	4619      	mov	r1, r3
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff fe8e 	bl	80012ec <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80015d0:	2017      	movs	r0, #23
 80015d2:	f7ff fdf1 	bl	80011b8 <NRF24_read_register>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80015de:	f7ff febd 	bl	800135c <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80015e2:	f000 f8cd 	bl	8001780 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	bf14      	ite	ne
 80015ec:	2301      	movne	r3, #1
 80015ee:	2300      	moveq	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001606:	463b      	mov	r3, r7
 8001608:	2205      	movs	r2, #5
 800160a:	4619      	mov	r1, r3
 800160c:	200a      	movs	r0, #10
 800160e:	f7ff fe45 	bl	800129c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001612:	463b      	mov	r3, r7
 8001614:	2205      	movs	r2, #5
 8001616:	4619      	mov	r1, r3
 8001618:	2010      	movs	r0, #16
 800161a:	f7ff fe3f 	bl	800129c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800161e:	2320      	movs	r3, #32
 8001620:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <NRF24_openWritingPipe+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	4293      	cmp	r3, r2
 800162a:	bf28      	it	cs
 800162c:	4613      	movcs	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4619      	mov	r1, r3
 8001632:	2011      	movs	r0, #17
 8001634:	f7ff fe10 	bl	8001258 <NRF24_write_register>
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000240 	.word	0x20000240

08001644 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4601      	mov	r1, r0
 800164c:	e9c7 2300 	strd	r2, r3, [r7]
 8001650:	460b      	mov	r3, r1
 8001652:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d104      	bne.n	8001664 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800165a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800165e:	491c      	ldr	r1, [pc, #112]	; (80016d0 <NRF24_openReadingPipe+0x8c>)
 8001660:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b06      	cmp	r3, #6
 8001668:	d82d      	bhi.n	80016c6 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d808      	bhi.n	8001682 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <NRF24_openReadingPipe+0x90>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	4639      	mov	r1, r7
 8001678:	2205      	movs	r2, #5
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe0e 	bl	800129c <NRF24_write_registerN>
 8001680:	e007      	b.n	8001692 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <NRF24_openReadingPipe+0x90>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	4639      	mov	r1, r7
 800168a:	2201      	movs	r2, #1
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe05 	bl	800129c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <NRF24_openReadingPipe+0x94>)
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	4a10      	ldr	r2, [pc, #64]	; (80016dc <NRF24_openReadingPipe+0x98>)
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fdda 	bl	8001258 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80016a4:	2002      	movs	r0, #2
 80016a6:	f7ff fd87 	bl	80011b8 <NRF24_read_register>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2101      	movs	r1, #1
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4619      	mov	r1, r3
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff fdc9 	bl	8001258 <NRF24_write_register>
	}
	
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000238 	.word	0x20000238
 80016d4:	0800cc78 	.word	0x0800cc78
 80016d8:	0800cc80 	.word	0x0800cc80
 80016dc:	20000240 	.word	0x20000240

080016e0 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	460a      	mov	r2, r1
 80016ea:	71fb      	strb	r3, [r7, #7]
 80016ec:	4613      	mov	r3, r2
 80016ee:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b25b      	sxtb	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	2004      	movs	r0, #4
 800170a:	f7ff fda5 	bl	8001258 <NRF24_write_register>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001720:	237f      	movs	r3, #127	; 0x7f
 8001722:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	4293      	cmp	r3, r2
 800172a:	bf28      	it	cs
 800172c:	4613      	movcs	r3, r2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4619      	mov	r1, r3
 8001732:	2005      	movs	r0, #5
 8001734:	f7ff fd90 	bl	8001258 <NRF24_write_register>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800174a:	2320      	movs	r3, #32
 800174c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800174e:	7bfa      	ldrb	r2, [r7, #15]
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	4293      	cmp	r3, r2
 8001754:	bf28      	it	cs
 8001756:	4613      	movcs	r3, r2
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b03      	ldr	r3, [pc, #12]	; (8001768 <NRF24_setPayloadSize+0x28>)
 800175c:	701a      	strb	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr
 8001768:	20000240 	.word	0x20000240

0800176c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	return payload_size;
 8001770:	4b02      	ldr	r3, [pc, #8]	; (800177c <NRF24_getPayloadSize+0x10>)
 8001772:	781b      	ldrb	r3, [r3, #0]
}
 8001774:	4618      	mov	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000240 	.word	0x20000240

08001780 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001784:	2060      	movs	r0, #96	; 0x60
 8001786:	f7ff fd17 	bl	80011b8 <NRF24_read_register>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}

08001790 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001794:	201d      	movs	r0, #29
 8001796:	f7ff fd0f 	bl	80011b8 <NRF24_read_register>
 800179a:	4603      	mov	r3, r0
 800179c:	f043 0306 	orr.w	r3, r3, #6
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	201d      	movs	r0, #29
 80017a6:	f7ff fd57 	bl	8001258 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80017aa:	201d      	movs	r0, #29
 80017ac:	f7ff fd04 	bl	80011b8 <NRF24_read_register>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80017b6:	f000 f991 	bl	8001adc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80017ba:	201d      	movs	r0, #29
 80017bc:	f7ff fcfc 	bl	80011b8 <NRF24_read_register>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f043 0306 	orr.w	r3, r3, #6
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4619      	mov	r1, r3
 80017ca:	201d      	movs	r0, #29
 80017cc:	f7ff fd44 	bl	8001258 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80017d0:	201c      	movs	r0, #28
 80017d2:	f7ff fcf1 	bl	80011b8 <NRF24_read_register>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f043 0303 	orr.w	r3, r3, #3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	201c      	movs	r0, #28
 80017e2:	f7ff fd39 	bl	8001258 <NRF24_write_register>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80017f0:	201d      	movs	r0, #29
 80017f2:	f7ff fce1 	bl	80011b8 <NRF24_read_register>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4619      	mov	r1, r3
 8001800:	201d      	movs	r0, #29
 8001802:	f7ff fd29 	bl	8001258 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001806:	201d      	movs	r0, #29
 8001808:	f7ff fcd6 	bl	80011b8 <NRF24_read_register>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001812:	f000 f963 	bl	8001adc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001816:	201d      	movs	r0, #29
 8001818:	f7ff fcce 	bl	80011b8 <NRF24_read_register>
 800181c:	4603      	mov	r3, r0
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	201d      	movs	r0, #29
 8001828:	f7ff fd16 	bl	8001258 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800182c:	201c      	movs	r0, #28
 800182e:	f7ff fcc3 	bl	80011b8 <NRF24_read_register>
 8001832:	4603      	mov	r3, r0
 8001834:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4619      	mov	r1, r3
 800183c:	201c      	movs	r0, #28
 800183e:	f7ff fd0b 	bl	8001258 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001842:	4b02      	ldr	r3, [pc, #8]	; (800184c <NRF24_enableDynamicPayloads+0x60>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
	
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000241 	.word	0x20000241

08001850 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001854:	201d      	movs	r0, #29
 8001856:	f7ff fcaf 	bl	80011b8 <NRF24_read_register>
 800185a:	4603      	mov	r3, r0
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4619      	mov	r1, r3
 8001864:	201d      	movs	r0, #29
 8001866:	f7ff fcf7 	bl	8001258 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800186a:	2100      	movs	r1, #0
 800186c:	201c      	movs	r0, #28
 800186e:	f7ff fcf3 	bl	8001258 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001872:	4b02      	ldr	r3, [pc, #8]	; (800187c <NRF24_disableDynamicPayloads+0x2c>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000241 	.word	0x20000241

08001880 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001890:	213f      	movs	r1, #63	; 0x3f
 8001892:	2001      	movs	r0, #1
 8001894:	f7ff fce0 	bl	8001258 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001898:	e003      	b.n	80018a2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800189a:	2100      	movs	r1, #0
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff fcdb 	bl	8001258 <NRF24_write_register>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80018b4:	2006      	movs	r0, #6
 80018b6:	f7ff fc7f 	bl	80011b8 <NRF24_read_register>
 80018ba:	4603      	mov	r3, r0
 80018bc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	f023 0306 	bic.w	r3, r3, #6
 80018c4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d104      	bne.n	80018d6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	f043 0306 	orr.w	r3, r3, #6
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	e019      	b.n	800190a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d104      	bne.n	80018e6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e011      	b.n	800190a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d104      	bne.n	80018f6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	f043 0302 	orr.w	r3, r3, #2
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e009      	b.n	800190a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2b04      	cmp	r3, #4
 8001900:	d103      	bne.n	800190a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	f043 0306 	orr.w	r3, r3, #6
 8001908:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	4619      	mov	r1, r3
 800190e:	2006      	movs	r0, #6
 8001910:	f7ff fca2 	bl	8001258 <NRF24_write_register>
}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800192a:	2006      	movs	r0, #6
 800192c:	f7ff fc44 	bl	80011b8 <NRF24_read_register>
 8001930:	4603      	mov	r3, r0
 8001932:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <NRF24_setDataRate+0x88>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800193a:	7bbb      	ldrb	r3, [r7, #14]
 800193c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001940:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d107      	bne.n	8001958 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <NRF24_setDataRate+0x88>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	73bb      	strb	r3, [r7, #14]
 8001956:	e00d      	b.n	8001974 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <NRF24_setDataRate+0x88>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001964:	7bbb      	ldrb	r3, [r7, #14]
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	73bb      	strb	r3, [r7, #14]
 800196c:	e002      	b.n	8001974 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <NRF24_setDataRate+0x88>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	4619      	mov	r1, r3
 8001978:	2006      	movs	r0, #6
 800197a:	f7ff fc6d 	bl	8001258 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800197e:	2006      	movs	r0, #6
 8001980:	f7ff fc1a 	bl	80011b8 <NRF24_read_register>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	7bbb      	ldrb	r3, [r7, #14]
 800198a:	4293      	cmp	r3, r2
 800198c:	d102      	bne.n	8001994 <NRF24_setDataRate+0x78>
  {
    result = true;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
 8001992:	e002      	b.n	800199a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <NRF24_setDataRate+0x88>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000242 	.word	0x20000242

080019a8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fc00 	bl	80011b8 <NRF24_read_register>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f023 030c 	bic.w	r3, r3, #12
 80019be:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00f      	beq.n	80019e6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d104      	bne.n	80019d6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e007      	b.n	80019e6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	4619      	mov	r1, r3
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fc34 	bl	8001258 <NRF24_write_register>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fbdb 	bl	80011b8 <NRF24_read_register>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f023 0302 	bic.w	r3, r3, #2
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff fc23 	bl	8001258 <NRF24_write_register>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001a1e:	f7ff fca5 	bl	800136c <NRF24_get_status>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d017      	beq.n	8001a6c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001a52:	2140      	movs	r1, #64	; 0x40
 8001a54:	2007      	movs	r0, #7
 8001a56:	f7ff fbff 	bl	8001258 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	f003 0320 	and.w	r3, r3, #32
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001a64:	2120      	movs	r1, #32
 8001a66:	2007      	movs	r0, #7
 8001a68:	f7ff fbf6 	bl	8001258 <NRF24_write_register>
    }
  }
  return result;
 8001a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	6039      	str	r1, [r7, #0]
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	4613      	mov	r3, r2
 8001a84:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8001a8a:	2320      	movs	r3, #32
 8001a8c:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001a8e:	7afa      	ldrb	r2, [r7, #11]
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	4293      	cmp	r3, r2
 8001a94:	bf28      	it	cs
 8001a96:	4613      	movcs	r3, r2
 8001a98:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fb58 	bl	8001150 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001aae:	b25b      	sxtb	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	7aba      	ldrb	r2, [r7, #10]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fbf0 	bl	800129c <NRF24_write_registerN>
  NRF24_csn(1);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff fb47 	bl	8001150 <NRF24_csn>
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001ace:	2170      	movs	r1, #112	; 0x70
 8001ad0:	2007      	movs	r0, #7
 8001ad2:	f7ff fbc1 	bl	8001258 <NRF24_write_register>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fb34 	bl	8001150 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001ae8:	2350      	movs	r3, #80	; 0x50
 8001aea:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001aec:	2373      	movs	r3, #115	; 0x73
 8001aee:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001af0:	1d39      	adds	r1, r7, #4
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	2202      	movs	r2, #2
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <NRF24_ACTIVATE_cmd+0x30>)
 8001af8:	f005 feb2 	bl	8007860 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff fb27 	bl	8001150 <NRF24_csn>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000024c 	.word	0x2000024c

08001b10 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b0a1      	sub	sp, #132	; 0x84
 8001b14:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	49c3      	ldr	r1, [pc, #780]	; (8001e28 <printRadioSettings+0x318>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 f93d 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fb12 	bl	8000150 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f107 0108 	add.w	r1, r7, #8
 8001b34:	230a      	movs	r3, #10
 8001b36:	48bd      	ldr	r0, [pc, #756]	; (8001e2c <printRadioSettings+0x31c>)
 8001b38:	f007 fb25 	bl	8009186 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fb3b 	bl	80011b8 <NRF24_read_register>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001b48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001b54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <printRadioSettings+0x5e>
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	49b2      	ldr	r1, [pc, #712]	; (8001e30 <printRadioSettings+0x320>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f008 f918 	bl	8009d9c <siprintf>
 8001b6c:	e00c      	b.n	8001b88 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	49b0      	ldr	r1, [pc, #704]	; (8001e34 <printRadioSettings+0x324>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f008 f911 	bl	8009d9c <siprintf>
 8001b7a:	e005      	b.n	8001b88 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	49ad      	ldr	r1, [pc, #692]	; (8001e38 <printRadioSettings+0x328>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f008 f90a 	bl	8009d9c <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fadf 	bl	8000150 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f107 0108 	add.w	r1, r7, #8
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	48a3      	ldr	r0, [pc, #652]	; (8001e2c <printRadioSettings+0x31c>)
 8001b9e:	f007 faf2 	bl	8009186 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff fb08 	bl	80011b8 <NRF24_read_register>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bb2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bfcc      	ite	gt
 8001bba:	2301      	movgt	r3, #1
 8001bbc:	2300      	movle	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bc6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bfcc      	ite	gt
 8001bce:	2301      	movgt	r3, #1
 8001bd0:	2300      	movle	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bda:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bfcc      	ite	gt
 8001be2:	2301      	movgt	r3, #1
 8001be4:	2300      	movle	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bee:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bfcc      	ite	gt
 8001bf6:	2301      	movgt	r3, #1
 8001bf8:	2300      	movle	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c02:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bfcc      	ite	gt
 8001c0a:	2301      	movgt	r3, #1
 8001c0c:	2300      	movle	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c16:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bfcc      	ite	gt
 8001c1e:	2301      	movgt	r3, #1
 8001c20:	2300      	movle	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f107 0008 	add.w	r0, r7, #8
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	9402      	str	r4, [sp, #8]
 8001c2c:	9101      	str	r1, [sp, #4]
 8001c2e:	9200      	str	r2, [sp, #0]
 8001c30:	4633      	mov	r3, r6
 8001c32:	462a      	mov	r2, r5
 8001c34:	4981      	ldr	r1, [pc, #516]	; (8001e3c <printRadioSettings+0x32c>)
 8001c36:	f008 f8b1 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fa86 	bl	8000150 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f107 0108 	add.w	r1, r7, #8
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	4877      	ldr	r0, [pc, #476]	; (8001e2c <printRadioSettings+0x31c>)
 8001c50:	f007 fa99 	bl	8009186 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff faaf 	bl	80011b8 <NRF24_read_register>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c64:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bfcc      	ite	gt
 8001c6c:	2301      	movgt	r3, #1
 8001c6e:	2300      	movle	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c78:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bfcc      	ite	gt
 8001c80:	2301      	movgt	r3, #1
 8001c82:	2300      	movle	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c8c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bfcc      	ite	gt
 8001c94:	2301      	movgt	r3, #1
 8001c96:	2300      	movle	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ca0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bfcc      	ite	gt
 8001ca8:	2301      	movgt	r3, #1
 8001caa:	2300      	movle	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001cb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cb4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bfcc      	ite	gt
 8001cbc:	2301      	movgt	r3, #1
 8001cbe:	2300      	movle	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001cc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bfcc      	ite	gt
 8001cd0:	2301      	movgt	r3, #1
 8001cd2:	2300      	movle	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f107 0008 	add.w	r0, r7, #8
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	9402      	str	r4, [sp, #8]
 8001cde:	9101      	str	r1, [sp, #4]
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	4633      	mov	r3, r6
 8001ce4:	462a      	mov	r2, r5
 8001ce6:	4956      	ldr	r1, [pc, #344]	; (8001e40 <printRadioSettings+0x330>)
 8001ce8:	f008 f858 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa2d 	bl	8000150 <strlen>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	f107 0108 	add.w	r1, r7, #8
 8001cfe:	230a      	movs	r3, #10
 8001d00:	484a      	ldr	r0, [pc, #296]	; (8001e2c <printRadioSettings+0x31c>)
 8001d02:	f007 fa40 	bl	8009186 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001d06:	2003      	movs	r0, #3
 8001d08:	f7ff fa56 	bl	80011b8 <NRF24_read_register>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001d16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001d20:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	4946      	ldr	r1, [pc, #280]	; (8001e44 <printRadioSettings+0x334>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f008 f836 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fa0b 	bl	8000150 <strlen>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f107 0108 	add.w	r1, r7, #8
 8001d42:	230a      	movs	r3, #10
 8001d44:	4839      	ldr	r0, [pc, #228]	; (8001e2c <printRadioSettings+0x31c>)
 8001d46:	f007 fa1e 	bl	8009186 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001d4a:	2005      	movs	r0, #5
 8001d4c:	f7ff fa34 	bl	80011b8 <NRF24_read_register>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001d56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4939      	ldr	r1, [pc, #228]	; (8001e48 <printRadioSettings+0x338>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f008 f819 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe f9ee 	bl	8000150 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	482b      	ldr	r0, [pc, #172]	; (8001e2c <printRadioSettings+0x31c>)
 8001d80:	f007 fa01 	bl	8009186 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001d84:	2006      	movs	r0, #6
 8001d86:	f7ff fa17 	bl	80011b8 <NRF24_read_register>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001d90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <printRadioSettings+0x29a>
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	492a      	ldr	r1, [pc, #168]	; (8001e4c <printRadioSettings+0x33c>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f007 fffa 	bl	8009d9c <siprintf>
 8001da8:	e005      	b.n	8001db6 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4928      	ldr	r1, [pc, #160]	; (8001e50 <printRadioSettings+0x340>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f007 fff3 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe f9c8 	bl	8000150 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	f107 0108 	add.w	r1, r7, #8
 8001dc8:	230a      	movs	r3, #10
 8001dca:	4818      	ldr	r0, [pc, #96]	; (8001e2c <printRadioSettings+0x31c>)
 8001dcc:	f007 f9db 	bl	8009186 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001dd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dd4:	f003 0306 	and.w	r3, r3, #6
 8001dd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001ddc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001de6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <printRadioSettings+0x2ec>
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4918      	ldr	r1, [pc, #96]	; (8001e54 <printRadioSettings+0x344>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f007 ffd1 	bl	8009d9c <siprintf>
 8001dfa:	e03b      	b.n	8001e74 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001dfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <printRadioSettings+0x302>
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	4913      	ldr	r1, [pc, #76]	; (8001e58 <printRadioSettings+0x348>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f007 ffc6 	bl	8009d9c <siprintf>
 8001e10:	e030      	b.n	8001e74 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001e12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d122      	bne.n	8001e60 <printRadioSettings+0x350>
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	490f      	ldr	r1, [pc, #60]	; (8001e5c <printRadioSettings+0x34c>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f007 ffbb 	bl	8009d9c <siprintf>
 8001e26:	e025      	b.n	8001e74 <printRadioSettings+0x364>
 8001e28:	0800c6e8 	.word	0x0800c6e8
 8001e2c:	200002a4 	.word	0x200002a4
 8001e30:	0800c71c 	.word	0x0800c71c
 8001e34:	0800c738 	.word	0x0800c738
 8001e38:	0800c754 	.word	0x0800c754
 8001e3c:	0800c768 	.word	0x0800c768
 8001e40:	0800c7ac 	.word	0x0800c7ac
 8001e44:	0800c7f8 	.word	0x0800c7f8
 8001e48:	0800c814 	.word	0x0800c814
 8001e4c:	0800c828 	.word	0x0800c828
 8001e50:	0800c840 	.word	0x0800c840
 8001e54:	0800c858 	.word	0x0800c858
 8001e58:	0800c86c 	.word	0x0800c86c
 8001e5c:	0800c880 	.word	0x0800c880
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001e60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d105      	bne.n	8001e74 <printRadioSettings+0x364>
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	49d7      	ldr	r1, [pc, #860]	; (80021cc <printRadioSettings+0x6bc>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f007 ff94 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe f969 	bl	8000150 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f107 0108 	add.w	r1, r7, #8
 8001e86:	230a      	movs	r3, #10
 8001e88:	48d1      	ldr	r0, [pc, #836]	; (80021d0 <printRadioSettings+0x6c0>)
 8001e8a:	f007 f97c 	bl	8009186 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2205      	movs	r2, #5
 8001e92:	4619      	mov	r1, r3
 8001e94:	200a      	movs	r0, #10
 8001e96:	f7ff f9b7 	bl	8001208 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001e9a:	793b      	ldrb	r3, [r7, #4]
 8001e9c:	461c      	mov	r4, r3
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	78bb      	ldrb	r3, [r7, #2]
 8001ea4:	787a      	ldrb	r2, [r7, #1]
 8001ea6:	7839      	ldrb	r1, [r7, #0]
 8001ea8:	f107 0008 	add.w	r0, r7, #8
 8001eac:	9102      	str	r1, [sp, #8]
 8001eae:	9201      	str	r2, [sp, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	49c7      	ldr	r1, [pc, #796]	; (80021d4 <printRadioSettings+0x6c4>)
 8001eb8:	f007 ff70 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe f945 	bl	8000150 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f107 0108 	add.w	r1, r7, #8
 8001ece:	230a      	movs	r3, #10
 8001ed0:	48bf      	ldr	r0, [pc, #764]	; (80021d0 <printRadioSettings+0x6c0>)
 8001ed2:	f007 f958 	bl	8009186 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2205      	movs	r2, #5
 8001eda:	4619      	mov	r1, r3
 8001edc:	200b      	movs	r0, #11
 8001ede:	f7ff f993 	bl	8001208 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001ee2:	793b      	ldrb	r3, [r7, #4]
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	461d      	mov	r5, r3
 8001eea:	78bb      	ldrb	r3, [r7, #2]
 8001eec:	787a      	ldrb	r2, [r7, #1]
 8001eee:	7839      	ldrb	r1, [r7, #0]
 8001ef0:	f107 0008 	add.w	r0, r7, #8
 8001ef4:	9102      	str	r1, [sp, #8]
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	462b      	mov	r3, r5
 8001efc:	4622      	mov	r2, r4
 8001efe:	49b6      	ldr	r1, [pc, #728]	; (80021d8 <printRadioSettings+0x6c8>)
 8001f00:	f007 ff4c 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe f921 	bl	8000150 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f107 0108 	add.w	r1, r7, #8
 8001f16:	230a      	movs	r3, #10
 8001f18:	48ad      	ldr	r0, [pc, #692]	; (80021d0 <printRadioSettings+0x6c0>)
 8001f1a:	f007 f934 	bl	8009186 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	200c      	movs	r0, #12
 8001f26:	f7ff f96f 	bl	8001208 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f2a:	783b      	ldrb	r3, [r7, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	49aa      	ldr	r1, [pc, #680]	; (80021dc <printRadioSettings+0x6cc>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f007 ff31 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f906 	bl	8000150 <strlen>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	f107 0108 	add.w	r1, r7, #8
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	48a0      	ldr	r0, [pc, #640]	; (80021d0 <printRadioSettings+0x6c0>)
 8001f50:	f007 f919 	bl	8009186 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001f54:	463b      	mov	r3, r7
 8001f56:	2201      	movs	r2, #1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	200d      	movs	r0, #13
 8001f5c:	f7ff f954 	bl	8001208 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f60:	783b      	ldrb	r3, [r7, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	499d      	ldr	r1, [pc, #628]	; (80021e0 <printRadioSettings+0x6d0>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f007 ff16 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe f8eb 	bl	8000150 <strlen>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f107 0108 	add.w	r1, r7, #8
 8001f82:	230a      	movs	r3, #10
 8001f84:	4892      	ldr	r0, [pc, #584]	; (80021d0 <printRadioSettings+0x6c0>)
 8001f86:	f007 f8fe 	bl	8009186 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4619      	mov	r1, r3
 8001f90:	200e      	movs	r0, #14
 8001f92:	f7ff f939 	bl	8001208 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f96:	783b      	ldrb	r3, [r7, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	4991      	ldr	r1, [pc, #580]	; (80021e4 <printRadioSettings+0x6d4>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f007 fefb 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f8d0 	bl	8000150 <strlen>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f107 0108 	add.w	r1, r7, #8
 8001fb8:	230a      	movs	r3, #10
 8001fba:	4885      	ldr	r0, [pc, #532]	; (80021d0 <printRadioSettings+0x6c0>)
 8001fbc:	f007 f8e3 	bl	8009186 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f7ff f91e 	bl	8001208 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001fcc:	783b      	ldrb	r3, [r7, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	4984      	ldr	r1, [pc, #528]	; (80021e8 <printRadioSettings+0x6d8>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f007 fee0 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe f8b5 	bl	8000150 <strlen>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	f107 0108 	add.w	r1, r7, #8
 8001fee:	230a      	movs	r3, #10
 8001ff0:	4877      	ldr	r0, [pc, #476]	; (80021d0 <printRadioSettings+0x6c0>)
 8001ff2:	f007 f8c8 	bl	8009186 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f7ff f903 	bl	8001208 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002002:	793b      	ldrb	r3, [r7, #4]
 8002004:	461c      	mov	r4, r3
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	461d      	mov	r5, r3
 800200a:	78bb      	ldrb	r3, [r7, #2]
 800200c:	787a      	ldrb	r2, [r7, #1]
 800200e:	7839      	ldrb	r1, [r7, #0]
 8002010:	f107 0008 	add.w	r0, r7, #8
 8002014:	9102      	str	r1, [sp, #8]
 8002016:	9201      	str	r2, [sp, #4]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	462b      	mov	r3, r5
 800201c:	4622      	mov	r2, r4
 800201e:	4973      	ldr	r1, [pc, #460]	; (80021ec <printRadioSettings+0x6dc>)
 8002020:	f007 febc 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f891 	bl	8000150 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	b29a      	uxth	r2, r3
 8002032:	f107 0108 	add.w	r1, r7, #8
 8002036:	230a      	movs	r3, #10
 8002038:	4865      	ldr	r0, [pc, #404]	; (80021d0 <printRadioSettings+0x6c0>)
 800203a:	f007 f8a4 	bl	8009186 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800203e:	2011      	movs	r0, #17
 8002040:	f7ff f8ba 	bl	80011b8 <NRF24_read_register>
 8002044:	4603      	mov	r3, r0
 8002046:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800204a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800204e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	4966      	ldr	r1, [pc, #408]	; (80021f0 <printRadioSettings+0x6e0>)
 8002058:	4618      	mov	r0, r3
 800205a:	f007 fe9f 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f874 	bl	8000150 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	b29a      	uxth	r2, r3
 800206c:	f107 0108 	add.w	r1, r7, #8
 8002070:	230a      	movs	r3, #10
 8002072:	4857      	ldr	r0, [pc, #348]	; (80021d0 <printRadioSettings+0x6c0>)
 8002074:	f007 f887 	bl	8009186 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8002078:	2012      	movs	r0, #18
 800207a:	f7ff f89d 	bl	80011b8 <NRF24_read_register>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002084:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4958      	ldr	r1, [pc, #352]	; (80021f4 <printRadioSettings+0x6e4>)
 8002092:	4618      	mov	r0, r3
 8002094:	f007 fe82 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe f857 	bl	8000150 <strlen>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	f107 0108 	add.w	r1, r7, #8
 80020aa:	230a      	movs	r3, #10
 80020ac:	4848      	ldr	r0, [pc, #288]	; (80021d0 <printRadioSettings+0x6c0>)
 80020ae:	f007 f86a 	bl	8009186 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80020b2:	2013      	movs	r0, #19
 80020b4:	f7ff f880 	bl	80011b8 <NRF24_read_register>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80020be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	494b      	ldr	r1, [pc, #300]	; (80021f8 <printRadioSettings+0x6e8>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 fe65 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f83a 	bl	8000150 <strlen>
 80020dc:	4603      	mov	r3, r0
 80020de:	b29a      	uxth	r2, r3
 80020e0:	f107 0108 	add.w	r1, r7, #8
 80020e4:	230a      	movs	r3, #10
 80020e6:	483a      	ldr	r0, [pc, #232]	; (80021d0 <printRadioSettings+0x6c0>)
 80020e8:	f007 f84d 	bl	8009186 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80020ec:	2014      	movs	r0, #20
 80020ee:	f7ff f863 	bl	80011b8 <NRF24_read_register>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80020f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	493d      	ldr	r1, [pc, #244]	; (80021fc <printRadioSettings+0x6ec>)
 8002106:	4618      	mov	r0, r3
 8002108:	f007 fe48 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f81d 	bl	8000150 <strlen>
 8002116:	4603      	mov	r3, r0
 8002118:	b29a      	uxth	r2, r3
 800211a:	f107 0108 	add.w	r1, r7, #8
 800211e:	230a      	movs	r3, #10
 8002120:	482b      	ldr	r0, [pc, #172]	; (80021d0 <printRadioSettings+0x6c0>)
 8002122:	f007 f830 	bl	8009186 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8002126:	2015      	movs	r0, #21
 8002128:	f7ff f846 	bl	80011b8 <NRF24_read_register>
 800212c:	4603      	mov	r3, r0
 800212e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002132:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	4930      	ldr	r1, [pc, #192]	; (8002200 <printRadioSettings+0x6f0>)
 8002140:	4618      	mov	r0, r3
 8002142:	f007 fe2b 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f800 	bl	8000150 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	f107 0108 	add.w	r1, r7, #8
 8002158:	230a      	movs	r3, #10
 800215a:	481d      	ldr	r0, [pc, #116]	; (80021d0 <printRadioSettings+0x6c0>)
 800215c:	f007 f813 	bl	8009186 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8002160:	2016      	movs	r0, #22
 8002162:	f7ff f829 	bl	80011b8 <NRF24_read_register>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800216c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <printRadioSettings+0x6f4>)
 800217a:	4618      	mov	r0, r3
 800217c:	f007 fe0e 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	4618      	mov	r0, r3
 8002186:	f7fd ffe3 	bl	8000150 <strlen>
 800218a:	4603      	mov	r3, r0
 800218c:	b29a      	uxth	r2, r3
 800218e:	f107 0108 	add.w	r1, r7, #8
 8002192:	230a      	movs	r3, #10
 8002194:	480e      	ldr	r0, [pc, #56]	; (80021d0 <printRadioSettings+0x6c0>)
 8002196:	f006 fff6 	bl	8009186 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800219a:	201c      	movs	r0, #28
 800219c:	f7ff f80c 	bl	80011b8 <NRF24_read_register>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021aa:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bfcc      	ite	gt
 80021b2:	2301      	movgt	r3, #1
 80021b4:	2300      	movle	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021be:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bfcc      	ite	gt
 80021c6:	2301      	movgt	r3, #1
 80021c8:	2300      	movle	r3, #0
 80021ca:	e01d      	b.n	8002208 <printRadioSettings+0x6f8>
 80021cc:	0800c894 	.word	0x0800c894
 80021d0:	200002a4 	.word	0x200002a4
 80021d4:	0800c8a8 	.word	0x0800c8a8
 80021d8:	0800c8d8 	.word	0x0800c8d8
 80021dc:	0800c908 	.word	0x0800c908
 80021e0:	0800c930 	.word	0x0800c930
 80021e4:	0800c958 	.word	0x0800c958
 80021e8:	0800c980 	.word	0x0800c980
 80021ec:	0800c9a8 	.word	0x0800c9a8
 80021f0:	0800c9d4 	.word	0x0800c9d4
 80021f4:	0800c9f0 	.word	0x0800c9f0
 80021f8:	0800ca0c 	.word	0x0800ca0c
 80021fc:	0800ca28 	.word	0x0800ca28
 8002200:	0800ca44 	.word	0x0800ca44
 8002204:	0800ca60 	.word	0x0800ca60
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800220c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002210:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002214:	2b00      	cmp	r3, #0
 8002216:	bfcc      	ite	gt
 8002218:	2301      	movgt	r3, #1
 800221a:	2300      	movle	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002220:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002224:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002228:	2b00      	cmp	r3, #0
 800222a:	bfcc      	ite	gt
 800222c:	2301      	movgt	r3, #1
 800222e:	2300      	movle	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002234:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002238:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800223c:	2b00      	cmp	r3, #0
 800223e:	bfcc      	ite	gt
 8002240:	2301      	movgt	r3, #1
 8002242:	2300      	movle	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800224c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002250:	2b00      	cmp	r3, #0
 8002252:	bfcc      	ite	gt
 8002254:	2301      	movgt	r3, #1
 8002256:	2300      	movle	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f107 0008 	add.w	r0, r7, #8
 800225e:	9303      	str	r3, [sp, #12]
 8002260:	9402      	str	r4, [sp, #8]
 8002262:	9101      	str	r1, [sp, #4]
 8002264:	9200      	str	r2, [sp, #0]
 8002266:	4633      	mov	r3, r6
 8002268:	462a      	mov	r2, r5
 800226a:	4936      	ldr	r1, [pc, #216]	; (8002344 <printRadioSettings+0x834>)
 800226c:	f007 fd96 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ff6b 	bl	8000150 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	f107 0108 	add.w	r1, r7, #8
 8002282:	230a      	movs	r3, #10
 8002284:	4830      	ldr	r0, [pc, #192]	; (8002348 <printRadioSettings+0x838>)
 8002286:	f006 ff7e 	bl	8009186 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800228a:	201d      	movs	r0, #29
 800228c:	f7fe ff94 	bl	80011b8 <NRF24_read_register>
 8002290:	4603      	mov	r3, r0
 8002292:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002296:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <printRadioSettings+0x7a0>
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	4929      	ldr	r1, [pc, #164]	; (800234c <printRadioSettings+0x83c>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f007 fd77 	bl	8009d9c <siprintf>
 80022ae:	e005      	b.n	80022bc <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	4926      	ldr	r1, [pc, #152]	; (8002350 <printRadioSettings+0x840>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f007 fd70 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fd ff45 	bl	8000150 <strlen>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	f107 0108 	add.w	r1, r7, #8
 80022ce:	230a      	movs	r3, #10
 80022d0:	481d      	ldr	r0, [pc, #116]	; (8002348 <printRadioSettings+0x838>)
 80022d2:	f006 ff58 	bl	8009186 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80022d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <printRadioSettings+0x7e0>
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	491b      	ldr	r1, [pc, #108]	; (8002354 <printRadioSettings+0x844>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f007 fd57 	bl	8009d9c <siprintf>
 80022ee:	e005      	b.n	80022fc <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	4918      	ldr	r1, [pc, #96]	; (8002358 <printRadioSettings+0x848>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f007 fd50 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	4618      	mov	r0, r3
 8002302:	f7fd ff25 	bl	8000150 <strlen>
 8002306:	4603      	mov	r3, r0
 8002308:	b29a      	uxth	r2, r3
 800230a:	f107 0108 	add.w	r1, r7, #8
 800230e:	230a      	movs	r3, #10
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <printRadioSettings+0x838>)
 8002312:	f006 ff38 	bl	8009186 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4910      	ldr	r1, [pc, #64]	; (800235c <printRadioSettings+0x84c>)
 800231c:	4618      	mov	r0, r3
 800231e:	f007 fd3d 	bl	8009d9c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4618      	mov	r0, r3
 8002328:	f7fd ff12 	bl	8000150 <strlen>
 800232c:	4603      	mov	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	f107 0108 	add.w	r1, r7, #8
 8002334:	230a      	movs	r3, #10
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <printRadioSettings+0x838>)
 8002338:	f006 ff25 	bl	8009186 <HAL_UART_Transmit>
}
 800233c:	bf00      	nop
 800233e:	3774      	adds	r7, #116	; 0x74
 8002340:	46bd      	mov	sp, r7
 8002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002344:	0800ca7c 	.word	0x0800ca7c
 8002348:	200002a4 	.word	0x200002a4
 800234c:	0800cac8 	.word	0x0800cac8
 8002350:	0800cae0 	.word	0x0800cae0
 8002354:	0800caf8 	.word	0x0800caf8
 8002358:	0800cb14 	.word	0x0800cb14
 800235c:	0800c6e8 	.word	0x0800c6e8

08002360 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002360:	b084      	sub	sp, #16
 8002362:	b4b0      	push	{r4, r5, r7}
 8002364:	af00      	add	r7, sp, #0
 8002366:	f107 040c 	add.w	r4, r7, #12
 800236a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <nrf24_DebugUART_Init+0x34>)
 8002370:	461d      	mov	r5, r3
 8002372:	f107 040c 	add.w	r4, r7, #12
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002382:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002386:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	bcb0      	pop	{r4, r5, r7}
 8002390:	b004      	add	sp, #16
 8002392:	4770      	bx	lr
 8002394:	200002a4 	.word	0x200002a4

08002398 <MPU6050_Read>:
I2C_HandleTypeDef mpuhi2c;
/******************** Function Definitions *********************/

//1. Read Register
void MPU6050_Read (uint8_t* ui8pDataR, uint8_t ui8Add, uint8_t ui8size)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af04      	add	r7, sp, #16
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
 80023a4:	4613      	mov	r3, r2
 80023a6:	70bb      	strb	r3, [r7, #2]
     HAL_I2C_Mem_Read(&mpuhi2c, MPU6050_Adress, ui8Add, 1, ui8pDataR, ui8size, 10);
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	78bb      	ldrb	r3, [r7, #2]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	210a      	movs	r1, #10
 80023b2:	9102      	str	r1, [sp, #8]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2301      	movs	r3, #1
 80023bc:	21d0      	movs	r1, #208	; 0xd0
 80023be:	4803      	ldr	r0, [pc, #12]	; (80023cc <MPU6050_Read+0x34>)
 80023c0:	f003 ff38 	bl	8006234 <HAL_I2C_Mem_Read>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	200002f8 	.word	0x200002f8

080023d0 <MPU6050_Write>:

//2. Write Register
void MPU6050_Write (uint8_t* ui8pDataW, uint8_t ui8Add, uint8_t ui8size)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af04      	add	r7, sp, #16
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
 80023dc:	4613      	mov	r3, r2
 80023de:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(&mpuhi2c, MPU6050_Adress, ui8Add, 1, ui8pDataW, ui8size, 10);
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	78bb      	ldrb	r3, [r7, #2]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	210a      	movs	r1, #10
 80023ea:	9102      	str	r1, [sp, #8]
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	21d0      	movs	r1, #208	; 0xd0
 80023f6:	4803      	ldr	r0, [pc, #12]	; (8002404 <MPU6050_Write+0x34>)
 80023f8:	f003 fe22 	bl	8006040 <HAL_I2C_Mem_Write>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200002f8 	.word	0x200002f8

08002408 <MPU6050_Init>:
//3. MPU6050 Initialize

MPU6050_State MPU6050_Init (MPU6050_InitTypedef* mpuInitTypeDef, I2C_HandleTypeDef* i2cHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    uint8_t ui8buffer;
    uint32_t i=0;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
    //I2c Handle Typedef
    memcpy(&mpuhi2c, i2cHandle, sizeof(*i2cHandle));
 8002416:	2254      	movs	r2, #84	; 0x54
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	4882      	ldr	r0, [pc, #520]	; (8002624 <MPU6050_Init+0x21c>)
 800241c:	f007 f848 	bl	80094b0 <memcpy>
//    MPU6050_InitTypedef mpuInit;

    //Read Who AM I Register
    MPU6050_Read(&ui8buffer, MPU6050_WHO_AM_I_REG, 1);
 8002420:	f107 030b 	add.w	r3, r7, #11
 8002424:	2201      	movs	r2, #1
 8002426:	2175      	movs	r1, #117	; 0x75
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ffb5 	bl	8002398 <MPU6050_Read>
    if (ui8buffer != 0x68)
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	2b68      	cmp	r3, #104	; 0x68
 8002432:	d001      	beq.n	8002438 <MPU6050_Init+0x30>
        return MPU6050_ID_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0f0      	b.n	800261a <MPU6050_Init+0x212>
    //Reset IMU
    MPU6050_Read(&ui8buffer, MPU6050_PWR_MGMT_1_REG, 1);
 8002438:	f107 030b 	add.w	r3, r7, #11
 800243c:	2201      	movs	r2, #1
 800243e:	216b      	movs	r1, #107	; 0x6b
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ffa9 	bl	8002398 <MPU6050_Read>
    ui8buffer |= 0x80;
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800244c:	b2db      	uxtb	r3, r3
 800244e:	72fb      	strb	r3, [r7, #11]
    MPU6050_Write(&ui8buffer, MPU6050_PWR_MGMT_1_REG, 1);
 8002450:	f107 030b 	add.w	r3, r7, #11
 8002454:	2201      	movs	r2, #1
 8002456:	216b      	movs	r1, #107	; 0x6b
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ffb9 	bl	80023d0 <MPU6050_Write>
    for(i = 0; i < 2400000; i++)
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	e003      	b.n	800246c <MPU6050_Init+0x64>
    {
    	asm("NOP");
 8002464:	bf00      	nop
    for(i = 0; i < 2400000; i++)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3301      	adds	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a6e      	ldr	r2, [pc, #440]	; (8002628 <MPU6050_Init+0x220>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d3f7      	bcc.n	8002464 <MPU6050_Init+0x5c>
    }

    ui8buffer = 0x08;           //Enable IMU
 8002474:	2308      	movs	r3, #8
 8002476:	72fb      	strb	r3, [r7, #11]
    MPU6050_Write(&ui8buffer, MPU6050_PWR_MGMT_1_REG, 1);
 8002478:	f107 030b 	add.w	r3, r7, #11
 800247c:	2201      	movs	r2, #1
 800247e:	216b      	movs	r1, #107	; 0x6b
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ffa5 	bl	80023d0 <MPU6050_Write>
    //Setting Accelerometer full scale range
    ui8buffer = 0x00;
 8002486:	2300      	movs	r3, #0
 8002488:	72fb      	strb	r3, [r7, #11]
    ui8buffer |= mpuInitTypeDef->ui8AcceFullScale;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	781a      	ldrb	r2, [r3, #0]
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	4313      	orrs	r3, r2
 8002492:	b2db      	uxtb	r3, r3
 8002494:	72fb      	strb	r3, [r7, #11]
    MPU6050_Write(&ui8buffer, MPU6050_ACCEL_CONFIG_REG, 1);
 8002496:	f107 030b 	add.w	r3, r7, #11
 800249a:	2201      	movs	r2, #1
 800249c:	211c      	movs	r1, #28
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff96 	bl	80023d0 <MPU6050_Write>

    //Setting Gyroscope full scale range
    ui8buffer = 0x00;
 80024a4:	2300      	movs	r3, #0
 80024a6:	72fb      	strb	r3, [r7, #11]
    ui8buffer |= mpuInitTypeDef->ui8GyroFullScale;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	785a      	ldrb	r2, [r3, #1]
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	72fb      	strb	r3, [r7, #11]
    MPU6050_Write(&ui8buffer, MPU6050_GYRO_CONFIG_REG, 1);
 80024b4:	f107 030b 	add.w	r3, r7, #11
 80024b8:	2201      	movs	r2, #1
 80024ba:	211b      	movs	r1, #27
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff ff87 	bl	80023d0 <MPU6050_Write>

    //Setting Digital Low Pass Filter
    ui8buffer = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	72fb      	strb	r3, [r7, #11]
    ui8buffer |= mpuInitTypeDef->ui8DLPF;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	789a      	ldrb	r2, [r3, #2]
 80024ca:	7afb      	ldrb	r3, [r7, #11]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	72fb      	strb	r3, [r7, #11]
    MPU6050_Write(&ui8buffer, MPU6050_CONFIG_REG, 1);
 80024d2:	f107 030b 	add.w	r3, r7, #11
 80024d6:	2201      	movs	r2, #1
 80024d8:	211a      	movs	r1, #26
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff78 	bl	80023d0 <MPU6050_Write>

    //Setting sensitivity for Accelerometer
    switch (mpuInitTypeDef->ui8AcceFullScale)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b18      	cmp	r3, #24
 80024e6:	d849      	bhi.n	800257c <MPU6050_Init+0x174>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <MPU6050_Init+0xe8>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002555 	.word	0x08002555
 80024f4:	0800257d 	.word	0x0800257d
 80024f8:	0800257d 	.word	0x0800257d
 80024fc:	0800257d 	.word	0x0800257d
 8002500:	0800257d 	.word	0x0800257d
 8002504:	0800257d 	.word	0x0800257d
 8002508:	0800257d 	.word	0x0800257d
 800250c:	0800257d 	.word	0x0800257d
 8002510:	0800255f 	.word	0x0800255f
 8002514:	0800257d 	.word	0x0800257d
 8002518:	0800257d 	.word	0x0800257d
 800251c:	0800257d 	.word	0x0800257d
 8002520:	0800257d 	.word	0x0800257d
 8002524:	0800257d 	.word	0x0800257d
 8002528:	0800257d 	.word	0x0800257d
 800252c:	0800257d 	.word	0x0800257d
 8002530:	08002569 	.word	0x08002569
 8002534:	0800257d 	.word	0x0800257d
 8002538:	0800257d 	.word	0x0800257d
 800253c:	0800257d 	.word	0x0800257d
 8002540:	0800257d 	.word	0x0800257d
 8002544:	0800257d 	.word	0x0800257d
 8002548:	0800257d 	.word	0x0800257d
 800254c:	0800257d 	.word	0x0800257d
 8002550:	08002573 	.word	0x08002573
    {
        case MPU6050_ACCE_FULLSCALE_2G:
            Mpu6050_AcceSensi = MPU6050_ACCE_SENSI_2G;
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <MPU6050_Init+0x224>)
 8002556:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800255a:	601a      	str	r2, [r3, #0]
            break;
 800255c:	e010      	b.n	8002580 <MPU6050_Init+0x178>
        case MPU6050_ACCE_FULLSCALE_4G:
            Mpu6050_AcceSensi = MPU6050_ACCE_SENSI_4G;
 800255e:	4b33      	ldr	r3, [pc, #204]	; (800262c <MPU6050_Init+0x224>)
 8002560:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8002564:	601a      	str	r2, [r3, #0]
            break;
 8002566:	e00b      	b.n	8002580 <MPU6050_Init+0x178>
        case MPU6050_ACCE_FULLSCALE_8G:
            Mpu6050_AcceSensi = MPU6050_ACCE_SENSI_8G;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <MPU6050_Init+0x224>)
 800256a:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800256e:	601a      	str	r2, [r3, #0]
            break;
 8002570:	e006      	b.n	8002580 <MPU6050_Init+0x178>
        case MPU6050_ACCE_FULLSCALE_16G:
            Mpu6050_AcceSensi = MPU6050_ACCE_SENSI_16G;
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <MPU6050_Init+0x224>)
 8002574:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8002578:	601a      	str	r2, [r3, #0]
            break;
 800257a:	e001      	b.n	8002580 <MPU6050_Init+0x178>
        default:
            return MPU6050_ACCE_FULLSCALED_ERROR;
 800257c:	2302      	movs	r3, #2
 800257e:	e04c      	b.n	800261a <MPU6050_Init+0x212>
    }

    switch (mpuInitTypeDef->ui8GyroFullScale)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	2b18      	cmp	r3, #24
 8002586:	d845      	bhi.n	8002614 <MPU6050_Init+0x20c>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <MPU6050_Init+0x188>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025f5 	.word	0x080025f5
 8002594:	08002615 	.word	0x08002615
 8002598:	08002615 	.word	0x08002615
 800259c:	08002615 	.word	0x08002615
 80025a0:	08002615 	.word	0x08002615
 80025a4:	08002615 	.word	0x08002615
 80025a8:	08002615 	.word	0x08002615
 80025ac:	08002615 	.word	0x08002615
 80025b0:	080025fd 	.word	0x080025fd
 80025b4:	08002615 	.word	0x08002615
 80025b8:	08002615 	.word	0x08002615
 80025bc:	08002615 	.word	0x08002615
 80025c0:	08002615 	.word	0x08002615
 80025c4:	08002615 	.word	0x08002615
 80025c8:	08002615 	.word	0x08002615
 80025cc:	08002615 	.word	0x08002615
 80025d0:	08002605 	.word	0x08002605
 80025d4:	08002615 	.word	0x08002615
 80025d8:	08002615 	.word	0x08002615
 80025dc:	08002615 	.word	0x08002615
 80025e0:	08002615 	.word	0x08002615
 80025e4:	08002615 	.word	0x08002615
 80025e8:	08002615 	.word	0x08002615
 80025ec:	08002615 	.word	0x08002615
 80025f0:	0800260d 	.word	0x0800260d
    {
        case MPU6050_GYRO_FULLSCALE_250DPS:
            Mpu6050_GyroSensi = MPU6050_GYRO_SENSI_250DPS;
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MPU6050_Init+0x228>)
 80025f6:	4a0f      	ldr	r2, [pc, #60]	; (8002634 <MPU6050_Init+0x22c>)
 80025f8:	601a      	str	r2, [r3, #0]
            break;
 80025fa:	e00d      	b.n	8002618 <MPU6050_Init+0x210>
        case MPU6050_GYRO_FULLSCALE_500DPS:
            Mpu6050_GyroSensi = MPU6050_GYRO_SENSI_500DPS;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <MPU6050_Init+0x228>)
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <MPU6050_Init+0x230>)
 8002600:	601a      	str	r2, [r3, #0]
            break;
 8002602:	e009      	b.n	8002618 <MPU6050_Init+0x210>
        case MPU6050_GYRO_FULLSCALE_1000DPS:
            Mpu6050_GyroSensi = MPU6050_GYRO_SENSI_1000DPS;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <MPU6050_Init+0x228>)
 8002606:	4a0d      	ldr	r2, [pc, #52]	; (800263c <MPU6050_Init+0x234>)
 8002608:	601a      	str	r2, [r3, #0]
            break;
 800260a:	e005      	b.n	8002618 <MPU6050_Init+0x210>
        case MPU6050_GYRO_FULLSCALE_2000DPS:
            Mpu6050_GyroSensi = MPU6050_GYRO_SENSI_2000DPS;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <MPU6050_Init+0x228>)
 800260e:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <MPU6050_Init+0x238>)
 8002610:	601a      	str	r2, [r3, #0]
            break;
 8002612:	e001      	b.n	8002618 <MPU6050_Init+0x210>
        default:
            return MPU6050_GYRO_FULLSCALED_ERROR;
 8002614:	2303      	movs	r3, #3
 8002616:	e000      	b.n	800261a <MPU6050_Init+0x212>
    }
    return MPU6050_OK;
 8002618:	2300      	movs	r3, #0

}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200002f8 	.word	0x200002f8
 8002628:	00249f00 	.word	0x00249f00
 800262c:	20000000 	.word	0x20000000
 8002630:	20000004 	.word	0x20000004
 8002634:	43030000 	.word	0x43030000
 8002638:	42830000 	.word	0x42830000
 800263c:	42033333 	.word	0x42033333
 8002640:	41833333 	.word	0x41833333

08002644 <MPU6050_AcceRead_Raw>:

//4 . MPU6050 Accelerometer read data raw
MPU6050_AcceDataRaw MPU6050_AcceRead_Raw (void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    uint8_t ui8Buffer[2];
    MPU6050_AcceDataRaw acRaw;

    // Read X value
    MPU6050_Read(ui8Buffer, MPU6050_ACCEL_XOUT_H_REG, 2);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2202      	movs	r2, #2
 8002652:	213b      	movs	r1, #59	; 0x3b
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe9f 	bl	8002398 <MPU6050_Read>
    acRaw.x = ui8Buffer[0] << 8 | ui8Buffer[1];
 800265a:	7d3b      	ldrb	r3, [r7, #20]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	b21a      	sxth	r2, r3
 8002660:	7d7b      	ldrb	r3, [r7, #21]
 8002662:	b21b      	sxth	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b21b      	sxth	r3, r3
 8002668:	81bb      	strh	r3, [r7, #12]
    // Read Y value
    MPU6050_Read(ui8Buffer, MPU6050_ACCEL_YOUT_H_REG, 2);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	2202      	movs	r2, #2
 8002670:	213d      	movs	r1, #61	; 0x3d
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe90 	bl	8002398 <MPU6050_Read>
    acRaw.y = ui8Buffer[0] << 8 | ui8Buffer[1];
 8002678:	7d3b      	ldrb	r3, [r7, #20]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	b21a      	sxth	r2, r3
 800267e:	7d7b      	ldrb	r3, [r7, #21]
 8002680:	b21b      	sxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b21b      	sxth	r3, r3
 8002686:	81fb      	strh	r3, [r7, #14]
    // Read Z value
    MPU6050_Read(ui8Buffer, MPU6050_ACCEL_ZOUT_H_REG, 2);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	2202      	movs	r2, #2
 800268e:	213f      	movs	r1, #63	; 0x3f
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe81 	bl	8002398 <MPU6050_Read>
    acRaw.z = ui8Buffer[0] << 8 | ui8Buffer[1];
 8002696:	7d3b      	ldrb	r3, [r7, #20]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b21a      	sxth	r2, r3
 800269c:	7d7b      	ldrb	r3, [r7, #21]
 800269e:	b21b      	sxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	823b      	strh	r3, [r7, #16]
    return acRaw;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	461a      	mov	r2, r3
 80026aa:	f107 030c 	add.w	r3, r7, #12
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	6010      	str	r0, [r2, #0]
 80026b2:	889b      	ldrh	r3, [r3, #4]
 80026b4:	8093      	strh	r3, [r2, #4]
    }
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <MPU6050_AcceRead_Scaled>:

//5. MPU6050 Accelerometer read data scaled
MPU6050_AcceDataScaled MPU6050_AcceRead_Scaled (void)
{
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    MPU6050_AcceDataRaw mpuRaw;
    MPU6050_AcceDataScaled mpuScaled;
    mpuRaw = MPU6050_AcceRead_Raw();
 80026c8:	f107 0318 	add.w	r3, r7, #24
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ffb9 	bl	8002644 <MPU6050_AcceRead_Raw>
    mpuScaled.x = mpuRaw.x/Mpu6050_AcceSensi;
 80026d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fae0 	bl	8000c9c <__aeabi_i2f>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <MPU6050_AcceRead_Scaled+0x80>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f7fe fbe1 	bl	8000eac <__aeabi_fdiv>
 80026ea:	4603      	mov	r3, r0
 80026ec:	60fb      	str	r3, [r7, #12]
    mpuScaled.y = mpuRaw.y/Mpu6050_AcceSensi;
 80026ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fad2 	bl	8000c9c <__aeabi_i2f>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <MPU6050_AcceRead_Scaled+0x80>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f7fe fbd3 	bl	8000eac <__aeabi_fdiv>
 8002706:	4603      	mov	r3, r0
 8002708:	613b      	str	r3, [r7, #16]
    mpuScaled.z = mpuRaw.z/Mpu6050_AcceSensi;
 800270a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fac4 	bl	8000c9c <__aeabi_i2f>
 8002714:	4602      	mov	r2, r0
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <MPU6050_AcceRead_Scaled+0x80>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f7fe fbc5 	bl	8000eac <__aeabi_fdiv>
 8002722:	4603      	mov	r3, r0
 8002724:	617b      	str	r3, [r7, #20]
    return mpuScaled;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	461c      	mov	r4, r3
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	3724      	adds	r7, #36	; 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <MPU6050_GyroRead_Raw>:

//6. MPU6050 Gyroscope read data raw
MPU6050_GyroDataRaw MPU6050_GyroRead_Raw (void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    MPU6050_GyroDataRaw mpuRaw;
    uint8_t ui8Buffer[2];

    //Read X value
    MPU6050_Read(ui8Buffer, MPU6050_GYRO_XOUT_H_REG, 2);
 800274c:	f107 030c 	add.w	r3, r7, #12
 8002750:	2202      	movs	r2, #2
 8002752:	2143      	movs	r1, #67	; 0x43
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fe1f 	bl	8002398 <MPU6050_Read>
    mpuRaw.x = ui8Buffer[0] << 8 | ui8Buffer [1];
 800275a:	7b3b      	ldrb	r3, [r7, #12]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b21a      	sxth	r2, r3
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	b21b      	sxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	b21b      	sxth	r3, r3
 8002768:	823b      	strh	r3, [r7, #16]
    //Read Y value
    MPU6050_Read(ui8Buffer, MPU6050_GYRO_YOUT_H_REG, 2);
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	2202      	movs	r2, #2
 8002770:	2145      	movs	r1, #69	; 0x45
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fe10 	bl	8002398 <MPU6050_Read>
    mpuRaw.y = ui8Buffer[0] << 8 | ui8Buffer [1];
 8002778:	7b3b      	ldrb	r3, [r7, #12]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	b21a      	sxth	r2, r3
 800277e:	7b7b      	ldrb	r3, [r7, #13]
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	b21b      	sxth	r3, r3
 8002786:	827b      	strh	r3, [r7, #18]
    //Read Z value
    MPU6050_Read(ui8Buffer, MPU6050_GYRO_ZOUT_H_REG, 2);
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	2202      	movs	r2, #2
 800278e:	2147      	movs	r1, #71	; 0x47
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fe01 	bl	8002398 <MPU6050_Read>
    mpuRaw.z = ui8Buffer[0] << 8 | ui8Buffer [1];
 8002796:	7b3b      	ldrb	r3, [r7, #12]
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	b21a      	sxth	r2, r3
 800279c:	7b7b      	ldrb	r3, [r7, #13]
 800279e:	b21b      	sxth	r3, r3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	b21b      	sxth	r3, r3
 80027a4:	82bb      	strh	r3, [r7, #20]

    return mpuRaw;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	461a      	mov	r2, r3
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	6010      	str	r0, [r2, #0]
 80027b2:	889b      	ldrh	r3, [r3, #4]
 80027b4:	8093      	strh	r3, [r2, #4]
    }
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <MPU6050_GyroRead_Scaled>:

//7. MPU6050 Gyroscope read data scaled
MPU6050_GyroDataScaled MPU6050_GyroRead_Scaled (void)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    MPU6050_GyroDataRaw mpuRaw;
    MPU6050_GyroDataScaled mpuScaled;
    mpuRaw = MPU6050_GyroRead_Raw();
 80027c8:	f107 0318 	add.w	r3, r7, #24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ffb9 	bl	8002744 <MPU6050_GyroRead_Raw>
    mpuScaled.x = mpuRaw.x/Mpu6050_GyroSensi;
 80027d2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fa60 	bl	8000c9c <__aeabi_i2f>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <MPU6050_GyroRead_Scaled+0x80>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fe fb61 	bl	8000eac <__aeabi_fdiv>
 80027ea:	4603      	mov	r3, r0
 80027ec:	60fb      	str	r3, [r7, #12]
    mpuScaled.y = mpuRaw.y/Mpu6050_GyroSensi;
 80027ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fa52 	bl	8000c9c <__aeabi_i2f>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MPU6050_GyroRead_Scaled+0x80>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fe fb53 	bl	8000eac <__aeabi_fdiv>
 8002806:	4603      	mov	r3, r0
 8002808:	613b      	str	r3, [r7, #16]
    mpuScaled.z = mpuRaw.z/Mpu6050_GyroSensi;
 800280a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fa44 	bl	8000c9c <__aeabi_i2f>
 8002814:	4602      	mov	r2, r0
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <MPU6050_GyroRead_Scaled+0x80>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7fe fb45 	bl	8000eac <__aeabi_fdiv>
 8002822:	4603      	mov	r3, r0
 8002824:	617b      	str	r3, [r7, #20]

    return mpuScaled;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	461c      	mov	r4, r3
 800282a:	f107 030c 	add.w	r3, r7, #12
 800282e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002832:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	3724      	adds	r7, #36	; 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd90      	pop	{r4, r7, pc}
 800283e:	bf00      	nop
 8002840:	20000004 	.word	0x20000004
 8002844:	00000000 	.word	0x00000000

08002848 <MPU6050_Calib>:

//8. MPU6050 Gyroscope calibration
void MPU6050_Calib (MPU6050_AcceAxis* mpuAcceAxis,MPU6050_GyroDataScaled * mpuGyroScaled, uint16_t ui16times)
{
 8002848:	b5b0      	push	{r4, r5, r7, lr}
 800284a:	b092      	sub	sp, #72	; 0x48
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
	MPU6050_GyroDataScaled mpuScaled, mpuBuffer;
	MPU6050_AcceDataScaled mpuAcBuffer;
	MPU6050_AcceAxis mpuAxis;
	uint16_t i;
	mpuScaled.x = 0;
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
	mpuScaled.y = 0;
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
	mpuScaled.z = 0;
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
	mpuAxis.pitch = 0;
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
	mpuAxis.roll = 0;
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < ui16times; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800287a:	e0c7      	b.n	8002a0c <MPU6050_Calib+0x1c4>
	{
		mpuBuffer = MPU6050_GyroRead_Scaled();
 800287c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff9d 	bl	80027c0 <MPU6050_GyroRead_Scaled>
		mpuScaled.x += mpuBuffer.x;
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe f951 	bl	8000b34 <__addsf3>
 8002892:	4603      	mov	r3, r0
 8002894:	63bb      	str	r3, [r7, #56]	; 0x38
		mpuScaled.y += mpuBuffer.y;
 8002896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe f949 	bl	8000b34 <__addsf3>
 80028a2:	4603      	mov	r3, r0
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		mpuScaled.z += mpuBuffer.z;
 80028a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe f941 	bl	8000b34 <__addsf3>
 80028b2:	4603      	mov	r3, r0
 80028b4:	643b      	str	r3, [r7, #64]	; 0x40
		mpuAcBuffer = MPU6050_AcceRead_Scaled();
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff00 	bl	80026c0 <MPU6050_AcceRead_Scaled>
		mpuAxis.pitch += -180* atan2f(mpuAcBuffer.x, sqrt(mpuAcBuffer.y*mpuAcBuffer.y + mpuAcBuffer.z*mpuAcBuffer.z))/M_PI;
 80028c0:	6a3c      	ldr	r4, [r7, #32]
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fa3b 	bl	8000d44 <__aeabi_fmul>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461d      	mov	r5, r3
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe fa33 	bl	8000d44 <__aeabi_fmul>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	4628      	mov	r0, r5
 80028e4:	f7fe f926 	bl	8000b34 <__addsf3>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fd9c 	bl	8000428 <__aeabi_f2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f009 fc7a 	bl	800c1f0 <sqrt>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f7fe f8c0 	bl	8000a88 <__aeabi_d2f>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	4620      	mov	r0, r4
 800290e:	f009 fc9b 	bl	800c248 <atan2f>
 8002912:	4603      	mov	r3, r0
 8002914:	4968      	ldr	r1, [pc, #416]	; (8002ab8 <MPU6050_Calib+0x270>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fa14 	bl	8000d44 <__aeabi_fmul>
 800291c:	4603      	mov	r3, r0
 800291e:	4618      	mov	r0, r3
 8002920:	f7fd fd82 	bl	8000428 <__aeabi_f2d>
 8002924:	a362      	add	r3, pc, #392	; (adr r3, 8002ab0 <MPU6050_Calib+0x268>)
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	f7fd feff 	bl	800072c <__aeabi_ddiv>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4614      	mov	r4, r2
 8002934:	461d      	mov	r5, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fd75 	bl	8000428 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7fd fc11 	bl	800016c <__adddf3>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe f899 	bl	8000a88 <__aeabi_d2f>
 8002956:	4603      	mov	r3, r0
 8002958:	617b      	str	r3, [r7, #20]
		mpuAxis.roll += 180* atan2f(mpuAcBuffer.y, sqrt(mpuAcBuffer.x*mpuAcBuffer.x + mpuAcBuffer.z*mpuAcBuffer.z))/M_PI;
 800295a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	6a3a      	ldr	r2, [r7, #32]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe f9ee 	bl	8000d44 <__aeabi_fmul>
 8002968:	4603      	mov	r3, r0
 800296a:	461d      	mov	r5, r3
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe f9e6 	bl	8000d44 <__aeabi_fmul>
 8002978:	4603      	mov	r3, r0
 800297a:	4619      	mov	r1, r3
 800297c:	4628      	mov	r0, r5
 800297e:	f7fe f8d9 	bl	8000b34 <__addsf3>
 8002982:	4603      	mov	r3, r0
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fd4f 	bl	8000428 <__aeabi_f2d>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f009 fc2d 	bl	800c1f0 <sqrt>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f873 	bl	8000a88 <__aeabi_d2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4619      	mov	r1, r3
 80029a6:	4620      	mov	r0, r4
 80029a8:	f009 fc4e 	bl	800c248 <atan2f>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4943      	ldr	r1, [pc, #268]	; (8002abc <MPU6050_Calib+0x274>)
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe f9c7 	bl	8000d44 <__aeabi_fmul>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fd35 	bl	8000428 <__aeabi_f2d>
 80029be:	a33c      	add	r3, pc, #240	; (adr r3, 8002ab0 <MPU6050_Calib+0x268>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd feb2 	bl	800072c <__aeabi_ddiv>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fd28 	bl	8000428 <__aeabi_f2d>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fbc4 	bl	800016c <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f84c 	bl	8000a88 <__aeabi_d2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	61bb      	str	r3, [r7, #24]
		/* USER CODE BEGIN */
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80029f4:	2104      	movs	r1, #4
 80029f6:	4832      	ldr	r0, [pc, #200]	; (8002ac0 <MPU6050_Calib+0x278>)
 80029f8:	f003 f9c5 	bl	8005d86 <HAL_GPIO_TogglePin>
		/* USER CODE END */
		HAL_Delay(50);
 80029fc:	2032      	movs	r0, #50	; 0x32
 80029fe:	f002 f933 	bl	8004c68 <HAL_Delay>
	for(i = 0; i < ui16times; i++)
 8002a02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a06:	3301      	adds	r3, #1
 8002a08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	f4ff af32 	bcc.w	800287c <MPU6050_Calib+0x34>
	}
	mpuGyroScaled->x = mpuScaled.x/ui16times;
 8002a18:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f93d 	bl	8000c9c <__aeabi_i2f>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4620      	mov	r0, r4
 8002a28:	f7fe fa40 	bl	8000eac <__aeabi_fdiv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	601a      	str	r2, [r3, #0]
	mpuGyroScaled->y = mpuScaled.y/ui16times;
 8002a34:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f92f 	bl	8000c9c <__aeabi_i2f>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4619      	mov	r1, r3
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7fe fa32 	bl	8000eac <__aeabi_fdiv>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	605a      	str	r2, [r3, #4]
	mpuGyroScaled->z = mpuScaled.z/ui16times;
 8002a50:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe f921 	bl	8000c9c <__aeabi_i2f>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7fe fa24 	bl	8000eac <__aeabi_fdiv>
 8002a64:	4603      	mov	r3, r0
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	609a      	str	r2, [r3, #8]

	mpuAcceAxis->pitch = mpuAxis.pitch/ui16times;
 8002a6c:	697c      	ldr	r4, [r7, #20]
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f913 	bl	8000c9c <__aeabi_i2f>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f7fe fa16 	bl	8000eac <__aeabi_fdiv>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]
	mpuAcceAxis->roll = mpuAxis.roll/ui16times;
 8002a88:	69bc      	ldr	r4, [r7, #24]
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe f905 	bl	8000c9c <__aeabi_i2f>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4619      	mov	r1, r3
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7fe fa08 	bl	8000eac <__aeabi_fdiv>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	605a      	str	r2, [r3, #4]
	}
 8002aa4:	bf00      	nop
 8002aa6:	3748      	adds	r7, #72	; 0x48
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8002aac:	f3af 8000 	nop.w
 8002ab0:	54442d18 	.word	0x54442d18
 8002ab4:	400921fb 	.word	0x400921fb
 8002ab8:	c3340000 	.word	0xc3340000
 8002abc:	43340000 	.word	0x43340000
 8002ac0:	40010c00 	.word	0x40010c00

08002ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac6:	b099      	sub	sp, #100	; 0x64
 8002ac8:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aca:	f002 f86b 	bl	8004ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ace:	f000 f8f9 	bl	8002cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ad2:	f000 fb71 	bl	80031b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ad6:	f000 fb51 	bl	800317c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002ada:	f000 fb25 	bl	8003128 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002ade:	f000 f9ef 	bl	8002ec0 <MX_TIM1_Init>
  MX_SPI2_Init();
 8002ae2:	f000 f9b7 	bl	8002e54 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002ae6:	f000 fa3b 	bl	8002f60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002aea:	f000 fa85 	bl	8002ff8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002aee:	f000 f983 	bl	8002df8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002af2:	f000 f943 	bl	8002d7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002af6:	2100      	movs	r1, #0
 8002af8:	4862      	ldr	r0, [pc, #392]	; (8002c84 <main+0x1c0>)
 8002afa:	f005 fc93 	bl	8008424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002afe:	2104      	movs	r1, #4
 8002b00:	4860      	ldr	r0, [pc, #384]	; (8002c84 <main+0x1c0>)
 8002b02:	f005 fc8f 	bl	8008424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002b06:	2108      	movs	r1, #8
 8002b08:	485e      	ldr	r0, [pc, #376]	; (8002c84 <main+0x1c0>)
 8002b0a:	f005 fc8b 	bl	8008424 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002b0e:	210c      	movs	r1, #12
 8002b10:	485c      	ldr	r0, [pc, #368]	; (8002c84 <main+0x1c0>)
 8002b12:	f005 fc87 	bl	8008424 <HAL_TIM_PWM_Start>
  htim3.Instance->CCR1 = 1000;
 8002b16:	4b5b      	ldr	r3, [pc, #364]	; (8002c84 <main+0x1c0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance->CCR2 = 1000;
 8002b20:	4b58      	ldr	r3, [pc, #352]	; (8002c84 <main+0x1c0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
  htim3.Instance->CCR3 = 1000;
 8002b2a:	4b56      	ldr	r3, [pc, #344]	; (8002c84 <main+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b32:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR4 = 1000;
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <main+0x1c0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40

  //Mpu 6050 Initialise
#ifndef __ESC_PROGRAMMING
  uint8_t i ;
  MPU6050_InitTypedef mpuInit;
  mpuInit.ui8AcceFullScale = MPU6050_ACCE_FULLSCALE_2G;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	713b      	strb	r3, [r7, #4]
  mpuInit.ui8GyroFullScale = MPU6050_GYRO_FULLSCALE_500DPS;
 8002b42:	2308      	movs	r3, #8
 8002b44:	717b      	strb	r3, [r7, #5]
  mpuInit.ui8DLPF 		   = MPU6050_DLPF_4;
 8002b46:	2304      	movs	r3, #4
 8002b48:	71bb      	strb	r3, [r7, #6]
  MPU6050_Init(&mpuInit, &hi2c1);
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	494e      	ldr	r1, [pc, #312]	; (8002c88 <main+0x1c4>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fc5a 	bl	8002408 <MPU6050_Init>
  for (i = 0; i < 10; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	71fb      	strb	r3, [r7, #7]
 8002b58:	e018      	b.n	8002b8c <main+0xc8>
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	484b      	ldr	r0, [pc, #300]	; (8002c8c <main+0x1c8>)
 8002b5e:	f003 f912 	bl	8005d86 <HAL_GPIO_TogglePin>
	  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin) == 0)
 8002b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b66:	484a      	ldr	r0, [pc, #296]	; (8002c90 <main+0x1cc>)
 8002b68:	f003 f8de 	bl	8005d28 <HAL_GPIO_ReadPin>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d105      	bne.n	8002b7e <main+0xba>
	  {
		  MPU6050_Calib(&mpuAcAxis, &mpuGyOffset, 100);
 8002b72:	2264      	movs	r2, #100	; 0x64
 8002b74:	4947      	ldr	r1, [pc, #284]	; (8002c94 <main+0x1d0>)
 8002b76:	4848      	ldr	r0, [pc, #288]	; (8002c98 <main+0x1d4>)
 8002b78:	f7ff fe66 	bl	8002848 <MPU6050_Calib>
		  break;
 8002b7c:	e009      	b.n	8002b92 <main+0xce>
	  }
	  HAL_Delay(300);
 8002b7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002b82:	f002 f871 	bl	8004c68 <HAL_Delay>
  for (i = 0; i < 10; i++)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	71fb      	strb	r3, [r7, #7]
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	d9e3      	bls.n	8002b5a <main+0x96>
  }
  if(mpuGyOffset.x == 0)
 8002b92:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <main+0x1d0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fa66 	bl	800106c <__aeabi_fcmpeq>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01d      	beq.n	8002be2 <main+0x11e>
  {
	  mpuGyOffset.x = 0.754504144;
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <main+0x1d0>)
 8002ba8:	4a3c      	ldr	r2, [pc, #240]	; (8002c9c <main+0x1d8>)
 8002baa:	601a      	str	r2, [r3, #0]
	  mpuGyOffset.y = -2.73450375;
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <main+0x1d0>)
 8002bae:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <main+0x1dc>)
 8002bb0:	605a      	str	r2, [r3, #4]
	  mpuGyOffset.z = -0.113435157;
 8002bb2:	4b38      	ldr	r3, [pc, #224]	; (8002c94 <main+0x1d0>)
 8002bb4:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <main+0x1e0>)
 8002bb6:	609a      	str	r2, [r3, #8]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2104      	movs	r1, #4
 8002bbc:	4833      	ldr	r0, [pc, #204]	; (8002c8c <main+0x1c8>)
 8002bbe:	f003 f8ca 	bl	8005d56 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002bc2:	2064      	movs	r0, #100	; 0x64
 8002bc4:	f002 f850 	bl	8004c68 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2104      	movs	r1, #4
 8002bcc:	482f      	ldr	r0, [pc, #188]	; (8002c8c <main+0x1c8>)
 8002bce:	f003 f8c2 	bl	8005d56 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002bd2:	2064      	movs	r0, #100	; 0x64
 8002bd4:	f002 f848 	bl	8004c68 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2104      	movs	r1, #4
 8002bdc:	482b      	ldr	r0, [pc, #172]	; (8002c8c <main+0x1c8>)
 8002bde:	f003 f8ba 	bl	8005d56 <HAL_GPIO_WritePin>
  }
#endif

  //NRF24 - L01 Initialise
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi2);
 8002be2:	4c31      	ldr	r4, [pc, #196]	; (8002ca8 <main+0x1e4>)
 8002be4:	4668      	mov	r0, sp
 8002be6:	1d23      	adds	r3, r4, #4
 8002be8:	2254      	movs	r2, #84	; 0x54
 8002bea:	4619      	mov	r1, r3
 8002bec:	f006 fc60 	bl	80094b0 <memcpy>
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bfa:	4824      	ldr	r0, [pc, #144]	; (8002c8c <main+0x1c8>)
 8002bfc:	f7fe fbc4 	bl	8001388 <NRF24_begin>
  nrf24_DebugUART_Init(huart1);
 8002c00:	4e2a      	ldr	r6, [pc, #168]	; (8002cac <main+0x1e8>)
 8002c02:	466d      	mov	r5, sp
 8002c04:	f106 0410 	add.w	r4, r6, #16
 8002c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002c18:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002c1c:	f7ff fba0 	bl	8002360 <nrf24_DebugUART_Init>
  NRF24_setAutoAck(true);
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7fe fe2d 	bl	8001880 <NRF24_setAutoAck>
  NRF24_setChannel(11);
 8002c26:	200b      	movs	r0, #11
 8002c28:	f7fe fd75 	bl	8001716 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8002c2c:	2020      	movs	r0, #32
 8002c2e:	f7fe fd87 	bl	8001740 <NRF24_setPayloadSize>
  NRF24_stopListening();
 8002c32:	f7fe fcaf 	bl	8001594 <NRF24_stopListening>
  NRF24_openReadingPipe(0, RxpipeAddrs);
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <main+0x1ec>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fe fd01 	bl	8001644 <NRF24_openReadingPipe>
  NRF24_openWritingPipe(RxpipeAddrs);
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <main+0x1ec>)
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fe fcd6 	bl	80015fc <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 8002c50:	2001      	movs	r0, #1
 8002c52:	f7fe fe15 	bl	8001880 <NRF24_setAutoAck>
  NRF24_enableAckPayload();
 8002c56:	f7fe fd9b 	bl	8001790 <NRF24_enableAckPayload>
  NRF24_enableDynamicPayloads();
 8002c5a:	f7fe fdc7 	bl	80017ec <NRF24_enableDynamicPayloads>
//  NRF24_setPALevel(RF24_PA_m6dB);
  NRF24_startListening();
 8002c5e:	f7fe fc73 	bl	8001548 <NRF24_startListening>
  printRadioSettings();
 8002c62:	f7fe ff55 	bl	8001b10 <printRadioSettings>
  HAL_TIM_Base_Start_IT(&htim1);
 8002c66:	4813      	ldr	r0, [pc, #76]	; (8002cb4 <main+0x1f0>)
 8002c68:	f005 fb32 	bl	80082d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002c6c:	4812      	ldr	r0, [pc, #72]	; (8002cb8 <main+0x1f4>)
 8002c6e:	f005 fb2f 	bl	80082d0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(5);
 8002c72:	2005      	movs	r0, #5
 8002c74:	f001 fff8 	bl	8004c68 <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ui16VBat, 1);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4910      	ldr	r1, [pc, #64]	; (8002cbc <main+0x1f8>)
 8002c7c:	4810      	ldr	r0, [pc, #64]	; (8002cc0 <main+0x1fc>)
 8002c7e:	f002 f8ef 	bl	8004e60 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <main+0x1be>
 8002c84:	20000428 	.word	0x20000428
 8002c88:	200003c8 	.word	0x200003c8
 8002c8c:	40010c00 	.word	0x40010c00
 8002c90:	40011000 	.word	0x40011000
 8002c94:	200005e0 	.word	0x200005e0
 8002c98:	200005d4 	.word	0x200005d4
 8002c9c:	3f41272f 	.word	0x3f41272f
 8002ca0:	c02f021c 	.word	0xc02f021c
 8002ca4:	bde850b1 	.word	0xbde850b1
 8002ca8:	2000035c 	.word	0x2000035c
 8002cac:	200004b0 	.word	0x200004b0
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000558 	.word	0x20000558
 8002cb8:	200005f0 	.word	0x200005f0
 8002cbc:	2000041c 	.word	0x2000041c
 8002cc0:	20000480 	.word	0x20000480

08002cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b094      	sub	sp, #80	; 0x50
 8002cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cce:	2228      	movs	r2, #40	; 0x28
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f006 fbfa 	bl	80094cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d02:	2301      	movs	r3, #1
 8002d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d06:	2302      	movs	r3, #2
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002d14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 f84c 	bl	8006db8 <HAL_RCC_OscConfig>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d26:	f001 fbad 	bl	8004484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d2a:	230f      	movs	r3, #15
 8002d2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 fab6 	bl	80072b8 <HAL_RCC_ClockConfig>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d52:	f001 fb97 	bl	8004484 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d56:	2302      	movs	r3, #2
 8002d58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 fc42 	bl	80075ec <HAL_RCCEx_PeriphCLKConfig>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002d6e:	f001 fb89 	bl	8004484 <Error_Handler>
  }
}
 8002d72:	bf00      	nop
 8002d74:	3750      	adds	r7, #80	; 0x50
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002d8e:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <MX_ADC1_Init+0x78>)
 8002d90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002da6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002db8:	480d      	ldr	r0, [pc, #52]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002dba:	f001 ff79 	bl	8004cb0 <HAL_ADC_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002dc4:	f001 fb5e 	bl	8004484 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002dc8:	2304      	movs	r3, #4
 8002dca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002dd0:	2307      	movs	r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_ADC1_Init+0x74>)
 8002dda:	f002 f93b 	bl	8005054 <HAL_ADC_ConfigChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002de4:	f001 fb4e 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000480 	.word	0x20000480
 8002df4:	40012400 	.word	0x40012400

08002df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002dfe:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <MX_I2C1_Init+0x54>)
 8002e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <MX_I2C1_Init+0x58>)
 8002e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	; (8002e48 <MX_I2C1_Init+0x50>)
 8002e36:	f002 ffbf 	bl	8005db8 <HAL_I2C_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e40:	f001 fb20 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200003c8 	.word	0x200003c8
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	00061a80 	.word	0x00061a80

08002e54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <MX_SPI2_Init+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e88:	2228      	movs	r2, #40	; 0x28
 8002e8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002ea0:	220a      	movs	r2, #10
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <MX_SPI2_Init+0x64>)
 8002ea6:	f004 fc57 	bl	8007758 <HAL_SPI_Init>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002eb0:	f001 fae8 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	2000035c 	.word	0x2000035c
 8002ebc:	40003800 	.word	0x40003800

08002ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec6:	f107 0308 	add.w	r3, r7, #8
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <MX_TIM1_Init+0x9c>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ee4:	2205      	movs	r2, #5
 8002ee6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee8:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000-1;
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ef0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002ef4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002efc:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f08:	4813      	ldr	r0, [pc, #76]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f0a:	f005 f991 	bl	8008230 <HAL_TIM_Base_Init>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002f14:	f001 fab6 	bl	8004484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4619      	mov	r1, r3
 8002f24:	480c      	ldr	r0, [pc, #48]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f26:	f005 fce5 	bl	80088f4 <HAL_TIM_ConfigClockSource>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002f30:	f001 faa8 	bl	8004484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f3c:	463b      	mov	r3, r7
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_TIM1_Init+0x98>)
 8002f42:	f006 f863 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002f4c:	f001 fa9a 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000558 	.word	0x20000558
 8002f5c:	40012c00 	.word	0x40012c00

08002f60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f74:	463b      	mov	r3, r7
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f86:	2247      	movs	r2, #71	; 0x47
 8002f88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8002f90:	4b18      	ldr	r3, [pc, #96]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f92:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fa4:	4813      	ldr	r0, [pc, #76]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fa6:	f005 f943 	bl	8008230 <HAL_TIM_Base_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002fb0:	f001 fa68 	bl	8004484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fc2:	f005 fc97 	bl	80088f4 <HAL_TIM_ConfigClockSource>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002fcc:	f001 fa5a 	bl	8004484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fd8:	463b      	mov	r3, r7
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4805      	ldr	r0, [pc, #20]	; (8002ff4 <MX_TIM2_Init+0x94>)
 8002fde:	f006 f815 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fe8:	f001 fa4c 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200005f0 	.word	0x200005f0

08002ff8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	605a      	str	r2, [r3, #4]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300c:	f107 0320 	add.w	r3, r7, #32
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
 8003024:	615a      	str	r2, [r3, #20]
 8003026:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003028:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <MX_TIM3_Init+0x128>)
 800302a:	4a3e      	ldr	r2, [pc, #248]	; (8003124 <MX_TIM3_Init+0x12c>)
 800302c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800302e:	4b3c      	ldr	r3, [pc, #240]	; (8003120 <MX_TIM3_Init+0x128>)
 8003030:	2247      	movs	r2, #71	; 0x47
 8003032:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <MX_TIM3_Init+0x128>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <MX_TIM3_Init+0x128>)
 800303c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003040:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <MX_TIM3_Init+0x128>)
 8003044:	2200      	movs	r2, #0
 8003046:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <MX_TIM3_Init+0x128>)
 800304a:	2200      	movs	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800304e:	4834      	ldr	r0, [pc, #208]	; (8003120 <MX_TIM3_Init+0x128>)
 8003050:	f005 f8ee 	bl	8008230 <HAL_TIM_Base_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800305a:	f001 fa13 	bl	8004484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800305e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003068:	4619      	mov	r1, r3
 800306a:	482d      	ldr	r0, [pc, #180]	; (8003120 <MX_TIM3_Init+0x128>)
 800306c:	f005 fc42 	bl	80088f4 <HAL_TIM_ConfigClockSource>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003076:	f001 fa05 	bl	8004484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800307a:	4829      	ldr	r0, [pc, #164]	; (8003120 <MX_TIM3_Init+0x128>)
 800307c:	f005 f97a 	bl	8008374 <HAL_TIM_PWM_Init>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003086:	f001 f9fd 	bl	8004484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003092:	f107 0320 	add.w	r3, r7, #32
 8003096:	4619      	mov	r1, r3
 8003098:	4821      	ldr	r0, [pc, #132]	; (8003120 <MX_TIM3_Init+0x128>)
 800309a:	f005 ffb7 	bl	800900c <HAL_TIMEx_MasterConfigSynchronization>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80030a4:	f001 f9ee 	bl	8004484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030a8:	2360      	movs	r3, #96	; 0x60
 80030aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b8:	1d3b      	adds	r3, r7, #4
 80030ba:	2200      	movs	r2, #0
 80030bc:	4619      	mov	r1, r3
 80030be:	4818      	ldr	r0, [pc, #96]	; (8003120 <MX_TIM3_Init+0x128>)
 80030c0:	f005 fb5a 	bl	8008778 <HAL_TIM_PWM_ConfigChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80030ca:	f001 f9db 	bl	8004484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	2204      	movs	r2, #4
 80030d2:	4619      	mov	r1, r3
 80030d4:	4812      	ldr	r0, [pc, #72]	; (8003120 <MX_TIM3_Init+0x128>)
 80030d6:	f005 fb4f 	bl	8008778 <HAL_TIM_PWM_ConfigChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80030e0:	f001 f9d0 	bl	8004484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	2208      	movs	r2, #8
 80030e8:	4619      	mov	r1, r3
 80030ea:	480d      	ldr	r0, [pc, #52]	; (8003120 <MX_TIM3_Init+0x128>)
 80030ec:	f005 fb44 	bl	8008778 <HAL_TIM_PWM_ConfigChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80030f6:	f001 f9c5 	bl	8004484 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030fa:	1d3b      	adds	r3, r7, #4
 80030fc:	220c      	movs	r2, #12
 80030fe:	4619      	mov	r1, r3
 8003100:	4807      	ldr	r0, [pc, #28]	; (8003120 <MX_TIM3_Init+0x128>)
 8003102:	f005 fb39 	bl	8008778 <HAL_TIM_PWM_ConfigChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800310c:	f001 f9ba 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003110:	4803      	ldr	r0, [pc, #12]	; (8003120 <MX_TIM3_Init+0x128>)
 8003112:	f001 fb5f 	bl	80047d4 <HAL_TIM_MspPostInit>

}
 8003116:	bf00      	nop
 8003118:	3738      	adds	r7, #56	; 0x38
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000428 	.word	0x20000428
 8003124:	40000400 	.word	0x40000400

08003128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <MX_USART1_UART_Init+0x50>)
 8003130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 8003134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 8003148:	2200      	movs	r2, #0
 800314a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 800314e:	220c      	movs	r2, #12
 8003150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800315e:	4805      	ldr	r0, [pc, #20]	; (8003174 <MX_USART1_UART_Init+0x4c>)
 8003160:	f005 ffc4 	bl	80090ec <HAL_UART_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800316a:	f001 f98b 	bl	8004484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200004b0 	.word	0x200004b0
 8003178:	40013800 	.word	0x40013800

0800317c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_DMA_Init+0x38>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <MX_DMA_Init+0x38>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	6153      	str	r3, [r2, #20]
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_DMA_Init+0x38>)
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	200b      	movs	r0, #11
 80031a0:	f002 fa19 	bl	80055d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031a4:	200b      	movs	r0, #11
 80031a6:	f002 fa32 	bl	800560e <HAL_NVIC_EnableIRQ>

}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031cc:	4b35      	ldr	r3, [pc, #212]	; (80032a4 <MX_GPIO_Init+0xec>)
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <MX_GPIO_Init+0xec>)
 80031d2:	f043 0310 	orr.w	r3, r3, #16
 80031d6:	6193      	str	r3, [r2, #24]
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <MX_GPIO_Init+0xec>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e4:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <MX_GPIO_Init+0xec>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a2e      	ldr	r2, [pc, #184]	; (80032a4 <MX_GPIO_Init+0xec>)
 80031ea:	f043 0320 	orr.w	r3, r3, #32
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <MX_GPIO_Init+0xec>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <MX_GPIO_Init+0xec>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a28      	ldr	r2, [pc, #160]	; (80032a4 <MX_GPIO_Init+0xec>)
 8003202:	f043 0304 	orr.w	r3, r3, #4
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <MX_GPIO_Init+0xec>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003214:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <MX_GPIO_Init+0xec>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	4a22      	ldr	r2, [pc, #136]	; (80032a4 <MX_GPIO_Init+0xec>)
 800321a:	f043 0308 	orr.w	r3, r3, #8
 800321e:	6193      	str	r3, [r2, #24]
 8003220:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <MX_GPIO_Init+0xec>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|LED1_Pin|LED2_Pin|CSN_Pin, GPIO_PIN_RESET);
 800322c:	2200      	movs	r2, #0
 800322e:	f641 4104 	movw	r1, #7172	; 0x1c04
 8003232:	481d      	ldr	r0, [pc, #116]	; (80032a8 <MX_GPIO_Init+0xf0>)
 8003234:	f002 fd8f 	bl	8005d56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8003238:	2200      	movs	r2, #0
 800323a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800323e:	481b      	ldr	r0, [pc, #108]	; (80032ac <MX_GPIO_Init+0xf4>)
 8003240:	f002 fd89 	bl	8005d56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8003244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003248:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8003252:	f107 0310 	add.w	r3, r7, #16
 8003256:	4619      	mov	r1, r3
 8003258:	4815      	ldr	r0, [pc, #84]	; (80032b0 <MX_GPIO_Init+0xf8>)
 800325a:	f002 fbe1 	bl	8005a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LED1_Pin LED2_Pin CSN_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin|LED2_Pin|CSN_Pin;
 800325e:	f641 4304 	movw	r3, #7172	; 0x1c04
 8003262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2302      	movs	r3, #2
 800326e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	4619      	mov	r1, r3
 8003276:	480c      	ldr	r0, [pc, #48]	; (80032a8 <MX_GPIO_Init+0xf0>)
 8003278:	f002 fbd2 	bl	8005a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 800327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003282:	2301      	movs	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2302      	movs	r3, #2
 800328c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	4619      	mov	r1, r3
 8003294:	4805      	ldr	r0, [pc, #20]	; (80032ac <MX_GPIO_Init+0xf4>)
 8003296:	f002 fbc3 	bl	8005a20 <HAL_GPIO_Init>

}
 800329a:	bf00      	nop
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40010c00 	.word	0x40010c00
 80032ac:	40010800 	.word	0x40010800
 80032b0:	40011000 	.word	0x40011000
 80032b4:	00000000 	.word	0x00000000

080032b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032bc:	b08a      	sub	sp, #40	; 0x28
 80032be:	af06      	add	r7, sp, #24
 80032c0:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4bb8      	ldr	r3, [pc, #736]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10d      	bne.n	80032ea <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		/* Angle Calculate */
		AngleCal();
 80032ce:	f000 fb2f 	bl	8003930 <AngleCal>

		/* Roll PID calculate */
		RollPIDCal();
 80032d2:	f000 fcb9 	bl	8003c48 <RollPIDCal>

		/* Pitch PID calculate */
		PitchPIDCal();
 80032d6:	f000 fd5f 	bl	8003d98 <PitchPIDCal>

		/* Yaw PID calculate */
		YawPIDCal();
 80032da:	f000 fe03 	bl	8003ee4 <YawPIDCal>

		/* Compile 3 PID for 4 Motor Channel */
		MotorThrust();
 80032de:	f000 fea9 	bl	8004034 <MotorThrust>
		/* Battery voltage */
		Baterry_Calculate(&ui16VBat, &VBat);
 80032e2:	49b2      	ldr	r1, [pc, #712]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80032e4:	48b2      	ldr	r0, [pc, #712]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80032e6:	f001 f85b 	bl	80043a0 <Baterry_Calculate>
	}
	if(htim->Instance == htim2.Instance)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4bb1      	ldr	r3, [pc, #708]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f040 8264 	bne.w	80037c0 <HAL_TIM_PeriodElapsedCallback+0x508>
	{
		static uint16_t i = 0;
		static uint16_t count = 0;
		i++;							// This value is used to detect lost connection
 80032f8:	4baf      	ldr	r3, [pc, #700]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	4bad      	ldr	r3, [pc, #692]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003302:	801a      	strh	r2, [r3, #0]
		//Prepare String for ACK
		if(NRF24_available())			//Read Data Payload
 8003304:	f7fe f951 	bl	80015aa <NRF24_available>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8202 	beq.w	8003714 <HAL_TIM_PeriodElapsedCallback+0x45c>
		{
			i = 0;
 8003310:	4ba9      	ldr	r3, [pc, #676]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8003312:	2200      	movs	r2, #0
 8003314:	801a      	strh	r2, [r3, #0]
			memset(ui8RBuffer, '\0', sizeof(ui8RBuffer));
 8003316:	2220      	movs	r2, #32
 8003318:	2100      	movs	r1, #0
 800331a:	48a8      	ldr	r0, [pc, #672]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 800331c:	f006 f8d6 	bl	80094cc <memset>
			NRF24_read(ui8RBuffer, 32);
 8003320:	2120      	movs	r1, #32
 8003322:	48a6      	ldr	r0, [pc, #664]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8003324:	f7fe f949 	bl	80015ba <NRF24_read>
			memset(ui8RAck, '\0', sizeof(ui8RAck));
 8003328:	2220      	movs	r2, #32
 800332a:	2100      	movs	r1, #0
 800332c:	48a4      	ldr	r0, [pc, #656]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800332e:	f006 f8cd 	bl	80094cc <memset>
			sprintf((char*)ui8RAck, "ACKR%05.1fP%05.1fY%05.0fB%04.1f", mpuGyAxis.roll, mpuGyAxis.pitch, mpuGyAxis.yaw, VBat);
 8003332:	4ba4      	ldr	r3, [pc, #656]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f876 	bl	8000428 <__aeabi_f2d>
 800333c:	4682      	mov	sl, r0
 800333e:	468b      	mov	fp, r1
 8003340:	4ba0      	ldr	r3, [pc, #640]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd f86f 	bl	8000428 <__aeabi_f2d>
 800334a:	4604      	mov	r4, r0
 800334c:	460d      	mov	r5, r1
 800334e:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f868 	bl	8000428 <__aeabi_f2d>
 8003358:	4680      	mov	r8, r0
 800335a:	4689      	mov	r9, r1
 800335c:	4b93      	ldr	r3, [pc, #588]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f861 	bl	8000428 <__aeabi_f2d>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800336e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003372:	e9cd 4500 	strd	r4, r5, [sp]
 8003376:	4652      	mov	r2, sl
 8003378:	465b      	mov	r3, fp
 800337a:	4993      	ldr	r1, [pc, #588]	; (80035c8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800337c:	4890      	ldr	r0, [pc, #576]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800337e:	f006 fd0d 	bl	8009d9c <siprintf>
			NRF24_writeAckPayload(0, ui8RAck, 32);
 8003382:	2220      	movs	r2, #32
 8003384:	498e      	ldr	r1, [pc, #568]	; (80035c0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8003386:	2000      	movs	r0, #0
 8003388:	f7fe fb75 	bl	8001a76 <NRF24_writeAckPayload>
			if(Compare_String(ui8RBuffer, (uint8_t*)"CMD", 3))			// Read CMD data
 800338c:	2203      	movs	r2, #3
 800338e:	498f      	ldr	r1, [pc, #572]	; (80035cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8003390:	488a      	ldr	r0, [pc, #552]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8003392:	f000 fa61 	bl	8003858 <Compare_String>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 816c 	beq.w	8003676 <HAL_TIM_PeriodElapsedCallback+0x3be>
			{
				if(ui8RBuffer[3] == 'T')
 800339e:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80033a0:	78db      	ldrb	r3, [r3, #3]
 80033a2:	2b54      	cmp	r3, #84	; 0x54
 80033a4:	d110      	bne.n	80033c8 <HAL_TIM_PeriodElapsedCallback+0x110>
				{
					ConvertString2Int(&ui16UserBuffer, &ui8RBuffer[4]);
 80033a6:	498a      	ldr	r1, [pc, #552]	; (80035d0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80033a8:	488a      	ldr	r0, [pc, #552]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80033aa:	f000 fa7a 	bl	80038a2 <ConvertString2Int>
					ui16UserThurst = ui16UserBuffer;
 80033ae:	4b89      	ldr	r3, [pc, #548]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	4b89      	ldr	r3, [pc, #548]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80033b4:	801a      	strh	r2, [r3, #0]
#ifndef __ESC_PROGRAMMING
					if(ui16UserThurst > 1600)
 80033b6:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80033be:	d903      	bls.n	80033c8 <HAL_TIM_PeriodElapsedCallback+0x110>
						ui16UserThurst = 1600;
 80033c0:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80033c2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80033c6:	801a      	strh	r2, [r3, #0]
#endif
				}
				if(ui8RBuffer[8] == 'R')
 80033c8:	4b7c      	ldr	r3, [pc, #496]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80033ca:	7a1b      	ldrb	r3, [r3, #8]
 80033cc:	2b52      	cmp	r3, #82	; 0x52
 80033ce:	d167      	bne.n	80034a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>
				{
					ConvertString2Int(&ui16UserBuffer, &ui8RBuffer[9]);
 80033d0:	4982      	ldr	r1, [pc, #520]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80033d2:	4880      	ldr	r0, [pc, #512]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80033d4:	f000 fa65 	bl	80038a2 <ConvertString2Int>
					flUSerRoll = flUSerRoll*0.7 +  0.3*((float)ui16UserBuffer - 1500)*20/500;
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f823 	bl	8000428 <__aeabi_f2d>
 80033e2:	a36d      	add	r3, pc, #436	; (adr r3, 8003598 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	f7fd f876 	bl	80004d8 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd fc4b 	bl	8000c94 <__aeabi_ui2f>
 80033fe:	4603      	mov	r3, r0
 8003400:	4978      	ldr	r1, [pc, #480]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fb94 	bl	8000b30 <__aeabi_fsub>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f80c 	bl	8000428 <__aeabi_f2d>
 8003410:	a363      	add	r3, pc, #396	; (adr r3, 80035a0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f7fd f85f 	bl	80004d8 <__aeabi_dmul>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	4b70      	ldr	r3, [pc, #448]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003428:	f7fd f856 	bl	80004d8 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	4b6c      	ldr	r3, [pc, #432]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x334>)
 800343a:	f7fd f977 	bl	800072c <__aeabi_ddiv>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	f7fc fe91 	bl	800016c <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fb19 	bl	8000a88 <__aeabi_d2f>
 8003456:	4603      	mov	r3, r0
 8003458:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800345a:	6013      	str	r3, [r2, #0]
					if((flUSerRoll > -0.5) && (flUSerRoll < 0.5) )
 800345c:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fe29 	bl	80010bc <__aeabi_fcmpgt>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00d      	beq.n	800348c <HAL_TIM_PeriodElapsedCallback+0x1d4>
 8003470:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fe01 	bl	8001080 <__aeabi_fcmplt>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_TIM_PeriodElapsedCallback+0x1d4>
					{
						flUSerRoll = 0;
 8003484:	4b56      	ldr	r3, [pc, #344]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
					}
					if(ui16UserThurst < 1030)
 800348c:	4b52      	ldr	r3, [pc, #328]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	f240 4205 	movw	r2, #1029	; 0x405
 8003494:	4293      	cmp	r3, r2
 8003496:	d803      	bhi.n	80034a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>
						flUSerRoll = 0;
 8003498:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
				}
				if(ui8RBuffer[13] == 'P')
 80034a0:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 80034a2:	7b5b      	ldrb	r3, [r3, #13]
 80034a4:	2b50      	cmp	r3, #80	; 0x50
 80034a6:	d167      	bne.n	8003578 <HAL_TIM_PeriodElapsedCallback+0x2c0>
				{
					ConvertString2Int(&ui16UserBuffer, &ui8RBuffer[14]);
 80034a8:	4951      	ldr	r1, [pc, #324]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80034aa:	484a      	ldr	r0, [pc, #296]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80034ac:	f000 f9f9 	bl	80038a2 <ConvertString2Int>
					flUserPitch =flUserPitch*0.7 - 0.3*((float)ui16UserBuffer - 1500)*20/500;
 80034b0:	4b50      	ldr	r3, [pc, #320]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fc ffb7 	bl	8000428 <__aeabi_f2d>
 80034ba:	a337      	add	r3, pc, #220	; (adr r3, 8003598 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fd f80a 	bl	80004d8 <__aeabi_dmul>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4614      	mov	r4, r2
 80034ca:	461d      	mov	r5, r3
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fbdf 	bl	8000c94 <__aeabi_ui2f>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4942      	ldr	r1, [pc, #264]	; (80035e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fb28 	bl	8000b30 <__aeabi_fsub>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fc ffa0 	bl	8000428 <__aeabi_f2d>
 80034e8:	a32d      	add	r3, pc, #180	; (adr r3, 80035a0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f7fc fff3 	bl	80004d8 <__aeabi_dmul>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8003500:	f7fc ffea 	bl	80004d8 <__aeabi_dmul>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_TIM_PeriodElapsedCallback+0x334>)
 8003512:	f7fd f90b 	bl	800072c <__aeabi_ddiv>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	f7fc fe23 	bl	8000168 <__aeabi_dsub>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4610      	mov	r0, r2
 8003528:	4619      	mov	r1, r3
 800352a:	f7fd faad 	bl	8000a88 <__aeabi_d2f>
 800352e:	4603      	mov	r3, r0
 8003530:	4a30      	ldr	r2, [pc, #192]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003532:	6013      	str	r3, [r2, #0]
					if((flUserPitch > -0.5) && (flUserPitch < 0.5) )
 8003534:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fdbd 	bl	80010bc <__aeabi_fcmpgt>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00d      	beq.n	8003564 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8003548:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd fd95 	bl	8001080 <__aeabi_fcmplt>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_TIM_PeriodElapsedCallback+0x2ac>
					{
						flUserPitch = 0;
 800355c:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
					}
					if(ui16UserThurst < 1030)
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	f240 4205 	movw	r2, #1029	; 0x405
 800356c:	4293      	cmp	r3, r2
 800356e:	d803      	bhi.n	8003578 <HAL_TIM_PeriodElapsedCallback+0x2c0>
						flUserPitch = 0;
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	601a      	str	r2, [r3, #0]
				}
				if(ui8RBuffer[18] == 'Y')
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 800357a:	7c9b      	ldrb	r3, [r3, #18]
 800357c:	2b59      	cmp	r3, #89	; 0x59
 800357e:	d17a      	bne.n	8003676 <HAL_TIM_PeriodElapsedCallback+0x3be>
				{
					float buf;
					ConvertString2Int(&ui16UserBuffer, &ui8RBuffer[19]);
 8003580:	491d      	ldr	r1, [pc, #116]	; (80035f8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8003582:	4814      	ldr	r0, [pc, #80]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8003584:	f000 f98d 	bl	80038a2 <ConvertString2Int>
					buf = ((float)ui16UserBuffer - 1500)*2/500;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fd fb81 	bl	8000c94 <__aeabi_ui2f>
 8003592:	4603      	mov	r3, r0
 8003594:	e032      	b.n	80035fc <HAL_TIM_PeriodElapsedCallback+0x344>
 8003596:	bf00      	nop
 8003598:	66666666 	.word	0x66666666
 800359c:	3fe66666 	.word	0x3fe66666
 80035a0:	33333333 	.word	0x33333333
 80035a4:	3fd33333 	.word	0x3fd33333
 80035a8:	20000558 	.word	0x20000558
 80035ac:	20000014 	.word	0x20000014
 80035b0:	2000041c 	.word	0x2000041c
 80035b4:	200005f0 	.word	0x200005f0
 80035b8:	200002e6 	.word	0x200002e6
 80035bc:	20000638 	.word	0x20000638
 80035c0:	200005a0 	.word	0x200005a0
 80035c4:	200003b4 	.word	0x200003b4
 80035c8:	0800cc2c 	.word	0x0800cc2c
 80035cc:	0800cc4c 	.word	0x0800cc4c
 80035d0:	2000063c 	.word	0x2000063c
 80035d4:	200006a8 	.word	0x200006a8
 80035d8:	20000010 	.word	0x20000010
 80035dc:	20000641 	.word	0x20000641
 80035e0:	20000350 	.word	0x20000350
 80035e4:	44bb8000 	.word	0x44bb8000
 80035e8:	40340000 	.word	0x40340000
 80035ec:	407f4000 	.word	0x407f4000
 80035f0:	20000646 	.word	0x20000646
 80035f4:	20000424 	.word	0x20000424
 80035f8:	2000064b 	.word	0x2000064b
 80035fc:	4978      	ldr	r1, [pc, #480]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd fa96 	bl	8000b30 <__aeabi_fsub>
 8003604:	4603      	mov	r3, r0
 8003606:	4619      	mov	r1, r3
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fa93 	bl	8000b34 <__addsf3>
 800360e:	4603      	mov	r3, r0
 8003610:	4974      	ldr	r1, [pc, #464]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fc4a 	bl	8000eac <__aeabi_fdiv>
 8003618:	4603      	mov	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]
					if((buf > -0.2) && (buf < 0.2) )
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7fc ff03 	bl	8000428 <__aeabi_f2d>
 8003622:	a36b      	add	r3, pc, #428	; (adr r3, 80037d0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f7fd f9e6 	bl	80009f8 <__aeabi_dcmpgt>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00d      	beq.n	800364e <HAL_TIM_PeriodElapsedCallback+0x396>
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7fc fef8 	bl	8000428 <__aeabi_f2d>
 8003638:	a367      	add	r3, pc, #412	; (adr r3, 80037d8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fd f9bd 	bl	80009bc <__aeabi_dcmplt>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_TIM_PeriodElapsedCallback+0x396>
					{
						buf = 0;
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
					}
					flUserYaw -= buf;
 800364e:	4b66      	ldr	r3, [pc, #408]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fa6b 	bl	8000b30 <__aeabi_fsub>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	4b62      	ldr	r3, [pc, #392]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003660:	601a      	str	r2, [r3, #0]
					if(ui16UserThurst < 1030)
 8003662:	4b62      	ldr	r3, [pc, #392]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	f240 4205 	movw	r2, #1029	; 0x405
 800366a:	4293      	cmp	r3, r2
 800366c:	d803      	bhi.n	8003676 <HAL_TIM_PeriodElapsedCallback+0x3be>
						flUserYaw = 0;
 800366e:	4b5e      	ldr	r3, [pc, #376]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
				}
			}
			if(Compare_String(ui8RBuffer, (uint8_t*)"PID", 3))				// Read PID setup
 8003676:	2203      	movs	r2, #3
 8003678:	495d      	ldr	r1, [pc, #372]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800367a:	485e      	ldr	r0, [pc, #376]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800367c:	f000 f8ec 	bl	8003858 <Compare_String>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d020      	beq.n	80036c8 <HAL_TIM_PeriodElapsedCallback+0x410>
			{
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003686:	2104      	movs	r1, #4
 8003688:	485b      	ldr	r0, [pc, #364]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800368a:	f002 fb7c 	bl	8005d86 <HAL_GPIO_TogglePin>
				switch (ui8RBuffer[3])
 800368e:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8003690:	78db      	ldrb	r3, [r3, #3]
 8003692:	2b33      	cmp	r3, #51	; 0x33
 8003694:	d012      	beq.n	80036bc <HAL_TIM_PeriodElapsedCallback+0x404>
 8003696:	2b33      	cmp	r3, #51	; 0x33
 8003698:	dc18      	bgt.n	80036cc <HAL_TIM_PeriodElapsedCallback+0x414>
 800369a:	2b31      	cmp	r3, #49	; 0x31
 800369c:	d002      	beq.n	80036a4 <HAL_TIM_PeriodElapsedCallback+0x3ec>
 800369e:	2b32      	cmp	r3, #50	; 0x32
 80036a0:	d006      	beq.n	80036b0 <HAL_TIM_PeriodElapsedCallback+0x3f8>
						break;
					case '3':
						SetPID(&KpY, &KiY, &KdY);
					break;
					default:
						break;
 80036a2:	e013      	b.n	80036cc <HAL_TIM_PeriodElapsedCallback+0x414>
						SetPID(&KpR, &KiR, &KdR);
 80036a4:	4a55      	ldr	r2, [pc, #340]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x544>)
 80036a6:	4956      	ldr	r1, [pc, #344]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80036a8:	4856      	ldr	r0, [pc, #344]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80036aa:	f000 fe4f 	bl	800434c <SetPID>
						break;
 80036ae:	e00e      	b.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x416>
						SetPID(&KpP, &KiP, &KdP);
 80036b0:	4a55      	ldr	r2, [pc, #340]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80036b2:	4956      	ldr	r1, [pc, #344]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80036b4:	4856      	ldr	r0, [pc, #344]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80036b6:	f000 fe49 	bl	800434c <SetPID>
						break;
 80036ba:	e008      	b.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x416>
						SetPID(&KpY, &KiY, &KdY);
 80036bc:	4a55      	ldr	r2, [pc, #340]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80036be:	4956      	ldr	r1, [pc, #344]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80036c0:	4856      	ldr	r0, [pc, #344]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x564>)
 80036c2:	f000 fe43 	bl	800434c <SetPID>
					break;
 80036c6:	e002      	b.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x416>
				}
			}
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x416>
						break;
 80036cc:	bf00      	nop
			if(Compare_String(ui8RBuffer, (uint8_t*)"CTL", 3))
 80036ce:	2203      	movs	r2, #3
 80036d0:	4953      	ldr	r1, [pc, #332]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80036d2:	4848      	ldr	r0, [pc, #288]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80036d4:	f000 f8c0 	bl	8003858 <Compare_String>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01a      	beq.n	8003714 <HAL_TIM_PeriodElapsedCallback+0x45c>
			{
				switch (ui8RBuffer[3])
 80036de:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80036e0:	78db      	ldrb	r3, [r3, #3]
 80036e2:	2b53      	cmp	r3, #83	; 0x53
 80036e4:	d118      	bne.n	8003718 <HAL_TIM_PeriodElapsedCallback+0x460>
				{
					case 'S':
						if(Compare_String(&ui8RBuffer[4],(uint8_t*) "START", 4))
 80036e6:	2204      	movs	r2, #4
 80036e8:	494e      	ldr	r1, [pc, #312]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80036ea:	484f      	ldr	r0, [pc, #316]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80036ec:	f000 f8b4 	bl	8003858 <Compare_String>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_TIM_PeriodElapsedCallback+0x444>
						{
							ctlState = CONTROL_READY;
 80036f6:	4b4d      	ldr	r3, [pc, #308]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
						}
						if(Compare_String(&ui8RBuffer[4], (uint8_t*)"STOP", 3))
 80036fc:	2203      	movs	r2, #3
 80036fe:	494c      	ldr	r1, [pc, #304]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8003700:	4849      	ldr	r0, [pc, #292]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8003702:	f000 f8a9 	bl	8003858 <Compare_String>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_PeriodElapsedCallback+0x464>
						{
							ctlState = CONTROL_STOP;
 800370c:	4b47      	ldr	r3, [pc, #284]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
						}
						break;
 8003712:	e003      	b.n	800371c <HAL_TIM_PeriodElapsedCallback+0x464>
					default:
						break;
				}
			}
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_TIM_PeriodElapsedCallback+0x466>
						break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_TIM_PeriodElapsedCallback+0x466>
						break;
 800371c:	bf00      	nop
		}
		if(ui16UserThurst < 1020)
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8003726:	d22a      	bcs.n	800377e <HAL_TIM_PeriodElapsedCallback+0x4c6>
		{
			count++;
 8003728:	4b42      	ldr	r3, [pc, #264]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8003732:	801a      	strh	r2, [r3, #0]
			if(count > 40)
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	2b28      	cmp	r3, #40	; 0x28
 800373a:	d929      	bls.n	8003790 <HAL_TIM_PeriodElapsedCallback+0x4d8>
			{
				count = 0;
 800373c:	4b3d      	ldr	r3, [pc, #244]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 800373e:	2200      	movs	r2, #0
 8003740:	801a      	strh	r2, [r3, #0]
				RollI = 0;
 8003742:	4b3d      	ldr	r3, [pc, #244]	; (8003838 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	601a      	str	r2, [r3, #0]
				PitchI = 0;
 800374a:	4b3c      	ldr	r3, [pc, #240]	; (800383c <HAL_TIM_PeriodElapsedCallback+0x584>)
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
				YawI = 0;
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	601a      	str	r2, [r3, #0]
				mpuGyAxis.yaw = 0;
 800375a:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
				mpuGyAxis.pitch = mpuAcAxis.pitch;
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a37      	ldr	r2, [pc, #220]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8003768:	6013      	str	r3, [r2, #0]
				mpuGyAxis.roll = mpuAcAxis.roll;
 800376a:	4b37      	ldr	r3, [pc, #220]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4a35      	ldr	r2, [pc, #212]	; (8003844 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8003770:	6053      	str	r3, [r2, #4]
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003776:	4820      	ldr	r0, [pc, #128]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 8003778:	f002 fb05 	bl	8005d86 <HAL_GPIO_TogglePin>
 800377c:	e008      	b.n	8003790 <HAL_TIM_PeriodElapsedCallback+0x4d8>
			}
		}
		else
		{
			count = 0;
 800377e:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8003780:	2200      	movs	r2, #0
 8003782:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800378a:	481b      	ldr	r0, [pc, #108]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800378c:	f002 fae3 	bl	8005d56 <HAL_GPIO_WritePin>
		}
		if(i > 20)			// Lost Connection with TX
 8003790:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	2b14      	cmp	r3, #20
 8003796:	d913      	bls.n	80037c0 <HAL_TIM_PeriodElapsedCallback+0x508>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003798:	2104      	movs	r1, #4
 800379a:	4817      	ldr	r0, [pc, #92]	; (80037f8 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800379c:	f002 faf3 	bl	8005d86 <HAL_GPIO_TogglePin>
			// Set User Thrust, Pitch, Roll and Yaw Angle to Default
			ui16UserThurst = 1000;
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x534>)
 80037a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037a6:	801a      	strh	r2, [r3, #0]
			flUSerRoll = 0;
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
			flUserPitch = 0;
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
			flUserYaw = 0;
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
		}
	}
	}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w
 80037d0:	9999999a 	.word	0x9999999a
 80037d4:	bfc99999 	.word	0xbfc99999
 80037d8:	9999999a 	.word	0x9999999a
 80037dc:	3fc99999 	.word	0x3fc99999
 80037e0:	44bb8000 	.word	0x44bb8000
 80037e4:	43fa0000 	.word	0x43fa0000
 80037e8:	20000354 	.word	0x20000354
 80037ec:	20000010 	.word	0x20000010
 80037f0:	0800cc50 	.word	0x0800cc50
 80037f4:	20000638 	.word	0x20000638
 80037f8:	40010c00 	.word	0x40010c00
 80037fc:	20000020 	.word	0x20000020
 8003800:	2000001c 	.word	0x2000001c
 8003804:	20000018 	.word	0x20000018
 8003808:	2000002c 	.word	0x2000002c
 800380c:	20000028 	.word	0x20000028
 8003810:	20000024 	.word	0x20000024
 8003814:	200004f0 	.word	0x200004f0
 8003818:	20000034 	.word	0x20000034
 800381c:	20000030 	.word	0x20000030
 8003820:	0800cc54 	.word	0x0800cc54
 8003824:	0800cc58 	.word	0x0800cc58
 8003828:	2000063c 	.word	0x2000063c
 800382c:	200002e4 	.word	0x200002e4
 8003830:	0800cc60 	.word	0x0800cc60
 8003834:	200002e8 	.word	0x200002e8
 8003838:	20000544 	.word	0x20000544
 800383c:	20000358 	.word	0x20000358
 8003840:	200005c0 	.word	0x200005c0
 8003844:	200003b4 	.word	0x200003b4
 8003848:	200005d4 	.word	0x200005d4
 800384c:	200002e6 	.word	0x200002e6
 8003850:	20000350 	.word	0x20000350
 8003854:	20000424 	.word	0x20000424

08003858 <Compare_String>:

bool Compare_String (uint8_t* ui8String1, uint8_t* ui8String2, uint8_t ui8Size)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < ui8Size; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	75fb      	strb	r3, [r7, #23]
 800386a:	e010      	b.n	800388e <Compare_String+0x36>
	{
		if(*ui8String1 != *ui8String2)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <Compare_String+0x24>
		{
			return false;
 8003878:	2300      	movs	r3, #0
 800387a:	e00d      	b.n	8003898 <Compare_String+0x40>
		}
		ui8String1++;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
		ui8String2++;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3301      	adds	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < ui8Size; i++)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	3301      	adds	r3, #1
 800388c:	75fb      	strb	r3, [r7, #23]
 800388e:	7dfa      	ldrb	r2, [r7, #23]
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3ea      	bcc.n	800386c <Compare_String+0x14>
	}
	return true;
 8003896:	2301      	movs	r3, #1
	}
 8003898:	4618      	mov	r0, r3
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <ConvertString2Int>:
void ConvertString2Int (uint16_t* ui16Int, uint8_t* ui8String)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
	uint8_t ui8Buffer[4];
	uint8_t i;
	for(i = 0; i < 4; i++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	e00f      	b.n	80038d2 <ConvertString2Int+0x30>
	{
		ui8Buffer[i] = *ui8String - 0x30;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	3a30      	subs	r2, #48	; 0x30
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	f107 0110 	add.w	r1, r7, #16
 80038c0:	440b      	add	r3, r1
 80038c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		ui8String++;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	603b      	str	r3, [r7, #0]
	for(i = 0; i < 4; i++)
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	3301      	adds	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d9ec      	bls.n	80038b2 <ConvertString2Int+0x10>
	}
	*ui16Int = ui8Buffer[0]*1000 + ui8Buffer[1]*100 + ui8Buffer[2]*10 + ui8Buffer[3];
 80038d8:	7a3b      	ldrb	r3, [r7, #8]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	0152      	lsls	r2, r2, #5
 80038e0:	1ad2      	subs	r2, r2, r3
 80038e2:	0092      	lsls	r2, r2, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	7a7b      	ldrb	r3, [r7, #9]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4619      	mov	r1, r3
 80038f0:	0089      	lsls	r1, r1, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	4619      	mov	r1, r3
 80038f6:	0088      	lsls	r0, r1, #2
 80038f8:	4619      	mov	r1, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	440b      	add	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	b29b      	uxth	r3, r3
 8003902:	4413      	add	r3, r2
 8003904:	b29a      	uxth	r2, r3
 8003906:	7abb      	ldrb	r3, [r7, #10]
 8003908:	b29b      	uxth	r3, r3
 800390a:	4619      	mov	r1, r3
 800390c:	0089      	lsls	r1, r1, #2
 800390e:	440b      	add	r3, r1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	b29b      	uxth	r3, r3
 8003914:	4413      	add	r3, r2
 8003916:	b29a      	uxth	r2, r3
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	b29b      	uxth	r3, r3
 800391c:	4413      	add	r3, r2
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	801a      	strh	r2, [r3, #0]

	}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <AngleCal>:
void AngleCal (void)
{
 8003930:	b5b0      	push	{r4, r5, r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
	mpuAcScaled = MPU6050_AcceRead_Scaled();
 8003936:	4ca8      	ldr	r4, [pc, #672]	; (8003bd8 <AngleCal+0x2a8>)
 8003938:	463b      	mov	r3, r7
 800393a:	4618      	mov	r0, r3
 800393c:	f7fe fec0 	bl	80026c0 <MPU6050_AcceRead_Scaled>
 8003940:	463b      	mov	r3, r7
 8003942:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003946:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mpuGyScaled = MPU6050_GyroRead_Scaled();
 800394a:	4ca4      	ldr	r4, [pc, #656]	; (8003bdc <AngleCal+0x2ac>)
 800394c:	463b      	mov	r3, r7
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe ff36 	bl	80027c0 <MPU6050_GyroRead_Scaled>
 8003954:	463b      	mov	r3, r7
 8003956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800395a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    mpuGyScaled.x -= mpuGyOffset.x;
 800395e:	4b9f      	ldr	r3, [pc, #636]	; (8003bdc <AngleCal+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a9f      	ldr	r2, [pc, #636]	; (8003be0 <AngleCal+0x2b0>)
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	4611      	mov	r1, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd f8e1 	bl	8000b30 <__aeabi_fsub>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	4b9a      	ldr	r3, [pc, #616]	; (8003bdc <AngleCal+0x2ac>)
 8003974:	601a      	str	r2, [r3, #0]
    mpuGyScaled.y -= mpuGyOffset.y;
 8003976:	4b99      	ldr	r3, [pc, #612]	; (8003bdc <AngleCal+0x2ac>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4a99      	ldr	r2, [pc, #612]	; (8003be0 <AngleCal+0x2b0>)
 800397c:	6852      	ldr	r2, [r2, #4]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd f8d5 	bl	8000b30 <__aeabi_fsub>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	4b94      	ldr	r3, [pc, #592]	; (8003bdc <AngleCal+0x2ac>)
 800398c:	605a      	str	r2, [r3, #4]
    mpuGyScaled.z -= mpuGyOffset.z;
 800398e:	4b93      	ldr	r3, [pc, #588]	; (8003bdc <AngleCal+0x2ac>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	4a93      	ldr	r2, [pc, #588]	; (8003be0 <AngleCal+0x2b0>)
 8003994:	6892      	ldr	r2, [r2, #8]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd f8c9 	bl	8000b30 <__aeabi_fsub>
 800399e:	4603      	mov	r3, r0
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b8e      	ldr	r3, [pc, #568]	; (8003bdc <AngleCal+0x2ac>)
 80039a4:	609a      	str	r2, [r3, #8]

    mpuAcAxis.pitch = -180* atan2f(mpuAcScaled.x, sqrt(mpuAcScaled.y*mpuAcScaled.y + mpuAcScaled.z*mpuAcScaled.z))/M_PI;
 80039a6:	4b8c      	ldr	r3, [pc, #560]	; (8003bd8 <AngleCal+0x2a8>)
 80039a8:	681c      	ldr	r4, [r3, #0]
 80039aa:	4b8b      	ldr	r3, [pc, #556]	; (8003bd8 <AngleCal+0x2a8>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4a8a      	ldr	r2, [pc, #552]	; (8003bd8 <AngleCal+0x2a8>)
 80039b0:	6852      	ldr	r2, [r2, #4]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd f9c5 	bl	8000d44 <__aeabi_fmul>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461d      	mov	r5, r3
 80039be:	4b86      	ldr	r3, [pc, #536]	; (8003bd8 <AngleCal+0x2a8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4a85      	ldr	r2, [pc, #532]	; (8003bd8 <AngleCal+0x2a8>)
 80039c4:	6892      	ldr	r2, [r2, #8]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd f9bb 	bl	8000d44 <__aeabi_fmul>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4619      	mov	r1, r3
 80039d2:	4628      	mov	r0, r5
 80039d4:	f7fd f8ae 	bl	8000b34 <__addsf3>
 80039d8:	4603      	mov	r3, r0
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fd24 	bl	8000428 <__aeabi_f2d>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	f008 fc02 	bl	800c1f0 <sqrt>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7fd f848 	bl	8000a88 <__aeabi_d2f>
 80039f8:	4603      	mov	r3, r0
 80039fa:	4619      	mov	r1, r3
 80039fc:	4620      	mov	r0, r4
 80039fe:	f008 fc23 	bl	800c248 <atan2f>
 8003a02:	4603      	mov	r3, r0
 8003a04:	4977      	ldr	r1, [pc, #476]	; (8003be4 <AngleCal+0x2b4>)
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f99c 	bl	8000d44 <__aeabi_fmul>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd0a 	bl	8000428 <__aeabi_f2d>
 8003a14:	a36a      	add	r3, pc, #424	; (adr r3, 8003bc0 <AngleCal+0x290>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fe87 	bl	800072c <__aeabi_ddiv>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	f7fd f82f 	bl	8000a88 <__aeabi_d2f>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a6e      	ldr	r2, [pc, #440]	; (8003be8 <AngleCal+0x2b8>)
 8003a2e:	6013      	str	r3, [r2, #0]
    mpuAcAxis.roll = 180* atan2f(mpuAcScaled.y, sqrt(mpuAcScaled.x*mpuAcScaled.x + mpuAcScaled.z*mpuAcScaled.z))/M_PI;
 8003a30:	4b69      	ldr	r3, [pc, #420]	; (8003bd8 <AngleCal+0x2a8>)
 8003a32:	685c      	ldr	r4, [r3, #4]
 8003a34:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <AngleCal+0x2a8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a67      	ldr	r2, [pc, #412]	; (8003bd8 <AngleCal+0x2a8>)
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd f980 	bl	8000d44 <__aeabi_fmul>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461d      	mov	r5, r3
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <AngleCal+0x2a8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a62      	ldr	r2, [pc, #392]	; (8003bd8 <AngleCal+0x2a8>)
 8003a4e:	6892      	ldr	r2, [r2, #8]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fd f976 	bl	8000d44 <__aeabi_fmul>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f7fd f869 	bl	8000b34 <__addsf3>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fc fcdf 	bl	8000428 <__aeabi_f2d>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f008 fbbd 	bl	800c1f0 <sqrt>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f7fd f803 	bl	8000a88 <__aeabi_d2f>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4619      	mov	r1, r3
 8003a86:	4620      	mov	r0, r4
 8003a88:	f008 fbde 	bl	800c248 <atan2f>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4957      	ldr	r1, [pc, #348]	; (8003bec <AngleCal+0x2bc>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd f957 	bl	8000d44 <__aeabi_fmul>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fcc5 	bl	8000428 <__aeabi_f2d>
 8003a9e:	a348      	add	r3, pc, #288	; (adr r3, 8003bc0 <AngleCal+0x290>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fe42 	bl	800072c <__aeabi_ddiv>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f7fc ffea 	bl	8000a88 <__aeabi_d2f>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4a4c      	ldr	r2, [pc, #304]	; (8003be8 <AngleCal+0x2b8>)
 8003ab8:	6053      	str	r3, [r2, #4]

    mpuAcAxis.pitch -= mpuAcOffset.pitch;
 8003aba:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <AngleCal+0x2b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4c      	ldr	r2, [pc, #304]	; (8003bf0 <AngleCal+0x2c0>)
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd f833 	bl	8000b30 <__aeabi_fsub>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <AngleCal+0x2b8>)
 8003ad0:	601a      	str	r2, [r3, #0]
    mpuAcAxis.roll -= mpuAcOffset.roll;
 8003ad2:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <AngleCal+0x2b8>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a46      	ldr	r2, [pc, #280]	; (8003bf0 <AngleCal+0x2c0>)
 8003ad8:	6852      	ldr	r2, [r2, #4]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd f827 	bl	8000b30 <__aeabi_fsub>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <AngleCal+0x2b8>)
 8003ae8:	605a      	str	r2, [r3, #4]

    mpuGyAxis.roll += mpuGyScaled.x*dt;
 8003aea:	4b42      	ldr	r3, [pc, #264]	; (8003bf4 <AngleCal+0x2c4>)
 8003aec:	685c      	ldr	r4, [r3, #4]
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <AngleCal+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4941      	ldr	r1, [pc, #260]	; (8003bf8 <AngleCal+0x2c8>)
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f925 	bl	8000d44 <__aeabi_fmul>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	4620      	mov	r0, r4
 8003b00:	f7fd f818 	bl	8000b34 <__addsf3>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <AngleCal+0x2c4>)
 8003b0a:	605a      	str	r2, [r3, #4]
    mpuGyAxis.pitch += mpuGyScaled.y*dt;
 8003b0c:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <AngleCal+0x2c4>)
 8003b0e:	681c      	ldr	r4, [r3, #0]
 8003b10:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <AngleCal+0x2ac>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4938      	ldr	r1, [pc, #224]	; (8003bf8 <AngleCal+0x2c8>)
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd f914 	bl	8000d44 <__aeabi_fmul>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7fd f807 	bl	8000b34 <__addsf3>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b32      	ldr	r3, [pc, #200]	; (8003bf4 <AngleCal+0x2c4>)
 8003b2c:	601a      	str	r2, [r3, #0]
    mpuGyAxis.yaw += mpuGyScaled.z*dt;
 8003b2e:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <AngleCal+0x2c4>)
 8003b30:	689c      	ldr	r4, [r3, #8]
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <AngleCal+0x2ac>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	4930      	ldr	r1, [pc, #192]	; (8003bf8 <AngleCal+0x2c8>)
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fd f903 	bl	8000d44 <__aeabi_fmul>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4619      	mov	r1, r3
 8003b42:	4620      	mov	r0, r4
 8003b44:	f7fc fff6 	bl	8000b34 <__addsf3>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <AngleCal+0x2c4>)
 8003b4e:	609a      	str	r2, [r3, #8]

    mpuGyAxis.pitch = mpuGyAxis.pitch*0.9996 + 0.0004*mpuAcAxis.pitch;
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <AngleCal+0x2c4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fc67 	bl	8000428 <__aeabi_f2d>
 8003b5a:	a31b      	add	r3, pc, #108	; (adr r3, 8003bc8 <AngleCal+0x298>)
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f7fc fcba 	bl	80004d8 <__aeabi_dmul>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4614      	mov	r4, r2
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	4b1e      	ldr	r3, [pc, #120]	; (8003be8 <AngleCal+0x2b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fc fc59 	bl	8000428 <__aeabi_f2d>
 8003b76:	a316      	add	r3, pc, #88	; (adr r3, 8003bd0 <AngleCal+0x2a0>)
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f7fc fcac 	bl	80004d8 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc faf0 	bl	800016c <__adddf3>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7fc ff78 	bl	8000a88 <__aeabi_d2f>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4a16      	ldr	r2, [pc, #88]	; (8003bf4 <AngleCal+0x2c4>)
 8003b9c:	6013      	str	r3, [r2, #0]
    mpuGyAxis.roll = mpuGyAxis.roll*0.9996 + 0.0004*mpuAcAxis.roll;
 8003b9e:	4b15      	ldr	r3, [pc, #84]	; (8003bf4 <AngleCal+0x2c4>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fc fc40 	bl	8000428 <__aeabi_f2d>
 8003ba8:	a307      	add	r3, pc, #28	; (adr r3, 8003bc8 <AngleCal+0x298>)
 8003baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bae:	f7fc fc93 	bl	80004d8 <__aeabi_dmul>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	461d      	mov	r5, r3
 8003bba:	e01f      	b.n	8003bfc <AngleCal+0x2cc>
 8003bbc:	f3af 8000 	nop.w
 8003bc0:	54442d18 	.word	0x54442d18
 8003bc4:	400921fb 	.word	0x400921fb
 8003bc8:	23a29c78 	.word	0x23a29c78
 8003bcc:	3feffcb9 	.word	0x3feffcb9
 8003bd0:	eb1c432d 	.word	0xeb1c432d
 8003bd4:	3f3a36e2 	.word	0x3f3a36e2
 8003bd8:	20000474 	.word	0x20000474
 8003bdc:	2000054c 	.word	0x2000054c
 8003be0:	200005e0 	.word	0x200005e0
 8003be4:	c3340000 	.word	0xc3340000
 8003be8:	200005d4 	.word	0x200005d4
 8003bec:	43340000 	.word	0x43340000
 8003bf0:	200005c8 	.word	0x200005c8
 8003bf4:	200003b4 	.word	0x200003b4
 8003bf8:	3b83126f 	.word	0x3b83126f
 8003bfc:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <AngleCal+0x310>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fc11 	bl	8000428 <__aeabi_f2d>
 8003c06:	a30c      	add	r3, pc, #48	; (adr r3, 8003c38 <AngleCal+0x308>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fc64 	bl	80004d8 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4620      	mov	r0, r4
 8003c16:	4629      	mov	r1, r5
 8003c18:	f7fc faa8 	bl	800016c <__adddf3>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4610      	mov	r0, r2
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fc ff30 	bl	8000a88 <__aeabi_d2f>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <AngleCal+0x314>)
 8003c2c:	6053      	str	r3, [r2, #4]
	}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bdb0      	pop	{r4, r5, r7, pc}
 8003c36:	bf00      	nop
 8003c38:	eb1c432d 	.word	0xeb1c432d
 8003c3c:	3f3a36e2 	.word	0x3f3a36e2
 8003c40:	200005d4 	.word	0x200005d4
 8003c44:	200003b4 	.word	0x200003b4

08003c48 <RollPIDCal>:
void RollPIDCal (void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	errorRc = flUSerRoll - mpuGyAxis.roll;
 8003c4c:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <RollPIDCal+0x118>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a44      	ldr	r2, [pc, #272]	; (8003d64 <RollPIDCal+0x11c>)
 8003c52:	6852      	ldr	r2, [r2, #4]
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc ff6a 	bl	8000b30 <__aeabi_fsub>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	461a      	mov	r2, r3
 8003c60:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <RollPIDCal+0x120>)
 8003c62:	601a      	str	r2, [r3, #0]
	RollP = KpR*errorRc;
 8003c64:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <RollPIDCal+0x124>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <RollPIDCal+0x120>)
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fd f868 	bl	8000d44 <__aeabi_fmul>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <RollPIDCal+0x128>)
 8003c7a:	601a      	str	r2, [r3, #0]
	RollI += KiR*(errorRc + errorRp)/2*dt;
 8003c7c:	4b3a      	ldr	r3, [pc, #232]	; (8003d68 <RollPIDCal+0x120>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3c      	ldr	r2, [pc, #240]	; (8003d74 <RollPIDCal+0x12c>)
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc ff54 	bl	8000b34 <__addsf3>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <RollPIDCal+0x130>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	4610      	mov	r0, r2
 8003c98:	f7fd f854 	bl	8000d44 <__aeabi_fmul>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd f902 	bl	8000eac <__aeabi_fdiv>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4934      	ldr	r1, [pc, #208]	; (8003d7c <RollPIDCal+0x134>)
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd f849 	bl	8000d44 <__aeabi_fmul>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b32      	ldr	r3, [pc, #200]	; (8003d80 <RollPIDCal+0x138>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fc ff39 	bl	8000b34 <__addsf3>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b2e      	ldr	r3, [pc, #184]	; (8003d80 <RollPIDCal+0x138>)
 8003cc8:	601a      	str	r2, [r3, #0]
	RollD = KdR*(errorRc - errorRp)/dt;
 8003cca:	4b27      	ldr	r3, [pc, #156]	; (8003d68 <RollPIDCal+0x120>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a29      	ldr	r2, [pc, #164]	; (8003d74 <RollPIDCal+0x12c>)
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fc ff2b 	bl	8000b30 <__aeabi_fsub>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <RollPIDCal+0x13c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fd f82d 	bl	8000d44 <__aeabi_fmul>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4923      	ldr	r1, [pc, #140]	; (8003d7c <RollPIDCal+0x134>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd f8dc 	bl	8000eac <__aeabi_fdiv>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <RollPIDCal+0x140>)
 8003cfa:	601a      	str	r2, [r3, #0]
	RollPID = RollP + RollI + RollD;
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <RollPIDCal+0x128>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <RollPIDCal+0x138>)
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc ff14 	bl	8000b34 <__addsf3>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b1d      	ldr	r3, [pc, #116]	; (8003d88 <RollPIDCal+0x140>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7fc ff0c 	bl	8000b34 <__addsf3>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <RollPIDCal+0x144>)
 8003d22:	601a      	str	r2, [r3, #0]
	if (RollPID > 400)
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <RollPIDCal+0x144>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4919      	ldr	r1, [pc, #100]	; (8003d90 <RollPIDCal+0x148>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd f9c6 	bl	80010bc <__aeabi_fcmpgt>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <RollPIDCal+0xf4>
		RollPID = 400;
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <RollPIDCal+0x144>)
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <RollPIDCal+0x148>)
 8003d3a:	601a      	str	r2, [r3, #0]
	if(RollPID < -400)
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <RollPIDCal+0x144>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4914      	ldr	r1, [pc, #80]	; (8003d94 <RollPIDCal+0x14c>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd f99c 	bl	8001080 <__aeabi_fcmplt>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <RollPIDCal+0x10c>
		RollPID = -400;
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <RollPIDCal+0x144>)
 8003d50:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <RollPIDCal+0x14c>)
 8003d52:	601a      	str	r2, [r3, #0]
	errorRp = errorRc;
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <RollPIDCal+0x120>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a06      	ldr	r2, [pc, #24]	; (8003d74 <RollPIDCal+0x12c>)
 8003d5a:	6013      	str	r3, [r2, #0]
	}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000350 	.word	0x20000350
 8003d64:	200003b4 	.word	0x200003b4
 8003d68:	200004f8 	.word	0x200004f8
 8003d6c:	20000018 	.word	0x20000018
 8003d70:	200003c4 	.word	0x200003c4
 8003d74:	2000066c 	.word	0x2000066c
 8003d78:	2000001c 	.word	0x2000001c
 8003d7c:	3b83126f 	.word	0x3b83126f
 8003d80:	20000544 	.word	0x20000544
 8003d84:	20000020 	.word	0x20000020
 8003d88:	200005c4 	.word	0x200005c4
 8003d8c:	20000470 	.word	0x20000470
 8003d90:	43c80000 	.word	0x43c80000
 8003d94:	c3c80000 	.word	0xc3c80000

08003d98 <PitchPIDCal>:
void PitchPIDCal (void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
	errorPc = flUserPitch - mpuGyAxis.pitch;
 8003d9c:	4b44      	ldr	r3, [pc, #272]	; (8003eb0 <PitchPIDCal+0x118>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a44      	ldr	r2, [pc, #272]	; (8003eb4 <PitchPIDCal+0x11c>)
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fec2 	bl	8000b30 <__aeabi_fsub>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <PitchPIDCal+0x120>)
 8003db2:	601a      	str	r2, [r3, #0]
	PitchP = KpP*errorPc;
 8003db4:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <PitchPIDCal+0x124>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a3f      	ldr	r2, [pc, #252]	; (8003eb8 <PitchPIDCal+0x120>)
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc ffc0 	bl	8000d44 <__aeabi_fmul>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <PitchPIDCal+0x128>)
 8003dca:	601a      	str	r2, [r3, #0]
	PitchI += KiP*(errorPc + errorPp)/2*dt;
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	; (8003eb8 <PitchPIDCal+0x120>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a3c      	ldr	r2, [pc, #240]	; (8003ec4 <PitchPIDCal+0x12c>)
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc feac 	bl	8000b34 <__addsf3>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <PitchPIDCal+0x130>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f7fc ffac 	bl	8000d44 <__aeabi_fmul>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd f85a 	bl	8000eac <__aeabi_fdiv>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4934      	ldr	r1, [pc, #208]	; (8003ecc <PitchPIDCal+0x134>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc ffa1 	bl	8000d44 <__aeabi_fmul>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b32      	ldr	r3, [pc, #200]	; (8003ed0 <PitchPIDCal+0x138>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	f7fc fe91 	bl	8000b34 <__addsf3>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <PitchPIDCal+0x138>)
 8003e18:	601a      	str	r2, [r3, #0]
	PitchD = KiP*(errorPc - errorPp)/dt;
 8003e1a:	4b27      	ldr	r3, [pc, #156]	; (8003eb8 <PitchPIDCal+0x120>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a29      	ldr	r2, [pc, #164]	; (8003ec4 <PitchPIDCal+0x12c>)
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fe83 	bl	8000b30 <__aeabi_fsub>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <PitchPIDCal+0x130>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fc ff85 	bl	8000d44 <__aeabi_fmul>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4923      	ldr	r1, [pc, #140]	; (8003ecc <PitchPIDCal+0x134>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fd f834 	bl	8000eac <__aeabi_fdiv>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <PitchPIDCal+0x13c>)
 8003e4a:	601a      	str	r2, [r3, #0]
	PitchPID = PitchP + PitchI + PitchD;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <PitchPIDCal+0x128>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <PitchPIDCal+0x138>)
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc fe6c 	bl	8000b34 <__addsf3>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b1c      	ldr	r3, [pc, #112]	; (8003ed4 <PitchPIDCal+0x13c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f7fc fe64 	bl	8000b34 <__addsf3>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <PitchPIDCal+0x140>)
 8003e72:	601a      	str	r2, [r3, #0]
	if (PitchPID > 400)
 8003e74:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <PitchPIDCal+0x140>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4918      	ldr	r1, [pc, #96]	; (8003edc <PitchPIDCal+0x144>)
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fd f91e 	bl	80010bc <__aeabi_fcmpgt>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <PitchPIDCal+0xf4>
		PitchPID = 400;
 8003e86:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <PitchPIDCal+0x140>)
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <PitchPIDCal+0x144>)
 8003e8a:	601a      	str	r2, [r3, #0]
	if(PitchPID < -400)
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <PitchPIDCal+0x140>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4913      	ldr	r1, [pc, #76]	; (8003ee0 <PitchPIDCal+0x148>)
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd f8f4 	bl	8001080 <__aeabi_fcmplt>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <PitchPIDCal+0x10c>
		PitchPID = -400;
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <PitchPIDCal+0x140>)
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <PitchPIDCal+0x148>)
 8003ea2:	601a      	str	r2, [r3, #0]
	errorPp = errorPc;
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <PitchPIDCal+0x120>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a06      	ldr	r2, [pc, #24]	; (8003ec4 <PitchPIDCal+0x12c>)
 8003eaa:	6013      	str	r3, [r2, #0]
	}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000424 	.word	0x20000424
 8003eb4:	200003b4 	.word	0x200003b4
 8003eb8:	200005ec 	.word	0x200005ec
 8003ebc:	20000024 	.word	0x20000024
 8003ec0:	20000420 	.word	0x20000420
 8003ec4:	20000668 	.word	0x20000668
 8003ec8:	20000028 	.word	0x20000028
 8003ecc:	3b83126f 	.word	0x3b83126f
 8003ed0:	20000358 	.word	0x20000358
 8003ed4:	2000069c 	.word	0x2000069c
 8003ed8:	2000065c 	.word	0x2000065c
 8003edc:	43c80000 	.word	0x43c80000
 8003ee0:	c3c80000 	.word	0xc3c80000

08003ee4 <YawPIDCal>:
void YawPIDCal (void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
	errorYc = flUserYaw - mpuGyAxis.yaw;
 8003ee8:	4b44      	ldr	r3, [pc, #272]	; (8003ffc <YawPIDCal+0x118>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a44      	ldr	r2, [pc, #272]	; (8004000 <YawPIDCal+0x11c>)
 8003eee:	6892      	ldr	r2, [r2, #8]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc fe1c 	bl	8000b30 <__aeabi_fsub>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <YawPIDCal+0x120>)
 8003efe:	601a      	str	r2, [r3, #0]
	YawP = KpY*errorYc;
 8003f00:	4b41      	ldr	r3, [pc, #260]	; (8004008 <YawPIDCal+0x124>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3f      	ldr	r2, [pc, #252]	; (8004004 <YawPIDCal+0x120>)
 8003f06:	6812      	ldr	r2, [r2, #0]
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc ff1a 	bl	8000d44 <__aeabi_fmul>
 8003f10:	4603      	mov	r3, r0
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b3d      	ldr	r3, [pc, #244]	; (800400c <YawPIDCal+0x128>)
 8003f16:	601a      	str	r2, [r3, #0]
	YawI += KiY*(errorYc + errorYp)/2*dt;
 8003f18:	4b3a      	ldr	r3, [pc, #232]	; (8004004 <YawPIDCal+0x120>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a3c      	ldr	r2, [pc, #240]	; (8004010 <YawPIDCal+0x12c>)
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fc fe06 	bl	8000b34 <__addsf3>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b39      	ldr	r3, [pc, #228]	; (8004014 <YawPIDCal+0x130>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7fc ff06 	bl	8000d44 <__aeabi_fmul>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc ffb4 	bl	8000eac <__aeabi_fdiv>
 8003f44:	4603      	mov	r3, r0
 8003f46:	4934      	ldr	r1, [pc, #208]	; (8004018 <YawPIDCal+0x134>)
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc fefb 	bl	8000d44 <__aeabi_fmul>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b32      	ldr	r3, [pc, #200]	; (800401c <YawPIDCal+0x138>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fc fdeb 	bl	8000b34 <__addsf3>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b2e      	ldr	r3, [pc, #184]	; (800401c <YawPIDCal+0x138>)
 8003f64:	601a      	str	r2, [r3, #0]
	YawD = KdY*(errorYc - errorYp)/dt;
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <YawPIDCal+0x120>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a29      	ldr	r2, [pc, #164]	; (8004010 <YawPIDCal+0x12c>)
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc fddd 	bl	8000b30 <__aeabi_fsub>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b29      	ldr	r3, [pc, #164]	; (8004020 <YawPIDCal+0x13c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f7fc fedf 	bl	8000d44 <__aeabi_fmul>
 8003f86:	4603      	mov	r3, r0
 8003f88:	4923      	ldr	r1, [pc, #140]	; (8004018 <YawPIDCal+0x134>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc ff8e 	bl	8000eac <__aeabi_fdiv>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b23      	ldr	r3, [pc, #140]	; (8004024 <YawPIDCal+0x140>)
 8003f96:	601a      	str	r2, [r3, #0]
	YawPID = YawP + YawI + YawD;
 8003f98:	4b1c      	ldr	r3, [pc, #112]	; (800400c <YawPIDCal+0x128>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1f      	ldr	r2, [pc, #124]	; (800401c <YawPIDCal+0x138>)
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc fdc6 	bl	8000b34 <__addsf3>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b1d      	ldr	r3, [pc, #116]	; (8004024 <YawPIDCal+0x140>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f7fc fdbe 	bl	8000b34 <__addsf3>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <YawPIDCal+0x144>)
 8003fbe:	601a      	str	r2, [r3, #0]
	if (YawPID > 300)
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <YawPIDCal+0x144>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4919      	ldr	r1, [pc, #100]	; (800402c <YawPIDCal+0x148>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd f878 	bl	80010bc <__aeabi_fcmpgt>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <YawPIDCal+0xf4>
		YawPID = 300;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <YawPIDCal+0x144>)
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <YawPIDCal+0x148>)
 8003fd6:	601a      	str	r2, [r3, #0]
	if(YawPID <-300)
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <YawPIDCal+0x144>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4914      	ldr	r1, [pc, #80]	; (8004030 <YawPIDCal+0x14c>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd f84e 	bl	8001080 <__aeabi_fcmplt>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <YawPIDCal+0x10c>
		YawPID = -300;
 8003fea:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <YawPIDCal+0x144>)
 8003fec:	4a10      	ldr	r2, [pc, #64]	; (8004030 <YawPIDCal+0x14c>)
 8003fee:	601a      	str	r2, [r3, #0]
	errorYp = errorYc;
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <YawPIDCal+0x120>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a06      	ldr	r2, [pc, #24]	; (8004010 <YawPIDCal+0x12c>)
 8003ff6:	6013      	str	r3, [r2, #0]
	}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000354 	.word	0x20000354
 8004000:	200003b4 	.word	0x200003b4
 8004004:	20000548 	.word	0x20000548
 8004008:	20000030 	.word	0x20000030
 800400c:	200006a0 	.word	0x200006a0
 8004010:	200004f4 	.word	0x200004f4
 8004014:	20000034 	.word	0x20000034
 8004018:	3b83126f 	.word	0x3b83126f
 800401c:	200005c0 	.word	0x200005c0
 8004020:	200004f0 	.word	0x200004f0
 8004024:	20000698 	.word	0x20000698
 8004028:	2000034c 	.word	0x2000034c
 800402c:	43960000 	.word	0x43960000
 8004030:	c3960000 	.word	0xc3960000

08004034 <MotorThrust>:
void MotorThrust (void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
	flThrust1 = ui16UserThurst - RollPID + PitchPID + YawPID;
 8004038:	4b72      	ldr	r3, [pc, #456]	; (8004204 <MotorThrust+0x1d0>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fe2d 	bl	8000c9c <__aeabi_i2f>
 8004042:	4602      	mov	r2, r0
 8004044:	4b70      	ldr	r3, [pc, #448]	; (8004208 <MotorThrust+0x1d4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f7fc fd70 	bl	8000b30 <__aeabi_fsub>
 8004050:	4603      	mov	r3, r0
 8004052:	461a      	mov	r2, r3
 8004054:	4b6d      	ldr	r3, [pc, #436]	; (800420c <MotorThrust+0x1d8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f7fc fd6a 	bl	8000b34 <__addsf3>
 8004060:	4603      	mov	r3, r0
 8004062:	461a      	mov	r2, r3
 8004064:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <MotorThrust+0x1dc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f7fc fd62 	bl	8000b34 <__addsf3>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	4b67      	ldr	r3, [pc, #412]	; (8004214 <MotorThrust+0x1e0>)
 8004076:	601a      	str	r2, [r3, #0]
	flThrust2 = ui16UserThurst + RollPID + PitchPID - YawPID;
 8004078:	4b62      	ldr	r3, [pc, #392]	; (8004204 <MotorThrust+0x1d0>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc fe0d 	bl	8000c9c <__aeabi_i2f>
 8004082:	4602      	mov	r2, r0
 8004084:	4b60      	ldr	r3, [pc, #384]	; (8004208 <MotorThrust+0x1d4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	4610      	mov	r0, r2
 800408c:	f7fc fd52 	bl	8000b34 <__addsf3>
 8004090:	4603      	mov	r3, r0
 8004092:	461a      	mov	r2, r3
 8004094:	4b5d      	ldr	r3, [pc, #372]	; (800420c <MotorThrust+0x1d8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7fc fd4a 	bl	8000b34 <__addsf3>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <MotorThrust+0x1dc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fc fd40 	bl	8000b30 <__aeabi_fsub>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b58      	ldr	r3, [pc, #352]	; (8004218 <MotorThrust+0x1e4>)
 80040b6:	601a      	str	r2, [r3, #0]
	flThrust3 = ui16UserThurst + RollPID - PitchPID + YawPID;
 80040b8:	4b52      	ldr	r3, [pc, #328]	; (8004204 <MotorThrust+0x1d0>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc fded 	bl	8000c9c <__aeabi_i2f>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <MotorThrust+0x1d4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7fc fd32 	bl	8000b34 <__addsf3>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b4d      	ldr	r3, [pc, #308]	; (800420c <MotorThrust+0x1d8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f7fc fd28 	bl	8000b30 <__aeabi_fsub>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <MotorThrust+0x1dc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f7fc fd22 	bl	8000b34 <__addsf3>
 80040f0:	4603      	mov	r3, r0
 80040f2:	461a      	mov	r2, r3
 80040f4:	4b49      	ldr	r3, [pc, #292]	; (800421c <MotorThrust+0x1e8>)
 80040f6:	601a      	str	r2, [r3, #0]
	flThrust4 = ui16UserThurst - RollPID - PitchPID - YawPID;
 80040f8:	4b42      	ldr	r3, [pc, #264]	; (8004204 <MotorThrust+0x1d0>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc fdcd 	bl	8000c9c <__aeabi_i2f>
 8004102:	4602      	mov	r2, r0
 8004104:	4b40      	ldr	r3, [pc, #256]	; (8004208 <MotorThrust+0x1d4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f7fc fd10 	bl	8000b30 <__aeabi_fsub>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	4b3d      	ldr	r3, [pc, #244]	; (800420c <MotorThrust+0x1d8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f7fc fd08 	bl	8000b30 <__aeabi_fsub>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	4b3a      	ldr	r3, [pc, #232]	; (8004210 <MotorThrust+0x1dc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f7fc fd00 	bl	8000b30 <__aeabi_fsub>
 8004130:	4603      	mov	r3, r0
 8004132:	461a      	mov	r2, r3
 8004134:	4b3a      	ldr	r3, [pc, #232]	; (8004220 <MotorThrust+0x1ec>)
 8004136:	601a      	str	r2, [r3, #0]
	if(ctlState == CONTROL_STOP)
 8004138:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <MotorThrust+0x1f0>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d112      	bne.n	8004166 <MotorThrust+0x132>
	{
		flThrust1 = 1000;
 8004140:	4b34      	ldr	r3, [pc, #208]	; (8004214 <MotorThrust+0x1e0>)
 8004142:	4a39      	ldr	r2, [pc, #228]	; (8004228 <MotorThrust+0x1f4>)
 8004144:	601a      	str	r2, [r3, #0]
		flThrust2 = 1000;
 8004146:	4b34      	ldr	r3, [pc, #208]	; (8004218 <MotorThrust+0x1e4>)
 8004148:	4a37      	ldr	r2, [pc, #220]	; (8004228 <MotorThrust+0x1f4>)
 800414a:	601a      	str	r2, [r3, #0]
		flThrust3 = 1000;
 800414c:	4b33      	ldr	r3, [pc, #204]	; (800421c <MotorThrust+0x1e8>)
 800414e:	4a36      	ldr	r2, [pc, #216]	; (8004228 <MotorThrust+0x1f4>)
 8004150:	601a      	str	r2, [r3, #0]
		flThrust4 = 1000;
 8004152:	4b33      	ldr	r3, [pc, #204]	; (8004220 <MotorThrust+0x1ec>)
 8004154:	4a34      	ldr	r2, [pc, #208]	; (8004228 <MotorThrust+0x1f4>)
 8004156:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8004158:	2201      	movs	r2, #1
 800415a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800415e:	4833      	ldr	r0, [pc, #204]	; (800422c <MotorThrust+0x1f8>)
 8004160:	f001 fdf9 	bl	8005d56 <HAL_GPIO_WritePin>
 8004164:	e005      	b.n	8004172 <MotorThrust+0x13e>
	}
	else
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8004166:	2200      	movs	r2, #0
 8004168:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800416c:	482f      	ldr	r0, [pc, #188]	; (800422c <MotorThrust+0x1f8>)
 800416e:	f001 fdf2 	bl	8005d56 <HAL_GPIO_WritePin>
	}
	if(ui16UserThurst < 1010)
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <MotorThrust+0x1d0>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800417a:	4293      	cmp	r3, r2
 800417c:	d80c      	bhi.n	8004198 <MotorThrust+0x164>
	{
		flThrust1 = 1000;
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <MotorThrust+0x1e0>)
 8004180:	4a29      	ldr	r2, [pc, #164]	; (8004228 <MotorThrust+0x1f4>)
 8004182:	601a      	str	r2, [r3, #0]
		flThrust2 = 1000;
 8004184:	4b24      	ldr	r3, [pc, #144]	; (8004218 <MotorThrust+0x1e4>)
 8004186:	4a28      	ldr	r2, [pc, #160]	; (8004228 <MotorThrust+0x1f4>)
 8004188:	601a      	str	r2, [r3, #0]
		flThrust3 = 1000;
 800418a:	4b24      	ldr	r3, [pc, #144]	; (800421c <MotorThrust+0x1e8>)
 800418c:	4a26      	ldr	r2, [pc, #152]	; (8004228 <MotorThrust+0x1f4>)
 800418e:	601a      	str	r2, [r3, #0]
		flThrust4 = 1000;
 8004190:	4b23      	ldr	r3, [pc, #140]	; (8004220 <MotorThrust+0x1ec>)
 8004192:	4a25      	ldr	r2, [pc, #148]	; (8004228 <MotorThrust+0x1f4>)
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e00b      	b.n	80041b0 <MotorThrust+0x17c>
	}
	else
	{
#ifndef  __ESC_PROGRAMMING
	CompareThrust(&flThrust1);
 8004198:	481e      	ldr	r0, [pc, #120]	; (8004214 <MotorThrust+0x1e0>)
 800419a:	f000 f84b 	bl	8004234 <CompareThrust>
	CompareThrust(&flThrust2);
 800419e:	481e      	ldr	r0, [pc, #120]	; (8004218 <MotorThrust+0x1e4>)
 80041a0:	f000 f848 	bl	8004234 <CompareThrust>
	CompareThrust(&flThrust3);
 80041a4:	481d      	ldr	r0, [pc, #116]	; (800421c <MotorThrust+0x1e8>)
 80041a6:	f000 f845 	bl	8004234 <CompareThrust>
	CompareThrust(&flThrust4);
 80041aa:	481d      	ldr	r0, [pc, #116]	; (8004220 <MotorThrust+0x1ec>)
 80041ac:	f000 f842 	bl	8004234 <CompareThrust>
		flThrust3 = 2000;
		flThrust4 = 2000;
	}
#endif
	}
	htim3.Instance->CCR1 = (uint16_t)flThrust1;
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <MotorThrust+0x1e0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fc ff8b 	bl	80010d0 <__aeabi_f2uiz>
 80041ba:	4603      	mov	r3, r0
 80041bc:	b29a      	uxth	r2, r3
 80041be:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <MotorThrust+0x1fc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = (uint16_t)flThrust2;
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <MotorThrust+0x1e4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc ff81 	bl	80010d0 <__aeabi_f2uiz>
 80041ce:	4603      	mov	r3, r0
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <MotorThrust+0x1fc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR3 = (uint16_t)flThrust3;
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <MotorThrust+0x1e8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc ff77 	bl	80010d0 <__aeabi_f2uiz>
 80041e2:	4603      	mov	r3, r0
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MotorThrust+0x1fc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = (uint16_t)flThrust4;
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <MotorThrust+0x1ec>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc ff6d 	bl	80010d0 <__aeabi_f2uiz>
 80041f6:	4603      	mov	r3, r0
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <MotorThrust+0x1fc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
//	htim3.Instance->CCR1 = ui16UserThurst;

	}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000010 	.word	0x20000010
 8004208:	20000470 	.word	0x20000470
 800420c:	2000065c 	.word	0x2000065c
 8004210:	2000034c 	.word	0x2000034c
 8004214:	200003c0 	.word	0x200003c0
 8004218:	20000540 	.word	0x20000540
 800421c:	20000658 	.word	0x20000658
 8004220:	200006a4 	.word	0x200006a4
 8004224:	200002e4 	.word	0x200002e4
 8004228:	447a0000 	.word	0x447a0000
 800422c:	40010c00 	.word	0x40010c00
 8004230:	20000428 	.word	0x20000428

08004234 <CompareThrust>:
void CompareThrust (float* flValue)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	if (*flValue > 1700)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	490d      	ldr	r1, [pc, #52]	; (8004278 <CompareThrust+0x44>)
 8004242:	4618      	mov	r0, r3
 8004244:	f7fc ff3a 	bl	80010bc <__aeabi_fcmpgt>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <CompareThrust+0x20>
		*flValue  = 1700;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a09      	ldr	r2, [pc, #36]	; (8004278 <CompareThrust+0x44>)
 8004252:	601a      	str	r2, [r3, #0]
	if (*flValue  < 1100)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4908      	ldr	r1, [pc, #32]	; (800427c <CompareThrust+0x48>)
 800425a:	4618      	mov	r0, r3
 800425c:	f7fc ff10 	bl	8001080 <__aeabi_fcmplt>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d100      	bne.n	8004268 <CompareThrust+0x34>
		*flValue = 1100;
	}
 8004266:	e002      	b.n	800426e <CompareThrust+0x3a>
		*flValue = 1100;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <CompareThrust+0x48>)
 800426c:	601a      	str	r2, [r3, #0]
	}
 800426e:	bf00      	nop
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	44d48000 	.word	0x44d48000
 800427c:	44898000 	.word	0x44898000

08004280 <ConvertPID>:
void ConvertPID (float* flConstant, uint8_t* ui8Data)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
	*flConstant = (float)((*ui8Data) - 0x30)*10 + (float)(*(ui8Data + 1) - 0x30) + (float)(*(ui8Data + 3) - 0x30)/10 + (float)(*(ui8Data + 4) - 0x30)/100 + (float)(*(ui8Data + 5) - 0x30)/1000;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	3b30      	subs	r3, #48	; 0x30
 8004290:	4618      	mov	r0, r3
 8004292:	f7fc fd03 	bl	8000c9c <__aeabi_i2f>
 8004296:	4603      	mov	r3, r0
 8004298:	4929      	ldr	r1, [pc, #164]	; (8004340 <ConvertPID+0xc0>)
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc fd52 	bl	8000d44 <__aeabi_fmul>
 80042a0:	4603      	mov	r3, r0
 80042a2:	461c      	mov	r4, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3b30      	subs	r3, #48	; 0x30
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fc fcf5 	bl	8000c9c <__aeabi_i2f>
 80042b2:	4603      	mov	r3, r0
 80042b4:	4619      	mov	r1, r3
 80042b6:	4620      	mov	r0, r4
 80042b8:	f7fc fc3c 	bl	8000b34 <__addsf3>
 80042bc:	4603      	mov	r3, r0
 80042be:	461c      	mov	r4, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	3303      	adds	r3, #3
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	3b30      	subs	r3, #48	; 0x30
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fc fce7 	bl	8000c9c <__aeabi_i2f>
 80042ce:	4603      	mov	r3, r0
 80042d0:	491b      	ldr	r1, [pc, #108]	; (8004340 <ConvertPID+0xc0>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc fdea 	bl	8000eac <__aeabi_fdiv>
 80042d8:	4603      	mov	r3, r0
 80042da:	4619      	mov	r1, r3
 80042dc:	4620      	mov	r0, r4
 80042de:	f7fc fc29 	bl	8000b34 <__addsf3>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461c      	mov	r4, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	3304      	adds	r3, #4
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	3b30      	subs	r3, #48	; 0x30
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fc fcd4 	bl	8000c9c <__aeabi_i2f>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4913      	ldr	r1, [pc, #76]	; (8004344 <ConvertPID+0xc4>)
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fc fdd7 	bl	8000eac <__aeabi_fdiv>
 80042fe:	4603      	mov	r3, r0
 8004300:	4619      	mov	r1, r3
 8004302:	4620      	mov	r0, r4
 8004304:	f7fc fc16 	bl	8000b34 <__addsf3>
 8004308:	4603      	mov	r3, r0
 800430a:	461c      	mov	r4, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	3305      	adds	r3, #5
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	3b30      	subs	r3, #48	; 0x30
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc fcc1 	bl	8000c9c <__aeabi_i2f>
 800431a:	4603      	mov	r3, r0
 800431c:	490a      	ldr	r1, [pc, #40]	; (8004348 <ConvertPID+0xc8>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc fdc4 	bl	8000eac <__aeabi_fdiv>
 8004324:	4603      	mov	r3, r0
 8004326:	4619      	mov	r1, r3
 8004328:	4620      	mov	r0, r4
 800432a:	f7fc fc03 	bl	8000b34 <__addsf3>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	601a      	str	r2, [r3, #0]
	}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bd90      	pop	{r4, r7, pc}
 800433e:	bf00      	nop
 8004340:	41200000 	.word	0x41200000
 8004344:	42c80000 	.word	0x42c80000
 8004348:	447a0000 	.word	0x447a0000

0800434c <SetPID>:
void SetPID (float* flP, float* flI, float* flD)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
	if(ui8RBuffer[4] == 'P')
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <SetPID+0x44>)
 800435a:	791b      	ldrb	r3, [r3, #4]
 800435c:	2b50      	cmp	r3, #80	; 0x50
 800435e:	d103      	bne.n	8004368 <SetPID+0x1c>
	{
		ConvertPID(flP, &ui8RBuffer[5]);
 8004360:	490c      	ldr	r1, [pc, #48]	; (8004394 <SetPID+0x48>)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff ff8c 	bl	8004280 <ConvertPID>
	}
	if(ui8RBuffer[11] == 'I')
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <SetPID+0x44>)
 800436a:	7adb      	ldrb	r3, [r3, #11]
 800436c:	2b49      	cmp	r3, #73	; 0x49
 800436e:	d103      	bne.n	8004378 <SetPID+0x2c>
	{
		ConvertPID(flI, &ui8RBuffer[12]);
 8004370:	4909      	ldr	r1, [pc, #36]	; (8004398 <SetPID+0x4c>)
 8004372:	68b8      	ldr	r0, [r7, #8]
 8004374:	f7ff ff84 	bl	8004280 <ConvertPID>
	}
	if(ui8RBuffer[18] == 'D')
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <SetPID+0x44>)
 800437a:	7c9b      	ldrb	r3, [r3, #18]
 800437c:	2b44      	cmp	r3, #68	; 0x44
 800437e:	d103      	bne.n	8004388 <SetPID+0x3c>
	{
		ConvertPID(flD, &ui8RBuffer[19]);
 8004380:	4906      	ldr	r1, [pc, #24]	; (800439c <SetPID+0x50>)
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff7c 	bl	8004280 <ConvertPID>
	}
	}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000638 	.word	0x20000638
 8004394:	2000063d 	.word	0x2000063d
 8004398:	20000644 	.word	0x20000644
 800439c:	2000064b 	.word	0x2000064b

080043a0 <Baterry_Calculate>:
void Baterry_Calculate (uint16_t *ui16AdcVal, float * Vbat)
{
 80043a0:	b5b0      	push	{r4, r5, r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	float Vbatbuf;
	Vbatbuf = (float)(*ui16AdcVal + 70)*3.268/4095*11 + 0.7;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	3346      	adds	r3, #70	; 0x46
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fc fc73 	bl	8000c9c <__aeabi_i2f>
 80043b6:	4603      	mov	r3, r0
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fc f835 	bl	8000428 <__aeabi_f2d>
 80043be:	a328      	add	r3, pc, #160	; (adr r3, 8004460 <Baterry_Calculate+0xc0>)
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f7fc f888 	bl	80004d8 <__aeabi_dmul>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	a325      	add	r3, pc, #148	; (adr r3, 8004468 <Baterry_Calculate+0xc8>)
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f7fc f9a9 	bl	800072c <__aeabi_ddiv>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	4b26      	ldr	r3, [pc, #152]	; (8004480 <Baterry_Calculate+0xe0>)
 80043e8:	f7fc f876 	bl	80004d8 <__aeabi_dmul>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	a31e      	add	r3, pc, #120	; (adr r3, 8004470 <Baterry_Calculate+0xd0>)
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f7fb feb7 	bl	800016c <__adddf3>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	f7fc fb3f 	bl	8000a88 <__aeabi_d2f>
 800440a:	4603      	mov	r3, r0
 800440c:	60fb      	str	r3, [r7, #12]
	*Vbat = *Vbat*0.7 + Vbatbuf*0.3;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fc f808 	bl	8000428 <__aeabi_f2d>
 8004418:	a315      	add	r3, pc, #84	; (adr r3, 8004470 <Baterry_Calculate+0xd0>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc f85b 	bl	80004d8 <__aeabi_dmul>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4614      	mov	r4, r2
 8004428:	461d      	mov	r5, r3
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7fb fffc 	bl	8000428 <__aeabi_f2d>
 8004430:	a311      	add	r3, pc, #68	; (adr r3, 8004478 <Baterry_Calculate+0xd8>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fc f84f 	bl	80004d8 <__aeabi_dmul>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4620      	mov	r0, r4
 8004440:	4629      	mov	r1, r5
 8004442:	f7fb fe93 	bl	800016c <__adddf3>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f7fc fb1b 	bl	8000a88 <__aeabi_d2f>
 8004452:	4602      	mov	r2, r0
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	601a      	str	r2, [r3, #0]
	}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bdb0      	pop	{r4, r5, r7, pc}
 8004460:	2f1a9fbe 	.word	0x2f1a9fbe
 8004464:	400a24dd 	.word	0x400a24dd
 8004468:	00000000 	.word	0x00000000
 800446c:	40affe00 	.word	0x40affe00
 8004470:	66666666 	.word	0x66666666
 8004474:	3fe66666 	.word	0x3fe66666
 8004478:	33333333 	.word	0x33333333
 800447c:	3fd33333 	.word	0x3fd33333
 8004480:	40260000 	.word	0x40260000

08004484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004488:	b672      	cpsid	i
}
 800448a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800448c:	e7fe      	b.n	800448c <Error_Handler+0x8>
	...

08004490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_MspInit+0x5c>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	4a14      	ldr	r2, [pc, #80]	; (80044ec <HAL_MspInit+0x5c>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6193      	str	r3, [r2, #24]
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_MspInit+0x5c>)
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <HAL_MspInit+0x5c>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <HAL_MspInit+0x5c>)
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b8:	61d3      	str	r3, [r2, #28]
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_MspInit+0x5c>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80044c6:	4b0a      	ldr	r3, [pc, #40]	; (80044f0 <HAL_MspInit+0x60>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <HAL_MspInit+0x60>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044e2:	bf00      	nop
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40010000 	.word	0x40010000

080044f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 0310 	add.w	r3, r7, #16
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a28      	ldr	r2, [pc, #160]	; (80045b0 <HAL_ADC_MspInit+0xbc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d149      	bne.n	80045a8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004514:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <HAL_ADC_MspInit+0xc0>)
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <HAL_ADC_MspInit+0xc0>)
 800451a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800451e:	6193      	str	r3, [r2, #24]
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_ADC_MspInit+0xc0>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <HAL_ADC_MspInit+0xc0>)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	4a20      	ldr	r2, [pc, #128]	; (80045b4 <HAL_ADC_MspInit+0xc0>)
 8004532:	f043 0304 	orr.w	r3, r3, #4
 8004536:	6193      	str	r3, [r2, #24]
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_ADC_MspInit+0xc0>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = VBAT_Pin;
 8004544:	2310      	movs	r3, #16
 8004546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004548:	2303      	movs	r3, #3
 800454a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VBAT_GPIO_Port, &GPIO_InitStruct);
 800454c:	f107 0310 	add.w	r3, r7, #16
 8004550:	4619      	mov	r1, r3
 8004552:	4819      	ldr	r0, [pc, #100]	; (80045b8 <HAL_ADC_MspInit+0xc4>)
 8004554:	f001 fa64 	bl	8005a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 800455a:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_ADC_MspInit+0xcc>)
 800455c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800455e:	4b17      	ldr	r3, [pc, #92]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 8004566:	2200      	movs	r2, #0
 8004568:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004570:	4b12      	ldr	r3, [pc, #72]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 8004572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004576:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004578:	4b10      	ldr	r3, [pc, #64]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 800457a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800457e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004580:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 8004582:	2220      	movs	r2, #32
 8004584:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 8004588:	2200      	movs	r2, #0
 800458a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800458c:	480b      	ldr	r0, [pc, #44]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 800458e:	f001 f859 	bl	8005644 <HAL_DMA_Init>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004598:	f7ff ff74 	bl	8004484 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a07      	ldr	r2, [pc, #28]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 80045a0:	621a      	str	r2, [r3, #32]
 80045a2:	4a06      	ldr	r2, [pc, #24]	; (80045bc <HAL_ADC_MspInit+0xc8>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045a8:	bf00      	nop
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40012400 	.word	0x40012400
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40010800 	.word	0x40010800
 80045bc:	200004fc 	.word	0x200004fc
 80045c0:	40020008 	.word	0x40020008

080045c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_I2C_MspInit+0x90>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d132      	bne.n	800464a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e4:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <HAL_I2C_MspInit+0x94>)
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	4a1b      	ldr	r2, [pc, #108]	; (8004658 <HAL_I2C_MspInit+0x94>)
 80045ea:	f043 0308 	orr.w	r3, r3, #8
 80045ee:	6193      	str	r3, [r2, #24]
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_I2C_MspInit+0x94>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004602:	2312      	movs	r3, #18
 8004604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004606:	2303      	movs	r3, #3
 8004608:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800460a:	f107 0314 	add.w	r3, r7, #20
 800460e:	4619      	mov	r1, r3
 8004610:	4812      	ldr	r0, [pc, #72]	; (800465c <HAL_I2C_MspInit+0x98>)
 8004612:	f001 fa05 	bl	8005a20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_I2C_MspInit+0x9c>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
 800462c:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <HAL_I2C_MspInit+0x9c>)
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_I2C_MspInit+0x94>)
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <HAL_I2C_MspInit+0x94>)
 8004638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800463c:	61d3      	str	r3, [r2, #28]
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <HAL_I2C_MspInit+0x94>)
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800464a:	bf00      	nop
 800464c:	3728      	adds	r7, #40	; 0x28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40005400 	.word	0x40005400
 8004658:	40021000 	.word	0x40021000
 800465c:	40010c00 	.word	0x40010c00
 8004660:	40010000 	.word	0x40010000

08004664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_SPI_MspInit+0x8c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d131      	bne.n	80046e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_SPI_MspInit+0x90>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <HAL_SPI_MspInit+0x90>)
 800468a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800468e:	61d3      	str	r3, [r2, #28]
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <HAL_SPI_MspInit+0x90>)
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469c:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_SPI_MspInit+0x90>)
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <HAL_SPI_MspInit+0x90>)
 80046a2:	f043 0308 	orr.w	r3, r3, #8
 80046a6:	6193      	str	r3, [r2, #24]
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <HAL_SPI_MspInit+0x90>)
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80046b4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80046b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046be:	2303      	movs	r3, #3
 80046c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c2:	f107 0310 	add.w	r3, r7, #16
 80046c6:	4619      	mov	r1, r3
 80046c8:	480b      	ldr	r0, [pc, #44]	; (80046f8 <HAL_SPI_MspInit+0x94>)
 80046ca:	f001 f9a9 	bl	8005a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80046ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046dc:	f107 0310 	add.w	r3, r7, #16
 80046e0:	4619      	mov	r1, r3
 80046e2:	4805      	ldr	r0, [pc, #20]	; (80046f8 <HAL_SPI_MspInit+0x94>)
 80046e4:	f001 f99c 	bl	8005a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046e8:	bf00      	nop
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40003800 	.word	0x40003800
 80046f4:	40021000 	.word	0x40021000
 80046f8:	40010c00 	.word	0x40010c00

080046fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a2f      	ldr	r2, [pc, #188]	; (80047c8 <HAL_TIM_Base_MspInit+0xcc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d12c      	bne.n	8004768 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800470e:	4b2f      	ldr	r3, [pc, #188]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	4a2e      	ldr	r2, [pc, #184]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 8004714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004718:	6193      	str	r3, [r2, #24]
 800471a:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8004726:	2200      	movs	r2, #0
 8004728:	2100      	movs	r1, #0
 800472a:	2018      	movs	r0, #24
 800472c:	f000 ff53 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004730:	2018      	movs	r0, #24
 8004732:	f000 ff6c 	bl	800560e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004736:	2200      	movs	r2, #0
 8004738:	2100      	movs	r1, #0
 800473a:	2019      	movs	r0, #25
 800473c:	f000 ff4b 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004740:	2019      	movs	r0, #25
 8004742:	f000 ff64 	bl	800560e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8004746:	2200      	movs	r2, #0
 8004748:	2100      	movs	r1, #0
 800474a:	201a      	movs	r0, #26
 800474c:	f000 ff43 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004750:	201a      	movs	r0, #26
 8004752:	f000 ff5c 	bl	800560e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	201b      	movs	r0, #27
 800475c:	f000 ff3b 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004760:	201b      	movs	r0, #27
 8004762:	f000 ff54 	bl	800560e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004766:	e02a      	b.n	80047be <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d114      	bne.n	800479c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004772:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	4a15      	ldr	r2, [pc, #84]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	61d3      	str	r3, [r2, #28]
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800478a:	2200      	movs	r2, #0
 800478c:	2100      	movs	r1, #0
 800478e:	201c      	movs	r0, #28
 8004790:	f000 ff21 	bl	80055d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004794:	201c      	movs	r0, #28
 8004796:	f000 ff3a 	bl	800560e <HAL_NVIC_EnableIRQ>
}
 800479a:	e010      	b.n	80047be <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_TIM_Base_MspInit+0xd4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10b      	bne.n	80047be <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047a6:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	4a08      	ldr	r2, [pc, #32]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	61d3      	str	r3, [r2, #28]
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_TIM_Base_MspInit+0xd0>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	bf00      	nop
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40000400 	.word	0x40000400

080047d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047dc:	f107 0310 	add.w	r3, r7, #16
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	609a      	str	r2, [r3, #8]
 80047e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1b      	ldr	r2, [pc, #108]	; (800485c <HAL_TIM_MspPostInit+0x88>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d12f      	bne.n	8004854 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f4:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <HAL_TIM_MspPostInit+0x8c>)
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	4a19      	ldr	r2, [pc, #100]	; (8004860 <HAL_TIM_MspPostInit+0x8c>)
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	6193      	str	r3, [r2, #24]
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_TIM_MspPostInit+0x8c>)
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <HAL_TIM_MspPostInit+0x8c>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <HAL_TIM_MspPostInit+0x8c>)
 8004812:	f043 0308 	orr.w	r3, r3, #8
 8004816:	6193      	str	r3, [r2, #24]
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_TIM_MspPostInit+0x8c>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004824:	23c0      	movs	r3, #192	; 0xc0
 8004826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004828:	2302      	movs	r3, #2
 800482a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482c:	2302      	movs	r3, #2
 800482e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004830:	f107 0310 	add.w	r3, r7, #16
 8004834:	4619      	mov	r1, r3
 8004836:	480b      	ldr	r0, [pc, #44]	; (8004864 <HAL_TIM_MspPostInit+0x90>)
 8004838:	f001 f8f2 	bl	8005a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800483c:	2303      	movs	r3, #3
 800483e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004840:	2302      	movs	r3, #2
 8004842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004844:	2302      	movs	r3, #2
 8004846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	4619      	mov	r1, r3
 800484e:	4806      	ldr	r0, [pc, #24]	; (8004868 <HAL_TIM_MspPostInit+0x94>)
 8004850:	f001 f8e6 	bl	8005a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004854:	bf00      	nop
 8004856:	3720      	adds	r7, #32
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40000400 	.word	0x40000400
 8004860:	40021000 	.word	0x40021000
 8004864:	40010800 	.word	0x40010800
 8004868:	40010c00 	.word	0x40010c00

0800486c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004874:	f107 0310 	add.w	r3, r7, #16
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_UART_MspInit+0x8c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d131      	bne.n	80048f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_UART_MspInit+0x90>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	4a1a      	ldr	r2, [pc, #104]	; (80048fc <HAL_UART_MspInit+0x90>)
 8004892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004896:	6193      	str	r3, [r2, #24]
 8004898:	4b18      	ldr	r3, [pc, #96]	; (80048fc <HAL_UART_MspInit+0x90>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_UART_MspInit+0x90>)
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	4a14      	ldr	r2, [pc, #80]	; (80048fc <HAL_UART_MspInit+0x90>)
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	6193      	str	r3, [r2, #24]
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <HAL_UART_MspInit+0x90>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c2:	2302      	movs	r3, #2
 80048c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048c6:	2303      	movs	r3, #3
 80048c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ca:	f107 0310 	add.w	r3, r7, #16
 80048ce:	4619      	mov	r1, r3
 80048d0:	480b      	ldr	r0, [pc, #44]	; (8004900 <HAL_UART_MspInit+0x94>)
 80048d2:	f001 f8a5 	bl	8005a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e4:	f107 0310 	add.w	r3, r7, #16
 80048e8:	4619      	mov	r1, r3
 80048ea:	4805      	ldr	r0, [pc, #20]	; (8004900 <HAL_UART_MspInit+0x94>)
 80048ec:	f001 f898 	bl	8005a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048f0:	bf00      	nop
 80048f2:	3720      	adds	r7, #32
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40013800 	.word	0x40013800
 80048fc:	40021000 	.word	0x40021000
 8004900:	40010800 	.word	0x40010800

08004904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004908:	e7fe      	b.n	8004908 <NMI_Handler+0x4>

0800490a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800490e:	e7fe      	b.n	800490e <HardFault_Handler+0x4>

08004910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004914:	e7fe      	b.n	8004914 <MemManage_Handler+0x4>

08004916 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004916:	b480      	push	{r7}
 8004918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800491a:	e7fe      	b.n	800491a <BusFault_Handler+0x4>

0800491c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004920:	e7fe      	b.n	8004920 <UsageFault_Handler+0x4>

08004922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004922:	b480      	push	{r7}
 8004924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800493a:	b480      	push	{r7}
 800493c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800494a:	f000 f971 	bl	8004c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004958:	4802      	ldr	r0, [pc, #8]	; (8004964 <DMA1_Channel1_IRQHandler+0x10>)
 800495a:	f000 ff2d 	bl	80057b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800495e:	bf00      	nop
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	200004fc 	.word	0x200004fc

08004968 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800496c:	4802      	ldr	r0, [pc, #8]	; (8004978 <TIM1_BRK_IRQHandler+0x10>)
 800496e:	f003 fdfb 	bl	8008568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000558 	.word	0x20000558

0800497c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <TIM1_UP_IRQHandler+0x10>)
 8004982:	f003 fdf1 	bl	8008568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000558 	.word	0x20000558

08004990 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004994:	4802      	ldr	r0, [pc, #8]	; (80049a0 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004996:	f003 fde7 	bl	8008568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	20000558 	.word	0x20000558

080049a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049a8:	4802      	ldr	r0, [pc, #8]	; (80049b4 <TIM1_CC_IRQHandler+0x10>)
 80049aa:	f003 fddd 	bl	8008568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000558 	.word	0x20000558

080049b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <TIM2_IRQHandler+0x10>)
 80049be:	f003 fdd3 	bl	8008568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200005f0 	.word	0x200005f0

080049cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	return 1;
 80049d0:	2301      	movs	r3, #1
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <_kill>:

int _kill(int pid, int sig)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80049e4:	f004 fd3a 	bl	800945c <__errno>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2216      	movs	r2, #22
 80049ec:	601a      	str	r2, [r3, #0]
	return -1;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_exit>:

void _exit (int status)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a02:	f04f 31ff 	mov.w	r1, #4294967295
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffe7 	bl	80049da <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a0c:	e7fe      	b.n	8004a0c <_exit+0x12>

08004a0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b086      	sub	sp, #24
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e00a      	b.n	8004a36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a20:	f3af 8000 	nop.w
 8004a24:	4601      	mov	r1, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	60ba      	str	r2, [r7, #8]
 8004a2c:	b2ca      	uxtb	r2, r1
 8004a2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	3301      	adds	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	dbf0      	blt.n	8004a20 <_read+0x12>
	}

return len;
 8004a3e:	687b      	ldr	r3, [r7, #4]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e009      	b.n	8004a6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	60ba      	str	r2, [r7, #8]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	dbf1      	blt.n	8004a5a <_write+0x12>
	}
	return len;
 8004a76:	687b      	ldr	r3, [r7, #4]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_close>:

int _close(int file)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	return -1;
 8004a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aa6:	605a      	str	r2, [r3, #4]
	return 0;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <_isatty>:

int _isatty(int file)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	return 1;
 8004abc:	2301      	movs	r3, #1
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
	return 0;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <_sbrk+0x5c>)
 8004aea:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <_sbrk+0x60>)
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <_sbrk+0x64>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <_sbrk+0x64>)
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <_sbrk+0x68>)
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b02:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <_sbrk+0x64>)
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d207      	bcs.n	8004b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b10:	f004 fca4 	bl	800945c <__errno>
 8004b14:	4603      	mov	r3, r0
 8004b16:	220c      	movs	r2, #12
 8004b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1e:	e009      	b.n	8004b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <_sbrk+0x64>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <_sbrk+0x64>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <_sbrk+0x64>)
 8004b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20005000 	.word	0x20005000
 8004b40:	00000400 	.word	0x00000400
 8004b44:	200002ec 	.word	0x200002ec
 8004b48:	200006c0 	.word	0x200006c0

08004b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr

08004b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004b58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004b5a:	e003      	b.n	8004b64 <LoopCopyDataInit>

08004b5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004b5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004b60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004b62:	3104      	adds	r1, #4

08004b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004b64:	480a      	ldr	r0, [pc, #40]	; (8004b90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004b68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004b6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004b6c:	d3f6      	bcc.n	8004b5c <CopyDataInit>
  ldr r2, =_sbss
 8004b6e:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004b70:	e002      	b.n	8004b78 <LoopFillZerobss>

08004b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004b72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004b74:	f842 3b04 	str.w	r3, [r2], #4

08004b78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004b78:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004b7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004b7c:	d3f9      	bcc.n	8004b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b7e:	f7ff ffe5 	bl	8004b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b82:	f004 fc71 	bl	8009468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b86:	f7fd ff9d 	bl	8002ac4 <main>
  bx lr
 8004b8a:	4770      	bx	lr
  ldr r3, =_sidata
 8004b8c:	0800d0c4 	.word	0x0800d0c4
  ldr r0, =_sdata
 8004b90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004b94:	20000218 	.word	0x20000218
  ldr r2, =_sbss
 8004b98:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 8004b9c:	200006c0 	.word	0x200006c0

08004ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ba0:	e7fe      	b.n	8004ba0 <ADC1_2_IRQHandler>
	...

08004ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ba8:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_Init+0x28>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <HAL_Init+0x28>)
 8004bae:	f043 0310 	orr.w	r3, r3, #16
 8004bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bb4:	2003      	movs	r0, #3
 8004bb6:	f000 fd03 	bl	80055c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f000 f808 	bl	8004bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bc0:	f7ff fc66 	bl	8004490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40022000 	.word	0x40022000

08004bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_InitTick+0x54>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <HAL_InitTick+0x58>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	4619      	mov	r1, r3
 8004be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 fd1b 	bl	800562a <HAL_SYSTICK_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e00e      	b.n	8004c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b0f      	cmp	r3, #15
 8004c02:	d80a      	bhi.n	8004c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c04:	2200      	movs	r2, #0
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295
 8004c0c:	f000 fce3 	bl	80055d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c10:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <HAL_InitTick+0x5c>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000038 	.word	0x20000038
 8004c28:	20000040 	.word	0x20000040
 8004c2c:	2000003c 	.word	0x2000003c

08004c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_IncTick+0x1c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_IncTick+0x20>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4413      	add	r3, r2
 8004c40:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <HAL_IncTick+0x20>)
 8004c42:	6013      	str	r3, [r2, #0]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	20000040 	.word	0x20000040
 8004c50:	200006ac 	.word	0x200006ac

08004c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return uwTick;
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <HAL_GetTick+0x10>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	200006ac 	.word	0x200006ac

08004c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c70:	f7ff fff0 	bl	8004c54 <HAL_GetTick>
 8004c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d005      	beq.n	8004c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <HAL_Delay+0x44>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c8e:	bf00      	nop
 8004c90:	f7ff ffe0 	bl	8004c54 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d8f7      	bhi.n	8004c90 <HAL_Delay+0x28>
  {
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000040 	.word	0x20000040

08004cb0 <HAL_ADC_Init>:
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	75fb      	strb	r3, [r7, #23]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_ADC_Init+0x22>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0be      	b.n	8004e50 <HAL_ADC_Init+0x1a0>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_ADC_Init+0x44>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fc00 	bl	80044f4 <HAL_ADC_MspInit>
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 faf7 	bl	80052e8 <ADC_ConversionStop_Disable>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	75fb      	strb	r3, [r7, #23]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 8099 	bne.w	8004e3e <HAL_ADC_Init+0x18e>
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f040 8095 	bne.w	8004e3e <HAL_ADC_Init+0x18e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d1c:	f023 0302 	bic.w	r3, r3, #2
 8004d20:	f043 0202 	orr.w	r2, r3, #2
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7b1b      	ldrb	r3, [r3, #12]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d48:	d003      	beq.n	8004d52 <HAL_ADC_Init+0xa2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d102      	bne.n	8004d58 <HAL_ADC_Init+0xa8>
 8004d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d56:	e000      	b.n	8004d5a <HAL_ADC_Init+0xaa>
 8004d58:	2300      	movs	r3, #0
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7d1b      	ldrb	r3, [r3, #20]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d119      	bne.n	8004d9c <HAL_ADC_Init+0xec>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	7b1b      	ldrb	r3, [r3, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_ADC_Init+0xd4>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	035a      	lsls	r2, r3, #13
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	e00b      	b.n	8004d9c <HAL_ADC_Init+0xec>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	f043 0201 	orr.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	4b28      	ldr	r3, [pc, #160]	; (8004e58 <HAL_ADC_Init+0x1a8>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6093      	str	r3, [r2, #8]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dcc:	d003      	beq.n	8004dd6 <HAL_ADC_Init+0x126>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d104      	bne.n	8004de0 <HAL_ADC_Init+0x130>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	051b      	lsls	r3, r3, #20
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	4b18      	ldr	r3, [pc, #96]	; (8004e5c <HAL_ADC_Init+0x1ac>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d10b      	bne.n	8004e1c <HAL_ADC_Init+0x16c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	f043 0201 	orr.w	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1a:	e018      	b.n	8004e4e <HAL_ADC_Init+0x19e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f023 0312 	bic.w	r3, r3, #18
 8004e24:	f043 0210 	orr.w	r2, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e38:	2301      	movs	r3, #1
 8004e3a:	75fb      	strb	r3, [r7, #23]
 8004e3c:	e007      	b.n	8004e4e <HAL_ADC_Init+0x19e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	f043 0210 	orr.w	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	629a      	str	r2, [r3, #40]	; 0x28
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	ffe1f7fd 	.word	0xffe1f7fd
 8004e5c:	ff1f0efe 	.word	0xff1f0efe

08004e60 <HAL_ADC_Start_DMA>:
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	75fb      	strb	r3, [r7, #23]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a64      	ldr	r2, [pc, #400]	; (8005008 <HAL_ADC_Start_DMA+0x1a8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_ADC_Start_DMA+0x24>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a63      	ldr	r2, [pc, #396]	; (800500c <HAL_ADC_Start_DMA+0x1ac>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d106      	bne.n	8004e92 <HAL_ADC_Start_DMA+0x32>
 8004e84:	4b60      	ldr	r3, [pc, #384]	; (8005008 <HAL_ADC_Start_DMA+0x1a8>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 80b3 	bne.w	8004ff8 <HAL_ADC_Start_DMA+0x198>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_ADC_Start_DMA+0x40>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0ae      	b.n	8004ffe <HAL_ADC_Start_DMA+0x19e>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f9cb 	bl	8005244 <ADC_Enable>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	75fb      	strb	r3, [r7, #23]
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 809a 	bne.w	8004fee <HAL_ADC_Start_DMA+0x18e>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ec2:	f023 0301 	bic.w	r3, r3, #1
 8004ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	629a      	str	r2, [r3, #40]	; 0x28
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4e      	ldr	r2, [pc, #312]	; (800500c <HAL_ADC_Start_DMA+0x1ac>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d105      	bne.n	8004ee4 <HAL_ADC_Start_DMA+0x84>
 8004ed8:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <HAL_ADC_Start_DMA+0x1a8>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d115      	bne.n	8004f10 <HAL_ADC_Start_DMA+0xb0>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d026      	beq.n	8004f4c <HAL_ADC_Start_DMA+0xec>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f0e:	e01d      	b.n	8004f4c <HAL_ADC_Start_DMA+0xec>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a39      	ldr	r2, [pc, #228]	; (8005008 <HAL_ADC_Start_DMA+0x1a8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_ADC_Start_DMA+0xd0>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a38      	ldr	r2, [pc, #224]	; (800500c <HAL_ADC_Start_DMA+0x1ac>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10d      	bne.n	8004f4c <HAL_ADC_Start_DMA+0xec>
 8004f30:	4b35      	ldr	r3, [pc, #212]	; (8005008 <HAL_ADC_Start_DMA+0x1a8>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_ADC_Start_DMA+0xec>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d006      	beq.n	8004f66 <HAL_ADC_Start_DMA+0x106>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f023 0206 	bic.w	r2, r3, #6
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f64:	e002      	b.n	8004f6c <HAL_ADC_Start_DMA+0x10c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	4a25      	ldr	r2, [pc, #148]	; (8005010 <HAL_ADC_Start_DMA+0x1b0>)
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4a24      	ldr	r2, [pc, #144]	; (8005014 <HAL_ADC_Start_DMA+0x1b4>)
 8004f82:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4a23      	ldr	r2, [pc, #140]	; (8005018 <HAL_ADC_Start_DMA+0x1b8>)
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0202 	mvn.w	r2, #2
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a18      	ldr	r0, [r3, #32]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	334c      	adds	r3, #76	; 0x4c
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f000 fb9f 	bl	80056f8 <HAL_DMA_Start_IT>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004fc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004fc8:	d108      	bne.n	8004fdc <HAL_ADC_Start_DMA+0x17c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	e00f      	b.n	8004ffc <HAL_ADC_Start_DMA+0x19c>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004fea:	609a      	str	r2, [r3, #8]
 8004fec:	e006      	b.n	8004ffc <HAL_ADC_Start_DMA+0x19c>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ff6:	e001      	b.n	8004ffc <HAL_ADC_Start_DMA+0x19c>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	75fb      	strb	r3, [r7, #23]
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40012400 	.word	0x40012400
 800500c:	40012800 	.word	0x40012800
 8005010:	0800535d 	.word	0x0800535d
 8005014:	080053d9 	.word	0x080053d9
 8005018:	080053f5 	.word	0x080053f5

0800501c <HAL_ADC_ConvCpltCallback>:
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr

0800502e <HAL_ADC_ConvHalfCpltCallback>:
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	bc80      	pop	{r7}
 800503e:	4770      	bx	lr

08005040 <HAL_ADC_ErrorCallback>:
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
	...

08005054 <HAL_ADC_ConfigChannel>:
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	73fb      	strb	r3, [r7, #15]
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x20>
 8005070:	2302      	movs	r3, #2
 8005072:	e0dc      	b.n	800522e <HAL_ADC_ConfigChannel+0x1da>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d81c      	bhi.n	80050be <HAL_ADC_ConfigChannel+0x6a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	3b05      	subs	r3, #5
 8005096:	221f      	movs	r2, #31
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	43db      	mvns	r3, r3
 800509e:	4019      	ands	r1, r3
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	3b05      	subs	r3, #5
 80050b0:	fa00 f203 	lsl.w	r2, r0, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	635a      	str	r2, [r3, #52]	; 0x34
 80050bc:	e03c      	b.n	8005138 <HAL_ADC_ConfigChannel+0xe4>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b0c      	cmp	r3, #12
 80050c4:	d81c      	bhi.n	8005100 <HAL_ADC_ConfigChannel+0xac>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	3b23      	subs	r3, #35	; 0x23
 80050d8:	221f      	movs	r2, #31
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43db      	mvns	r3, r3
 80050e0:	4019      	ands	r1, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	3b23      	subs	r3, #35	; 0x23
 80050f2:	fa00 f203 	lsl.w	r2, r0, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
 80050fe:	e01b      	b.n	8005138 <HAL_ADC_ConfigChannel+0xe4>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	3b41      	subs	r3, #65	; 0x41
 8005112:	221f      	movs	r2, #31
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	4019      	ands	r1, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	3b41      	subs	r3, #65	; 0x41
 800512c:	fa00 f203 	lsl.w	r2, r0, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b09      	cmp	r3, #9
 800513e:	d91c      	bls.n	800517a <HAL_ADC_ConfigChannel+0x126>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68d9      	ldr	r1, [r3, #12]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4413      	add	r3, r2
 8005150:	3b1e      	subs	r3, #30
 8005152:	2207      	movs	r2, #7
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	4019      	ands	r1, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6898      	ldr	r0, [r3, #8]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	3b1e      	subs	r3, #30
 800516c:	fa00 f203 	lsl.w	r2, r0, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	e019      	b.n	80051ae <HAL_ADC_ConfigChannel+0x15a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6919      	ldr	r1, [r3, #16]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	4413      	add	r3, r2
 800518a:	2207      	movs	r2, #7
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	4019      	ands	r1, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6898      	ldr	r0, [r3, #8]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	fa00 f203 	lsl.w	r2, r0, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	611a      	str	r2, [r3, #16]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d003      	beq.n	80051be <HAL_ADC_ConfigChannel+0x16a>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b11      	cmp	r3, #17
 80051bc:	d132      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x1d0>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1d      	ldr	r2, [pc, #116]	; (8005238 <HAL_ADC_ConfigChannel+0x1e4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d125      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x1c0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d126      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x1d0>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80051e4:	609a      	str	r2, [r3, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d11a      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x1d0>
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <HAL_ADC_ConfigChannel+0x1e8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a13      	ldr	r2, [pc, #76]	; (8005240 <HAL_ADC_ConfigChannel+0x1ec>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	0c9a      	lsrs	r2, r3, #18
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	60bb      	str	r3, [r7, #8]
 8005204:	e002      	b.n	800520c <HAL_ADC_ConfigChannel+0x1b8>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	3b01      	subs	r3, #1
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f9      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x1b2>
 8005212:	e007      	b.n	8005224 <HAL_ADC_ConfigChannel+0x1d0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
 8005220:	2301      	movs	r3, #1
 8005222:	73fb      	strb	r3, [r7, #15]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	40012400 	.word	0x40012400
 800523c:	20000038 	.word	0x20000038
 8005240:	431bde83 	.word	0x431bde83

08005244 <ADC_Enable>:
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d039      	beq.n	80052d6 <ADC_Enable+0x92>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	609a      	str	r2, [r3, #8]
 8005272:	4b1b      	ldr	r3, [pc, #108]	; (80052e0 <ADC_Enable+0x9c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <ADC_Enable+0xa0>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	0c9b      	lsrs	r3, r3, #18
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	e002      	b.n	8005288 <ADC_Enable+0x44>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3b01      	subs	r3, #1
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f9      	bne.n	8005282 <ADC_Enable+0x3e>
 800528e:	f7ff fce1 	bl	8004c54 <HAL_GetTick>
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	e018      	b.n	80052c8 <ADC_Enable+0x84>
 8005296:	f7ff fcdd 	bl	8004c54 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d911      	bls.n	80052c8 <ADC_Enable+0x84>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	f043 0210 	orr.w	r2, r3, #16
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	f043 0201 	orr.w	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80052c4:	2301      	movs	r3, #1
 80052c6:	e007      	b.n	80052d8 <ADC_Enable+0x94>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d1df      	bne.n	8005296 <ADC_Enable+0x52>
 80052d6:	2300      	movs	r3, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000038 	.word	0x20000038
 80052e4:	431bde83 	.word	0x431bde83

080052e8 <ADC_ConversionStop_Disable>:
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d127      	bne.n	8005352 <ADC_ConversionStop_Disable+0x6a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	609a      	str	r2, [r3, #8]
 8005312:	f7ff fc9f 	bl	8004c54 <HAL_GetTick>
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	e014      	b.n	8005344 <ADC_ConversionStop_Disable+0x5c>
 800531a:	f7ff fc9b 	bl	8004c54 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d90d      	bls.n	8005344 <ADC_ConversionStop_Disable+0x5c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f043 0210 	orr.w	r2, r3, #16
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	629a      	str	r2, [r3, #40]	; 0x28
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005340:	2301      	movs	r3, #1
 8005342:	e007      	b.n	8005354 <ADC_ConversionStop_Disable+0x6c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d0e3      	beq.n	800531a <ADC_ConversionStop_Disable+0x32>
 8005352:	2300      	movs	r3, #0
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <ADC_DMAConvCplt>:
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005372:	2b00      	cmp	r3, #0
 8005374:	d127      	bne.n	80053c6 <ADC_DMAConvCplt+0x6a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	629a      	str	r2, [r3, #40]	; 0x28
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800538c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005390:	d115      	bne.n	80053be <ADC_DMAConvCplt+0x62>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	7b1b      	ldrb	r3, [r3, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d111      	bne.n	80053be <ADC_DMAConvCplt+0x62>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	629a      	str	r2, [r3, #40]	; 0x28
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <ADC_DMAConvCplt+0x62>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	629a      	str	r2, [r3, #40]	; 0x28
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f7ff fe2c 	bl	800501c <HAL_ADC_ConvCpltCallback>
 80053c4:	e004      	b.n	80053d0 <ADC_DMAConvCplt+0x74>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	4798      	blx	r3
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <ADC_DMAHalfConvCplt>:
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff fe21 	bl	800502e <HAL_ADC_ConvHalfCpltCallback>
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <ADC_DMAError>:
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005406:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	629a      	str	r2, [r3, #40]	; 0x28
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7ff fe10 	bl	8005040 <HAL_ADC_ErrorCallback>
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <__NVIC_SetPriorityGrouping+0x44>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005444:	4013      	ands	r3, r2
 8005446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005450:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800545a:	4a04      	ldr	r2, [pc, #16]	; (800546c <__NVIC_SetPriorityGrouping+0x44>)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	60d3      	str	r3, [r2, #12]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005474:	4b04      	ldr	r3, [pc, #16]	; (8005488 <__NVIC_GetPriorityGrouping+0x18>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	0a1b      	lsrs	r3, r3, #8
 800547a:	f003 0307 	and.w	r3, r3, #7
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	e000ed00 	.word	0xe000ed00

0800548c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	2b00      	cmp	r3, #0
 800549c:	db0b      	blt.n	80054b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800549e:	79fb      	ldrb	r3, [r7, #7]
 80054a0:	f003 021f 	and.w	r2, r3, #31
 80054a4:	4906      	ldr	r1, [pc, #24]	; (80054c0 <__NVIC_EnableIRQ+0x34>)
 80054a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	2001      	movs	r0, #1
 80054ae:	fa00 f202 	lsl.w	r2, r0, r2
 80054b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr
 80054c0:	e000e100 	.word	0xe000e100

080054c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	6039      	str	r1, [r7, #0]
 80054ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	db0a      	blt.n	80054ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	490c      	ldr	r1, [pc, #48]	; (8005510 <__NVIC_SetPriority+0x4c>)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	0112      	lsls	r2, r2, #4
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	440b      	add	r3, r1
 80054e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054ec:	e00a      	b.n	8005504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	4908      	ldr	r1, [pc, #32]	; (8005514 <__NVIC_SetPriority+0x50>)
 80054f4:	79fb      	ldrb	r3, [r7, #7]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	3b04      	subs	r3, #4
 80054fc:	0112      	lsls	r2, r2, #4
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	440b      	add	r3, r1
 8005502:	761a      	strb	r2, [r3, #24]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	e000e100 	.word	0xe000e100
 8005514:	e000ed00 	.word	0xe000ed00

08005518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	; 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f003 0307 	and.w	r3, r3, #7
 800552a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f1c3 0307 	rsb	r3, r3, #7
 8005532:	2b04      	cmp	r3, #4
 8005534:	bf28      	it	cs
 8005536:	2304      	movcs	r3, #4
 8005538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3304      	adds	r3, #4
 800553e:	2b06      	cmp	r3, #6
 8005540:	d902      	bls.n	8005548 <NVIC_EncodePriority+0x30>
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3b03      	subs	r3, #3
 8005546:	e000      	b.n	800554a <NVIC_EncodePriority+0x32>
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43da      	mvns	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	401a      	ands	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005560:	f04f 31ff 	mov.w	r1, #4294967295
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	43d9      	mvns	r1, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005570:	4313      	orrs	r3, r2
         );
}
 8005572:	4618      	mov	r0, r3
 8005574:	3724      	adds	r7, #36	; 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800558c:	d301      	bcc.n	8005592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800558e:	2301      	movs	r3, #1
 8005590:	e00f      	b.n	80055b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005592:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <SysTick_Config+0x40>)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b01      	subs	r3, #1
 8005598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800559a:	210f      	movs	r1, #15
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	f7ff ff90 	bl	80054c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <SysTick_Config+0x40>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055aa:	4b04      	ldr	r3, [pc, #16]	; (80055bc <SysTick_Config+0x40>)
 80055ac:	2207      	movs	r2, #7
 80055ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	e000e010 	.word	0xe000e010

080055c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff ff2d 	bl	8005428 <__NVIC_SetPriorityGrouping>
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	4603      	mov	r3, r0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055e8:	f7ff ff42 	bl	8005470 <__NVIC_GetPriorityGrouping>
 80055ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f7ff ff90 	bl	8005518 <NVIC_EncodePriority>
 80055f8:	4602      	mov	r2, r0
 80055fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff ff5f 	bl	80054c4 <__NVIC_SetPriority>
}
 8005606:	bf00      	nop
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	4603      	mov	r3, r0
 8005616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ff35 	bl	800548c <__NVIC_EnableIRQ>
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff ffa2 	bl	800557c <SysTick_Config>
 8005638:	4603      	mov	r3, r0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e043      	b.n	80056e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	4b22      	ldr	r3, [pc, #136]	; (80056ec <HAL_DMA_Init+0xa8>)
 8005662:	4413      	add	r3, r2
 8005664:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <HAL_DMA_Init+0xac>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	091b      	lsrs	r3, r3, #4
 800566c:	009a      	lsls	r2, r3, #2
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <HAL_DMA_Init+0xb0>)
 8005676:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800568e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005692:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800569c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	bffdfff8 	.word	0xbffdfff8
 80056f0:	cccccccd 	.word	0xcccccccd
 80056f4:	40020000 	.word	0x40020000

080056f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_DMA_Start_IT+0x20>
 8005714:	2302      	movs	r3, #2
 8005716:	e04a      	b.n	80057ae <HAL_DMA_Start_IT+0xb6>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005726:	2b01      	cmp	r3, #1
 8005728:	d13a      	bne.n	80057a0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f938 	bl	80059c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 020e 	orr.w	r2, r2, #14
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e00f      	b.n	800578e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0204 	bic.w	r2, r2, #4
 800577c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 020a 	orr.w	r2, r2, #10
 800578c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e005      	b.n	80057ac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
 80057aa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2204      	movs	r2, #4
 80057d6:	409a      	lsls	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d04f      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc8>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d04a      	beq.n	8005880 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d107      	bne.n	8005808 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0204 	bic.w	r2, r2, #4
 8005806:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a66      	ldr	r2, [pc, #408]	; (80059a8 <HAL_DMA_IRQHandler+0x1f0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d029      	beq.n	8005866 <HAL_DMA_IRQHandler+0xae>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a65      	ldr	r2, [pc, #404]	; (80059ac <HAL_DMA_IRQHandler+0x1f4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d022      	beq.n	8005862 <HAL_DMA_IRQHandler+0xaa>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a63      	ldr	r2, [pc, #396]	; (80059b0 <HAL_DMA_IRQHandler+0x1f8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01a      	beq.n	800585c <HAL_DMA_IRQHandler+0xa4>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a62      	ldr	r2, [pc, #392]	; (80059b4 <HAL_DMA_IRQHandler+0x1fc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d012      	beq.n	8005856 <HAL_DMA_IRQHandler+0x9e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <HAL_DMA_IRQHandler+0x200>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00a      	beq.n	8005850 <HAL_DMA_IRQHandler+0x98>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5f      	ldr	r2, [pc, #380]	; (80059bc <HAL_DMA_IRQHandler+0x204>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d102      	bne.n	800584a <HAL_DMA_IRQHandler+0x92>
 8005844:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005848:	e00e      	b.n	8005868 <HAL_DMA_IRQHandler+0xb0>
 800584a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800584e:	e00b      	b.n	8005868 <HAL_DMA_IRQHandler+0xb0>
 8005850:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005854:	e008      	b.n	8005868 <HAL_DMA_IRQHandler+0xb0>
 8005856:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800585a:	e005      	b.n	8005868 <HAL_DMA_IRQHandler+0xb0>
 800585c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005860:	e002      	b.n	8005868 <HAL_DMA_IRQHandler+0xb0>
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	e000      	b.n	8005868 <HAL_DMA_IRQHandler+0xb0>
 8005866:	2304      	movs	r3, #4
 8005868:	4a55      	ldr	r2, [pc, #340]	; (80059c0 <HAL_DMA_IRQHandler+0x208>)
 800586a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8094 	beq.w	800599e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800587e:	e08e      	b.n	800599e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	2202      	movs	r2, #2
 8005886:	409a      	lsls	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d056      	beq.n	800593e <HAL_DMA_IRQHandler+0x186>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d051      	beq.n	800593e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 020a 	bic.w	r2, r2, #10
 80058b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a38      	ldr	r2, [pc, #224]	; (80059a8 <HAL_DMA_IRQHandler+0x1f0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d029      	beq.n	800591e <HAL_DMA_IRQHandler+0x166>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a37      	ldr	r2, [pc, #220]	; (80059ac <HAL_DMA_IRQHandler+0x1f4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <HAL_DMA_IRQHandler+0x162>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a35      	ldr	r2, [pc, #212]	; (80059b0 <HAL_DMA_IRQHandler+0x1f8>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01a      	beq.n	8005914 <HAL_DMA_IRQHandler+0x15c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a34      	ldr	r2, [pc, #208]	; (80059b4 <HAL_DMA_IRQHandler+0x1fc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d012      	beq.n	800590e <HAL_DMA_IRQHandler+0x156>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a32      	ldr	r2, [pc, #200]	; (80059b8 <HAL_DMA_IRQHandler+0x200>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00a      	beq.n	8005908 <HAL_DMA_IRQHandler+0x150>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a31      	ldr	r2, [pc, #196]	; (80059bc <HAL_DMA_IRQHandler+0x204>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d102      	bne.n	8005902 <HAL_DMA_IRQHandler+0x14a>
 80058fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005900:	e00e      	b.n	8005920 <HAL_DMA_IRQHandler+0x168>
 8005902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005906:	e00b      	b.n	8005920 <HAL_DMA_IRQHandler+0x168>
 8005908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800590c:	e008      	b.n	8005920 <HAL_DMA_IRQHandler+0x168>
 800590e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005912:	e005      	b.n	8005920 <HAL_DMA_IRQHandler+0x168>
 8005914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005918:	e002      	b.n	8005920 <HAL_DMA_IRQHandler+0x168>
 800591a:	2320      	movs	r3, #32
 800591c:	e000      	b.n	8005920 <HAL_DMA_IRQHandler+0x168>
 800591e:	2302      	movs	r3, #2
 8005920:	4a27      	ldr	r2, [pc, #156]	; (80059c0 <HAL_DMA_IRQHandler+0x208>)
 8005922:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	2b00      	cmp	r3, #0
 8005932:	d034      	beq.n	800599e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800593c:	e02f      	b.n	800599e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	2208      	movs	r2, #8
 8005944:	409a      	lsls	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d028      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x1e8>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d023      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 020e 	bic.w	r2, r2, #14
 8005966:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	2101      	movs	r1, #1
 8005972:	fa01 f202 	lsl.w	r2, r1, r2
 8005976:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
    }
  }
  return;
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
}
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40020008 	.word	0x40020008
 80059ac:	4002001c 	.word	0x4002001c
 80059b0:	40020030 	.word	0x40020030
 80059b4:	40020044 	.word	0x40020044
 80059b8:	40020058 	.word	0x40020058
 80059bc:	4002006c 	.word	0x4002006c
 80059c0:	40020000 	.word	0x40020000

080059c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	2101      	movs	r1, #1
 80059dc:	fa01 f202 	lsl.w	r2, r1, r2
 80059e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d108      	bne.n	8005a04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a02:	e007      	b.n	8005a14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	60da      	str	r2, [r3, #12]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b08b      	sub	sp, #44	; 0x2c
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a32:	e169      	b.n	8005d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a34:	2201      	movs	r2, #1
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	4013      	ands	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	f040 8158 	bne.w	8005d02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4a9a      	ldr	r2, [pc, #616]	; (8005cc0 <HAL_GPIO_Init+0x2a0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d05e      	beq.n	8005b1a <HAL_GPIO_Init+0xfa>
 8005a5c:	4a98      	ldr	r2, [pc, #608]	; (8005cc0 <HAL_GPIO_Init+0x2a0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d875      	bhi.n	8005b4e <HAL_GPIO_Init+0x12e>
 8005a62:	4a98      	ldr	r2, [pc, #608]	; (8005cc4 <HAL_GPIO_Init+0x2a4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d058      	beq.n	8005b1a <HAL_GPIO_Init+0xfa>
 8005a68:	4a96      	ldr	r2, [pc, #600]	; (8005cc4 <HAL_GPIO_Init+0x2a4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d86f      	bhi.n	8005b4e <HAL_GPIO_Init+0x12e>
 8005a6e:	4a96      	ldr	r2, [pc, #600]	; (8005cc8 <HAL_GPIO_Init+0x2a8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d052      	beq.n	8005b1a <HAL_GPIO_Init+0xfa>
 8005a74:	4a94      	ldr	r2, [pc, #592]	; (8005cc8 <HAL_GPIO_Init+0x2a8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d869      	bhi.n	8005b4e <HAL_GPIO_Init+0x12e>
 8005a7a:	4a94      	ldr	r2, [pc, #592]	; (8005ccc <HAL_GPIO_Init+0x2ac>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d04c      	beq.n	8005b1a <HAL_GPIO_Init+0xfa>
 8005a80:	4a92      	ldr	r2, [pc, #584]	; (8005ccc <HAL_GPIO_Init+0x2ac>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d863      	bhi.n	8005b4e <HAL_GPIO_Init+0x12e>
 8005a86:	4a92      	ldr	r2, [pc, #584]	; (8005cd0 <HAL_GPIO_Init+0x2b0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d046      	beq.n	8005b1a <HAL_GPIO_Init+0xfa>
 8005a8c:	4a90      	ldr	r2, [pc, #576]	; (8005cd0 <HAL_GPIO_Init+0x2b0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d85d      	bhi.n	8005b4e <HAL_GPIO_Init+0x12e>
 8005a92:	2b12      	cmp	r3, #18
 8005a94:	d82a      	bhi.n	8005aec <HAL_GPIO_Init+0xcc>
 8005a96:	2b12      	cmp	r3, #18
 8005a98:	d859      	bhi.n	8005b4e <HAL_GPIO_Init+0x12e>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <HAL_GPIO_Init+0x80>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005af5 	.word	0x08005af5
 8005aa8:	08005b07 	.word	0x08005b07
 8005aac:	08005b49 	.word	0x08005b49
 8005ab0:	08005b4f 	.word	0x08005b4f
 8005ab4:	08005b4f 	.word	0x08005b4f
 8005ab8:	08005b4f 	.word	0x08005b4f
 8005abc:	08005b4f 	.word	0x08005b4f
 8005ac0:	08005b4f 	.word	0x08005b4f
 8005ac4:	08005b4f 	.word	0x08005b4f
 8005ac8:	08005b4f 	.word	0x08005b4f
 8005acc:	08005b4f 	.word	0x08005b4f
 8005ad0:	08005b4f 	.word	0x08005b4f
 8005ad4:	08005b4f 	.word	0x08005b4f
 8005ad8:	08005b4f 	.word	0x08005b4f
 8005adc:	08005b4f 	.word	0x08005b4f
 8005ae0:	08005b4f 	.word	0x08005b4f
 8005ae4:	08005afd 	.word	0x08005afd
 8005ae8:	08005b11 	.word	0x08005b11
 8005aec:	4a79      	ldr	r2, [pc, #484]	; (8005cd4 <HAL_GPIO_Init+0x2b4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005af2:	e02c      	b.n	8005b4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	623b      	str	r3, [r7, #32]
          break;
 8005afa:	e029      	b.n	8005b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	3304      	adds	r3, #4
 8005b02:	623b      	str	r3, [r7, #32]
          break;
 8005b04:	e024      	b.n	8005b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	623b      	str	r3, [r7, #32]
          break;
 8005b0e:	e01f      	b.n	8005b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	330c      	adds	r3, #12
 8005b16:	623b      	str	r3, [r7, #32]
          break;
 8005b18:	e01a      	b.n	8005b50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b22:	2304      	movs	r3, #4
 8005b24:	623b      	str	r3, [r7, #32]
          break;
 8005b26:	e013      	b.n	8005b50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d105      	bne.n	8005b3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b30:	2308      	movs	r3, #8
 8005b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	611a      	str	r2, [r3, #16]
          break;
 8005b3a:	e009      	b.n	8005b50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	615a      	str	r2, [r3, #20]
          break;
 8005b46:	e003      	b.n	8005b50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	623b      	str	r3, [r7, #32]
          break;
 8005b4c:	e000      	b.n	8005b50 <HAL_GPIO_Init+0x130>
          break;
 8005b4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2bff      	cmp	r3, #255	; 0xff
 8005b54:	d801      	bhi.n	8005b5a <HAL_GPIO_Init+0x13a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	e001      	b.n	8005b5e <HAL_GPIO_Init+0x13e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2bff      	cmp	r3, #255	; 0xff
 8005b64:	d802      	bhi.n	8005b6c <HAL_GPIO_Init+0x14c>
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	e002      	b.n	8005b72 <HAL_GPIO_Init+0x152>
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	3b08      	subs	r3, #8
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	210f      	movs	r1, #15
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	43db      	mvns	r3, r3
 8005b82:	401a      	ands	r2, r3
 8005b84:	6a39      	ldr	r1, [r7, #32]
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80b1 	beq.w	8005d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005ba0:	4b4d      	ldr	r3, [pc, #308]	; (8005cd8 <HAL_GPIO_Init+0x2b8>)
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	4a4c      	ldr	r2, [pc, #304]	; (8005cd8 <HAL_GPIO_Init+0x2b8>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6193      	str	r3, [r2, #24]
 8005bac:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <HAL_GPIO_Init+0x2b8>)
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005bb8:	4a48      	ldr	r2, [pc, #288]	; (8005cdc <HAL_GPIO_Init+0x2bc>)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	3302      	adds	r3, #2
 8005bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	220f      	movs	r2, #15
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a40      	ldr	r2, [pc, #256]	; (8005ce0 <HAL_GPIO_Init+0x2c0>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <HAL_GPIO_Init+0x1ec>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a3f      	ldr	r2, [pc, #252]	; (8005ce4 <HAL_GPIO_Init+0x2c4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00d      	beq.n	8005c08 <HAL_GPIO_Init+0x1e8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a3e      	ldr	r2, [pc, #248]	; (8005ce8 <HAL_GPIO_Init+0x2c8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <HAL_GPIO_Init+0x1e4>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3d      	ldr	r2, [pc, #244]	; (8005cec <HAL_GPIO_Init+0x2cc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d101      	bne.n	8005c00 <HAL_GPIO_Init+0x1e0>
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e006      	b.n	8005c0e <HAL_GPIO_Init+0x1ee>
 8005c00:	2304      	movs	r3, #4
 8005c02:	e004      	b.n	8005c0e <HAL_GPIO_Init+0x1ee>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e002      	b.n	8005c0e <HAL_GPIO_Init+0x1ee>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <HAL_GPIO_Init+0x1ee>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	f002 0203 	and.w	r2, r2, #3
 8005c14:	0092      	lsls	r2, r2, #2
 8005c16:	4093      	lsls	r3, r2
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c1e:	492f      	ldr	r1, [pc, #188]	; (8005cdc <HAL_GPIO_Init+0x2bc>)
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	089b      	lsrs	r3, r3, #2
 8005c24:	3302      	adds	r3, #2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d006      	beq.n	8005c46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	492c      	ldr	r1, [pc, #176]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	600b      	str	r3, [r1, #0]
 8005c44:	e006      	b.n	8005c54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c46:	4b2a      	ldr	r3, [pc, #168]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	4928      	ldr	r1, [pc, #160]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d006      	beq.n	8005c6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005c60:	4b23      	ldr	r3, [pc, #140]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	4922      	ldr	r1, [pc, #136]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	604b      	str	r3, [r1, #4]
 8005c6c:	e006      	b.n	8005c7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c6e:	4b20      	ldr	r3, [pc, #128]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	43db      	mvns	r3, r3
 8005c76:	491e      	ldr	r1, [pc, #120]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d006      	beq.n	8005c96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c88:	4b19      	ldr	r3, [pc, #100]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	4918      	ldr	r1, [pc, #96]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	608b      	str	r3, [r1, #8]
 8005c94:	e006      	b.n	8005ca4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c96:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	4914      	ldr	r1, [pc, #80]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d021      	beq.n	8005cf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	490e      	ldr	r1, [pc, #56]	; (8005cf0 <HAL_GPIO_Init+0x2d0>)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60cb      	str	r3, [r1, #12]
 8005cbc:	e021      	b.n	8005d02 <HAL_GPIO_Init+0x2e2>
 8005cbe:	bf00      	nop
 8005cc0:	10320000 	.word	0x10320000
 8005cc4:	10310000 	.word	0x10310000
 8005cc8:	10220000 	.word	0x10220000
 8005ccc:	10210000 	.word	0x10210000
 8005cd0:	10120000 	.word	0x10120000
 8005cd4:	10110000 	.word	0x10110000
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40010800 	.word	0x40010800
 8005ce4:	40010c00 	.word	0x40010c00
 8005ce8:	40011000 	.word	0x40011000
 8005cec:	40011400 	.word	0x40011400
 8005cf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_GPIO_Init+0x304>)
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	4909      	ldr	r1, [pc, #36]	; (8005d24 <HAL_GPIO_Init+0x304>)
 8005cfe:	4013      	ands	r3, r2
 8005d00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	3301      	adds	r3, #1
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f47f ae8e 	bne.w	8005a34 <HAL_GPIO_Init+0x14>
  }
}
 8005d18:	bf00      	nop
 8005d1a:	bf00      	nop
 8005d1c:	372c      	adds	r7, #44	; 0x2c
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	40010400 	.word	0x40010400

08005d28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	887b      	ldrh	r3, [r7, #2]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d40:	2301      	movs	r3, #1
 8005d42:	73fb      	strb	r3, [r7, #15]
 8005d44:	e001      	b.n	8005d4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d46:	2300      	movs	r3, #0
 8005d48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	807b      	strh	r3, [r7, #2]
 8005d62:	4613      	mov	r3, r2
 8005d64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d66:	787b      	ldrb	r3, [r7, #1]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d6c:	887a      	ldrh	r2, [r7, #2]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d72:	e003      	b.n	8005d7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d74:	887b      	ldrh	r3, [r7, #2]
 8005d76:	041a      	lsls	r2, r3, #16
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	611a      	str	r2, [r3, #16]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr

08005d86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b085      	sub	sp, #20
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d98:	887a      	ldrh	r2, [r7, #2]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	041a      	lsls	r2, r3, #16
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	43d9      	mvns	r1, r3
 8005da4:	887b      	ldrh	r3, [r7, #2]
 8005da6:	400b      	ands	r3, r1
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	611a      	str	r2, [r3, #16]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr

08005db8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e12b      	b.n	8006022 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fe fbf0 	bl	80045c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2224      	movs	r2, #36	; 0x24
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e1c:	f001 fba0 	bl	8007560 <HAL_RCC_GetPCLK1Freq>
 8005e20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4a81      	ldr	r2, [pc, #516]	; (800602c <HAL_I2C_Init+0x274>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d807      	bhi.n	8005e3c <HAL_I2C_Init+0x84>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a80      	ldr	r2, [pc, #512]	; (8006030 <HAL_I2C_Init+0x278>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	bf94      	ite	ls
 8005e34:	2301      	movls	r3, #1
 8005e36:	2300      	movhi	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	e006      	b.n	8005e4a <HAL_I2C_Init+0x92>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a7d      	ldr	r2, [pc, #500]	; (8006034 <HAL_I2C_Init+0x27c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	bf94      	ite	ls
 8005e44:	2301      	movls	r3, #1
 8005e46:	2300      	movhi	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e0e7      	b.n	8006022 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a78      	ldr	r2, [pc, #480]	; (8006038 <HAL_I2C_Init+0x280>)
 8005e56:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5a:	0c9b      	lsrs	r3, r3, #18
 8005e5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a6a      	ldr	r2, [pc, #424]	; (800602c <HAL_I2C_Init+0x274>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d802      	bhi.n	8005e8c <HAL_I2C_Init+0xd4>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	e009      	b.n	8005ea0 <HAL_I2C_Init+0xe8>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
 8005e96:	4a69      	ldr	r2, [pc, #420]	; (800603c <HAL_I2C_Init+0x284>)
 8005e98:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9c:	099b      	lsrs	r3, r3, #6
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005eb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	495c      	ldr	r1, [pc, #368]	; (800602c <HAL_I2C_Init+0x274>)
 8005ebc:	428b      	cmp	r3, r1
 8005ebe:	d819      	bhi.n	8005ef4 <HAL_I2C_Init+0x13c>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	1e59      	subs	r1, r3, #1
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ece:	1c59      	adds	r1, r3, #1
 8005ed0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ed4:	400b      	ands	r3, r1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <HAL_I2C_Init+0x138>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1e59      	subs	r1, r3, #1
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ee8:	3301      	adds	r3, #1
 8005eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eee:	e051      	b.n	8005f94 <HAL_I2C_Init+0x1dc>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	e04f      	b.n	8005f94 <HAL_I2C_Init+0x1dc>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d111      	bne.n	8005f20 <HAL_I2C_Init+0x168>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1e58      	subs	r0, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	440b      	add	r3, r1
 8005f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e012      	b.n	8005f46 <HAL_I2C_Init+0x18e>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	1e58      	subs	r0, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	0099      	lsls	r1, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f36:	3301      	adds	r3, #1
 8005f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	2301      	moveq	r3, #1
 8005f42:	2300      	movne	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <HAL_I2C_Init+0x196>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e022      	b.n	8005f94 <HAL_I2C_Init+0x1dc>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10e      	bne.n	8005f74 <HAL_I2C_Init+0x1bc>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1e58      	subs	r0, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6859      	ldr	r1, [r3, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	440b      	add	r3, r1
 8005f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f72:	e00f      	b.n	8005f94 <HAL_I2C_Init+0x1dc>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1e58      	subs	r0, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6859      	ldr	r1, [r3, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	0099      	lsls	r1, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	6809      	ldr	r1, [r1, #0]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6911      	ldr	r1, [r2, #16]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68d2      	ldr	r2, [r2, #12]
 8005fce:	4311      	orrs	r1, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	000186a0 	.word	0x000186a0
 8006030:	001e847f 	.word	0x001e847f
 8006034:	003d08ff 	.word	0x003d08ff
 8006038:	431bde83 	.word	0x431bde83
 800603c:	10624dd3 	.word	0x10624dd3

08006040 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	4608      	mov	r0, r1
 800604a:	4611      	mov	r1, r2
 800604c:	461a      	mov	r2, r3
 800604e:	4603      	mov	r3, r0
 8006050:	817b      	strh	r3, [r7, #10]
 8006052:	460b      	mov	r3, r1
 8006054:	813b      	strh	r3, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800605a:	f7fe fdfb 	bl	8004c54 <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b20      	cmp	r3, #32
 800606a:	f040 80d9 	bne.w	8006220 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	2319      	movs	r3, #25
 8006074:	2201      	movs	r2, #1
 8006076:	496d      	ldr	r1, [pc, #436]	; (800622c <HAL_I2C_Mem_Write+0x1ec>)
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fcc1 	bl	8006a00 <I2C_WaitOnFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
 8006086:	e0cc      	b.n	8006222 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_I2C_Mem_Write+0x56>
 8006092:	2302      	movs	r3, #2
 8006094:	e0c5      	b.n	8006222 <HAL_I2C_Mem_Write+0x1e2>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d007      	beq.n	80060bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2221      	movs	r2, #33	; 0x21
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2240      	movs	r2, #64	; 0x40
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a4d      	ldr	r2, [pc, #308]	; (8006230 <HAL_I2C_Mem_Write+0x1f0>)
 80060fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060fe:	88f8      	ldrh	r0, [r7, #6]
 8006100:	893a      	ldrh	r2, [r7, #8]
 8006102:	8979      	ldrh	r1, [r7, #10]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4603      	mov	r3, r0
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 faf8 	bl	8006704 <I2C_RequestMemoryWrite>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d052      	beq.n	80061c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e081      	b.n	8006222 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fd42 	bl	8006bac <I2C_WaitOnTXEFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00d      	beq.n	800614a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	2b04      	cmp	r3, #4
 8006134:	d107      	bne.n	8006146 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006144:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e06b      	b.n	8006222 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	781a      	ldrb	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b04      	cmp	r3, #4
 8006186:	d11b      	bne.n	80061c0 <HAL_I2C_Mem_Write+0x180>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	2b00      	cmp	r3, #0
 800618e:	d017      	beq.n	80061c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	781a      	ldrb	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1aa      	bne.n	800611e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fd2e 	bl	8006c2e <I2C_WaitOnBTFFlagUntilTimeout>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d107      	bne.n	80061f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e016      	b.n	8006222 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	e000      	b.n	8006222 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006220:	2302      	movs	r3, #2
  }
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	00100002 	.word	0x00100002
 8006230:	ffff0000 	.word	0xffff0000

08006234 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	; 0x30
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	4608      	mov	r0, r1
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	4603      	mov	r3, r0
 8006244:	817b      	strh	r3, [r7, #10]
 8006246:	460b      	mov	r3, r1
 8006248:	813b      	strh	r3, [r7, #8]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006252:	f7fe fcff 	bl	8004c54 <HAL_GetTick>
 8006256:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b20      	cmp	r3, #32
 8006262:	f040 8244 	bne.w	80066ee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	2319      	movs	r3, #25
 800626c:	2201      	movs	r2, #1
 800626e:	4982      	ldr	r1, [pc, #520]	; (8006478 <HAL_I2C_Mem_Read+0x244>)
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fbc5 	bl	8006a00 <I2C_WaitOnFlagUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
 800627e:	e237      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_I2C_Mem_Read+0x5a>
 800628a:	2302      	movs	r3, #2
 800628c:	e230      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d007      	beq.n	80062b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2222      	movs	r2, #34	; 0x22
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2240      	movs	r2, #64	; 0x40
 80062d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a62      	ldr	r2, [pc, #392]	; (800647c <HAL_I2C_Mem_Read+0x248>)
 80062f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062f6:	88f8      	ldrh	r0, [r7, #6]
 80062f8:	893a      	ldrh	r2, [r7, #8]
 80062fa:	8979      	ldrh	r1, [r7, #10]
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4603      	mov	r3, r0
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fa92 	bl	8006830 <I2C_RequestMemoryRead>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e1ec      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	2b00      	cmp	r3, #0
 800631c:	d113      	bne.n	8006346 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631e:	2300      	movs	r3, #0
 8006320:	61fb      	str	r3, [r7, #28]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	61fb      	str	r3, [r7, #28]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e1c0      	b.n	80066c8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800634a:	2b01      	cmp	r3, #1
 800634c:	d11e      	bne.n	800638c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800635e:	b672      	cpsid	i
}
 8006360:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006388:	b662      	cpsie	i
}
 800638a:	e035      	b.n	80063f8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	2b02      	cmp	r3, #2
 8006392:	d11e      	bne.n	80063d2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063a4:	b672      	cpsid	i
}
 80063a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	617b      	str	r3, [r7, #20]
 80063bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063ce:	b662      	cpsie	i
}
 80063d0:	e012      	b.n	80063f8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063e0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e2:	2300      	movs	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80063f8:	e166      	b.n	80066c8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063fe:	2b03      	cmp	r3, #3
 8006400:	f200 811f 	bhi.w	8006642 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006408:	2b01      	cmp	r3, #1
 800640a:	d123      	bne.n	8006454 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fc4d 	bl	8006cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e167      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	b2d2      	uxtb	r2, r2
 800642c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800643c:	3b01      	subs	r3, #1
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006452:	e139      	b.n	80066c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006458:	2b02      	cmp	r3, #2
 800645a:	d152      	bne.n	8006502 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	2200      	movs	r2, #0
 8006464:	4906      	ldr	r1, [pc, #24]	; (8006480 <HAL_I2C_Mem_Read+0x24c>)
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 faca 	bl	8006a00 <I2C_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d008      	beq.n	8006484 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e13c      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
 8006476:	bf00      	nop
 8006478:	00100002 	.word	0x00100002
 800647c:	ffff0000 	.word	0xffff0000
 8006480:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006484:	b672      	cpsid	i
}
 8006486:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80064ca:	b662      	cpsie	i
}
 80064cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006500:	e0e2      	b.n	80066c8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	2200      	movs	r2, #0
 800650a:	497b      	ldr	r1, [pc, #492]	; (80066f8 <HAL_I2C_Mem_Read+0x4c4>)
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fa77 	bl	8006a00 <I2C_WaitOnFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0e9      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800652c:	b672      	cpsid	i
}
 800652e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006562:	4b66      	ldr	r3, [pc, #408]	; (80066fc <HAL_I2C_Mem_Read+0x4c8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	08db      	lsrs	r3, r3, #3
 8006568:	4a65      	ldr	r2, [pc, #404]	; (8006700 <HAL_I2C_Mem_Read+0x4cc>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0a1a      	lsrs	r2, r3, #8
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	3b01      	subs	r3, #1
 8006580:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d118      	bne.n	80065ba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f043 0220 	orr.w	r2, r3, #32
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80065aa:	b662      	cpsie	i
}
 80065ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e09a      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d1d9      	bne.n	800657c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800660a:	b662      	cpsie	i
}
 800660c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006640:	e042      	b.n	80066c8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006644:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fb32 	bl	8006cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e04c      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b04      	cmp	r3, #4
 8006694:	d118      	bne.n	80066c8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f47f ae94 	bne.w	80063fa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	e000      	b.n	80066f0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80066ee:	2302      	movs	r3, #2
  }
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3728      	adds	r7, #40	; 0x28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	00010004 	.word	0x00010004
 80066fc:	20000038 	.word	0x20000038
 8006700:	14f8b589 	.word	0x14f8b589

08006704 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	4608      	mov	r0, r1
 800670e:	4611      	mov	r1, r2
 8006710:	461a      	mov	r2, r3
 8006712:	4603      	mov	r3, r0
 8006714:	817b      	strh	r3, [r7, #10]
 8006716:	460b      	mov	r3, r1
 8006718:	813b      	strh	r3, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800672c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	2200      	movs	r2, #0
 8006736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f960 	bl	8006a00 <I2C_WaitOnFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006754:	d103      	bne.n	800675e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e05f      	b.n	8006822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006762:	897b      	ldrh	r3, [r7, #10]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	6a3a      	ldr	r2, [r7, #32]
 8006776:	492d      	ldr	r1, [pc, #180]	; (800682c <I2C_RequestMemoryWrite+0x128>)
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f998 	bl	8006aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e04c      	b.n	8006822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006788:	2300      	movs	r3, #0
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a0:	6a39      	ldr	r1, [r7, #32]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fa02 	bl	8006bac <I2C_WaitOnTXEFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00d      	beq.n	80067ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d107      	bne.n	80067c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e02b      	b.n	8006822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d105      	bne.n	80067dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067d0:	893b      	ldrh	r3, [r7, #8]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	611a      	str	r2, [r3, #16]
 80067da:	e021      	b.n	8006820 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067dc:	893b      	ldrh	r3, [r7, #8]
 80067de:	0a1b      	lsrs	r3, r3, #8
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ec:	6a39      	ldr	r1, [r7, #32]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f9dc 	bl	8006bac <I2C_WaitOnTXEFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00d      	beq.n	8006816 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d107      	bne.n	8006812 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e005      	b.n	8006822 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006816:	893b      	ldrh	r3, [r7, #8]
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	00010002 	.word	0x00010002

08006830 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	461a      	mov	r2, r3
 800683e:	4603      	mov	r3, r0
 8006840:	817b      	strh	r3, [r7, #10]
 8006842:	460b      	mov	r3, r1
 8006844:	813b      	strh	r3, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006858:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006868:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	2200      	movs	r2, #0
 8006872:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f8c2 	bl	8006a00 <I2C_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00d      	beq.n	800689e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006890:	d103      	bne.n	800689a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e0aa      	b.n	80069f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800689e:	897b      	ldrh	r3, [r7, #10]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	4952      	ldr	r1, [pc, #328]	; (80069fc <I2C_RequestMemoryRead+0x1cc>)
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f8fa 	bl	8006aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e097      	b.n	80069f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c4:	2300      	movs	r3, #0
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068dc:	6a39      	ldr	r1, [r7, #32]
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 f964 	bl	8006bac <I2C_WaitOnTXEFlagUntilTimeout>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00d      	beq.n	8006906 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d107      	bne.n	8006902 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006900:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e076      	b.n	80069f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d105      	bne.n	8006918 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800690c:	893b      	ldrh	r3, [r7, #8]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	611a      	str	r2, [r3, #16]
 8006916:	e021      	b.n	800695c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006918:	893b      	ldrh	r3, [r7, #8]
 800691a:	0a1b      	lsrs	r3, r3, #8
 800691c:	b29b      	uxth	r3, r3
 800691e:	b2da      	uxtb	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006928:	6a39      	ldr	r1, [r7, #32]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f93e 	bl	8006bac <I2C_WaitOnTXEFlagUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	2b04      	cmp	r3, #4
 800693c:	d107      	bne.n	800694e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e050      	b.n	80069f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800695c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800695e:	6a39      	ldr	r1, [r7, #32]
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f923 	bl	8006bac <I2C_WaitOnTXEFlagUntilTimeout>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	2b04      	cmp	r3, #4
 8006972:	d107      	bne.n	8006984 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006982:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e035      	b.n	80069f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006996:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	2200      	movs	r2, #0
 80069a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f82b 	bl	8006a00 <I2C_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00d      	beq.n	80069cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069be:	d103      	bne.n	80069c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e013      	b.n	80069f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069cc:	897b      	ldrh	r3, [r7, #10]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f043 0301 	orr.w	r3, r3, #1
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	4906      	ldr	r1, [pc, #24]	; (80069fc <I2C_RequestMemoryRead+0x1cc>)
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f863 	bl	8006aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	00010002 	.word	0x00010002

08006a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a10:	e025      	b.n	8006a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a18:	d021      	beq.n	8006a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1a:	f7fe f91b 	bl	8004c54 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d302      	bcc.n	8006a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d116      	bne.n	8006a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f043 0220 	orr.w	r2, r3, #32
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e023      	b.n	8006aa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	0c1b      	lsrs	r3, r3, #16
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d10d      	bne.n	8006a84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	43da      	mvns	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4013      	ands	r3, r2
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	bf0c      	ite	eq
 8006a7a:	2301      	moveq	r3, #1
 8006a7c:	2300      	movne	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	e00c      	b.n	8006a9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	43da      	mvns	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bf0c      	ite	eq
 8006a96:	2301      	moveq	r3, #1
 8006a98:	2300      	movne	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d0b6      	beq.n	8006a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006abc:	e051      	b.n	8006b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006acc:	d123      	bne.n	8006b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006adc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e046      	b.n	8006ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d021      	beq.n	8006b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1e:	f7fe f899 	bl	8004c54 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d302      	bcc.n	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d116      	bne.n	8006b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2220      	movs	r2, #32
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4e:	f043 0220 	orr.w	r2, r3, #32
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e020      	b.n	8006ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	0c1b      	lsrs	r3, r3, #16
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10c      	bne.n	8006b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	43da      	mvns	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4013      	ands	r3, r2
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	bf14      	ite	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	2300      	moveq	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	e00b      	b.n	8006b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	43da      	mvns	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	4013      	ands	r3, r2
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bf14      	ite	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d18d      	bne.n	8006abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006bb8:	e02d      	b.n	8006c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 f8ce 	bl	8006d5c <I2C_IsAcknowledgeFailed>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e02d      	b.n	8006c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d021      	beq.n	8006c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fe f83f 	bl	8004c54 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d302      	bcc.n	8006be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d116      	bne.n	8006c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	f043 0220 	orr.w	r2, r3, #32
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e007      	b.n	8006c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d1ca      	bne.n	8006bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c3a:	e02d      	b.n	8006c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f88d 	bl	8006d5c <I2C_IsAcknowledgeFailed>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e02d      	b.n	8006ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c52:	d021      	beq.n	8006c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c54:	f7fd fffe 	bl	8004c54 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d302      	bcc.n	8006c6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d116      	bne.n	8006c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	f043 0220 	orr.w	r2, r3, #32
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e007      	b.n	8006ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d1ca      	bne.n	8006c3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cbc:	e042      	b.n	8006d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d119      	bne.n	8006d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0210 	mvn.w	r2, #16
 8006cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e029      	b.n	8006d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d00:	f7fd ffa8 	bl	8004c54 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d302      	bcc.n	8006d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d116      	bne.n	8006d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	f043 0220 	orr.w	r2, r3, #32
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e007      	b.n	8006d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4e:	2b40      	cmp	r3, #64	; 0x40
 8006d50:	d1b5      	bne.n	8006cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d72:	d11b      	bne.n	8006dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	f043 0204 	orr.w	r2, r3, #4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e26c      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8087 	beq.w	8006ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dd8:	4b92      	ldr	r3, [pc, #584]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 030c 	and.w	r3, r3, #12
 8006de0:	2b04      	cmp	r3, #4
 8006de2:	d00c      	beq.n	8006dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006de4:	4b8f      	ldr	r3, [pc, #572]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f003 030c 	and.w	r3, r3, #12
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d112      	bne.n	8006e16 <HAL_RCC_OscConfig+0x5e>
 8006df0:	4b8c      	ldr	r3, [pc, #560]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfc:	d10b      	bne.n	8006e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfe:	4b89      	ldr	r3, [pc, #548]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d06c      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x12c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d168      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e246      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCC_OscConfig+0x76>
 8006e20:	4b80      	ldr	r3, [pc, #512]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7f      	ldr	r2, [pc, #508]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	e02e      	b.n	8006e8c <HAL_RCC_OscConfig+0xd4>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10c      	bne.n	8006e50 <HAL_RCC_OscConfig+0x98>
 8006e36:	4b7b      	ldr	r3, [pc, #492]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7a      	ldr	r2, [pc, #488]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	4b78      	ldr	r3, [pc, #480]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a77      	ldr	r2, [pc, #476]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e01d      	b.n	8006e8c <HAL_RCC_OscConfig+0xd4>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCC_OscConfig+0xbc>
 8006e5a:	4b72      	ldr	r3, [pc, #456]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a71      	ldr	r2, [pc, #452]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b6f      	ldr	r3, [pc, #444]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a6e      	ldr	r2, [pc, #440]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e00b      	b.n	8006e8c <HAL_RCC_OscConfig+0xd4>
 8006e74:	4b6b      	ldr	r3, [pc, #428]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a6a      	ldr	r2, [pc, #424]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	4b68      	ldr	r3, [pc, #416]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a67      	ldr	r2, [pc, #412]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d013      	beq.n	8006ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fd fede 	bl	8004c54 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e9c:	f7fd feda 	bl	8004c54 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b64      	cmp	r3, #100	; 0x64
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e1fa      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eae:	4b5d      	ldr	r3, [pc, #372]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0xe4>
 8006eba:	e014      	b.n	8006ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebc:	f7fd feca 	bl	8004c54 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec4:	f7fd fec6 	bl	8004c54 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	; 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e1e6      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ed6:	4b53      	ldr	r3, [pc, #332]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x10c>
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d063      	beq.n	8006fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ef2:	4b4c      	ldr	r3, [pc, #304]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006efe:	4b49      	ldr	r3, [pc, #292]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f003 030c 	and.w	r3, r3, #12
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d11c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x18c>
 8006f0a:	4b46      	ldr	r3, [pc, #280]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d116      	bne.n	8006f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f16:	4b43      	ldr	r3, [pc, #268]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <HAL_RCC_OscConfig+0x176>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d001      	beq.n	8006f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e1ba      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2e:	4b3d      	ldr	r3, [pc, #244]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	4939      	ldr	r1, [pc, #228]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f42:	e03a      	b.n	8006fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d020      	beq.n	8006f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f4c:	4b36      	ldr	r3, [pc, #216]	; (8007028 <HAL_RCC_OscConfig+0x270>)
 8006f4e:	2201      	movs	r2, #1
 8006f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f52:	f7fd fe7f 	bl	8004c54 <HAL_GetTick>
 8006f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f58:	e008      	b.n	8006f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5a:	f7fd fe7b 	bl	8004c54 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e19b      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f6c:	4b2d      	ldr	r3, [pc, #180]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0f0      	beq.n	8006f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f78:	4b2a      	ldr	r3, [pc, #168]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4927      	ldr	r1, [pc, #156]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	600b      	str	r3, [r1, #0]
 8006f8c:	e015      	b.n	8006fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8e:	4b26      	ldr	r3, [pc, #152]	; (8007028 <HAL_RCC_OscConfig+0x270>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f94:	f7fd fe5e 	bl	8004c54 <HAL_GetTick>
 8006f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f9a:	e008      	b.n	8006fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f9c:	f7fd fe5a 	bl	8004c54 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e17a      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fae:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f0      	bne.n	8006f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d03a      	beq.n	800703c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d019      	beq.n	8007002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fce:	4b17      	ldr	r3, [pc, #92]	; (800702c <HAL_RCC_OscConfig+0x274>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd4:	f7fd fe3e 	bl	8004c54 <HAL_GetTick>
 8006fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fdc:	f7fd fe3a 	bl	8004c54 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e15a      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <HAL_RCC_OscConfig+0x26c>)
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0f0      	beq.n	8006fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f000 fad8 	bl	80075b0 <RCC_Delay>
 8007000:	e01c      	b.n	800703c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <HAL_RCC_OscConfig+0x274>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007008:	f7fd fe24 	bl	8004c54 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800700e:	e00f      	b.n	8007030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007010:	f7fd fe20 	bl	8004c54 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d908      	bls.n	8007030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e140      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
 8007022:	bf00      	nop
 8007024:	40021000 	.word	0x40021000
 8007028:	42420000 	.word	0x42420000
 800702c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007030:	4b9e      	ldr	r3, [pc, #632]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e9      	bne.n	8007010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 80a6 	beq.w	8007196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800704e:	4b97      	ldr	r3, [pc, #604]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800705a:	4b94      	ldr	r3, [pc, #592]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	4a93      	ldr	r2, [pc, #588]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007064:	61d3      	str	r3, [r2, #28]
 8007066:	4b91      	ldr	r3, [pc, #580]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706e:	60bb      	str	r3, [r7, #8]
 8007070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007076:	4b8e      	ldr	r3, [pc, #568]	; (80072b0 <HAL_RCC_OscConfig+0x4f8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d118      	bne.n	80070b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007082:	4b8b      	ldr	r3, [pc, #556]	; (80072b0 <HAL_RCC_OscConfig+0x4f8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a8a      	ldr	r2, [pc, #552]	; (80072b0 <HAL_RCC_OscConfig+0x4f8>)
 8007088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800708e:	f7fd fde1 	bl	8004c54 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007096:	f7fd fddd 	bl	8004c54 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b64      	cmp	r3, #100	; 0x64
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e0fd      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a8:	4b81      	ldr	r3, [pc, #516]	; (80072b0 <HAL_RCC_OscConfig+0x4f8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d106      	bne.n	80070ca <HAL_RCC_OscConfig+0x312>
 80070bc:	4b7b      	ldr	r3, [pc, #492]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	4a7a      	ldr	r2, [pc, #488]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6213      	str	r3, [r2, #32]
 80070c8:	e02d      	b.n	8007126 <HAL_RCC_OscConfig+0x36e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10c      	bne.n	80070ec <HAL_RCC_OscConfig+0x334>
 80070d2:	4b76      	ldr	r3, [pc, #472]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	4a75      	ldr	r2, [pc, #468]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	6213      	str	r3, [r2, #32]
 80070de:	4b73      	ldr	r3, [pc, #460]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	4a72      	ldr	r2, [pc, #456]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070e4:	f023 0304 	bic.w	r3, r3, #4
 80070e8:	6213      	str	r3, [r2, #32]
 80070ea:	e01c      	b.n	8007126 <HAL_RCC_OscConfig+0x36e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b05      	cmp	r3, #5
 80070f2:	d10c      	bne.n	800710e <HAL_RCC_OscConfig+0x356>
 80070f4:	4b6d      	ldr	r3, [pc, #436]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	4a6c      	ldr	r2, [pc, #432]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80070fa:	f043 0304 	orr.w	r3, r3, #4
 80070fe:	6213      	str	r3, [r2, #32]
 8007100:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	4a69      	ldr	r2, [pc, #420]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	6213      	str	r3, [r2, #32]
 800710c:	e00b      	b.n	8007126 <HAL_RCC_OscConfig+0x36e>
 800710e:	4b67      	ldr	r3, [pc, #412]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	4a66      	ldr	r2, [pc, #408]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	6213      	str	r3, [r2, #32]
 800711a:	4b64      	ldr	r3, [pc, #400]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	4a63      	ldr	r2, [pc, #396]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d015      	beq.n	800715a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712e:	f7fd fd91 	bl	8004c54 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fd fd8d 	bl	8004c54 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e0ab      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714c:	4b57      	ldr	r3, [pc, #348]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0ee      	beq.n	8007136 <HAL_RCC_OscConfig+0x37e>
 8007158:	e014      	b.n	8007184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800715a:	f7fd fd7b 	bl	8004c54 <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007160:	e00a      	b.n	8007178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007162:	f7fd fd77 	bl	8004c54 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e095      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007178:	4b4c      	ldr	r3, [pc, #304]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1ee      	bne.n	8007162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d105      	bne.n	8007196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800718a:	4b48      	ldr	r3, [pc, #288]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4a47      	ldr	r2, [pc, #284]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007194:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8081 	beq.w	80072a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a0:	4b42      	ldr	r3, [pc, #264]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d061      	beq.n	8007270 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d146      	bne.n	8007242 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071b4:	4b3f      	ldr	r3, [pc, #252]	; (80072b4 <HAL_RCC_OscConfig+0x4fc>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ba:	f7fd fd4b 	bl	8004c54 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071c0:	e008      	b.n	80071d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c2:	f7fd fd47 	bl	8004c54 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d901      	bls.n	80071d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e067      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071d4:	4b35      	ldr	r3, [pc, #212]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f0      	bne.n	80071c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e8:	d108      	bne.n	80071fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071ea:	4b30      	ldr	r3, [pc, #192]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	492d      	ldr	r1, [pc, #180]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071fc:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a19      	ldr	r1, [r3, #32]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	430b      	orrs	r3, r1
 800720e:	4927      	ldr	r1, [pc, #156]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007210:	4313      	orrs	r3, r2
 8007212:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007214:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <HAL_RCC_OscConfig+0x4fc>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721a:	f7fd fd1b 	bl	8004c54 <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007222:	f7fd fd17 	bl	8004c54 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e037      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007234:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x46a>
 8007240:	e02f      	b.n	80072a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007242:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <HAL_RCC_OscConfig+0x4fc>)
 8007244:	2200      	movs	r2, #0
 8007246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007248:	f7fd fd04 	bl	8004c54 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007250:	f7fd fd00 	bl	8004c54 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e020      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007262:	4b12      	ldr	r3, [pc, #72]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x498>
 800726e:	e018      	b.n	80072a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e013      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800727c:	4b0b      	ldr	r3, [pc, #44]	; (80072ac <HAL_RCC_OscConfig+0x4f4>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	429a      	cmp	r2, r3
 800728e:	d106      	bne.n	800729e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800729a:	429a      	cmp	r2, r3
 800729c:	d001      	beq.n	80072a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3718      	adds	r7, #24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40021000 	.word	0x40021000
 80072b0:	40007000 	.word	0x40007000
 80072b4:	42420060 	.word	0x42420060

080072b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0d0      	b.n	800746e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072cc:	4b6a      	ldr	r3, [pc, #424]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d910      	bls.n	80072fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072da:	4b67      	ldr	r3, [pc, #412]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f023 0207 	bic.w	r2, r3, #7
 80072e2:	4965      	ldr	r1, [pc, #404]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ea:	4b63      	ldr	r3, [pc, #396]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0b8      	b.n	800746e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d020      	beq.n	800734a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007314:	4b59      	ldr	r3, [pc, #356]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4a58      	ldr	r2, [pc, #352]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 800731a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800731e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800732c:	4b53      	ldr	r3, [pc, #332]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	4a52      	ldr	r2, [pc, #328]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007332:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007336:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007338:	4b50      	ldr	r3, [pc, #320]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	494d      	ldr	r1, [pc, #308]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007346:	4313      	orrs	r3, r2
 8007348:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d040      	beq.n	80073d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d107      	bne.n	800736e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735e:	4b47      	ldr	r3, [pc, #284]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d115      	bne.n	8007396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e07f      	b.n	800746e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d107      	bne.n	8007386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007376:	4b41      	ldr	r3, [pc, #260]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e073      	b.n	800746e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007386:	4b3d      	ldr	r3, [pc, #244]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e06b      	b.n	800746e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007396:	4b39      	ldr	r3, [pc, #228]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f023 0203 	bic.w	r2, r3, #3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	4936      	ldr	r1, [pc, #216]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073a8:	f7fd fc54 	bl	8004c54 <HAL_GetTick>
 80073ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ae:	e00a      	b.n	80073c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073b0:	f7fd fc50 	bl	8004c54 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80073be:	4293      	cmp	r3, r2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e053      	b.n	800746e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073c6:	4b2d      	ldr	r3, [pc, #180]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f003 020c 	and.w	r2, r3, #12
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d1eb      	bne.n	80073b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073d8:	4b27      	ldr	r3, [pc, #156]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d210      	bcs.n	8007408 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073e6:	4b24      	ldr	r3, [pc, #144]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f023 0207 	bic.w	r2, r3, #7
 80073ee:	4922      	ldr	r1, [pc, #136]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f6:	4b20      	ldr	r3, [pc, #128]	; (8007478 <HAL_RCC_ClockConfig+0x1c0>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e032      	b.n	800746e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007414:	4b19      	ldr	r3, [pc, #100]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	4916      	ldr	r1, [pc, #88]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007422:	4313      	orrs	r3, r2
 8007424:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	490e      	ldr	r1, [pc, #56]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 8007442:	4313      	orrs	r3, r2
 8007444:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007446:	f000 f821 	bl	800748c <HAL_RCC_GetSysClockFreq>
 800744a:	4602      	mov	r2, r0
 800744c:	4b0b      	ldr	r3, [pc, #44]	; (800747c <HAL_RCC_ClockConfig+0x1c4>)
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	091b      	lsrs	r3, r3, #4
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	490a      	ldr	r1, [pc, #40]	; (8007480 <HAL_RCC_ClockConfig+0x1c8>)
 8007458:	5ccb      	ldrb	r3, [r1, r3]
 800745a:	fa22 f303 	lsr.w	r3, r2, r3
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <HAL_RCC_ClockConfig+0x1cc>)
 8007460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <HAL_RCC_ClockConfig+0x1d0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f7fd fbb2 	bl	8004bd0 <HAL_InitTick>

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40022000 	.word	0x40022000
 800747c:	40021000 	.word	0x40021000
 8007480:	0800cc88 	.word	0x0800cc88
 8007484:	20000038 	.word	0x20000038
 8007488:	2000003c 	.word	0x2000003c

0800748c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800748c:	b490      	push	{r4, r7}
 800748e:	b08a      	sub	sp, #40	; 0x28
 8007490:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007492:	4b2a      	ldr	r3, [pc, #168]	; (800753c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007494:	1d3c      	adds	r4, r7, #4
 8007496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800749c:	f240 2301 	movw	r3, #513	; 0x201
 80074a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
 80074a6:	2300      	movs	r3, #0
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	2300      	movs	r3, #0
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80074b6:	4b22      	ldr	r3, [pc, #136]	; (8007540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f003 030c 	and.w	r3, r3, #12
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d002      	beq.n	80074cc <HAL_RCC_GetSysClockFreq+0x40>
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d003      	beq.n	80074d2 <HAL_RCC_GetSysClockFreq+0x46>
 80074ca:	e02d      	b.n	8007528 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80074cc:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074ce:	623b      	str	r3, [r7, #32]
      break;
 80074d0:	e02d      	b.n	800752e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	0c9b      	lsrs	r3, r3, #18
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80074de:	4413      	add	r3, r2
 80074e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80074e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d013      	beq.n	8007518 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80074f0:	4b13      	ldr	r3, [pc, #76]	; (8007540 <HAL_RCC_GetSysClockFreq+0xb4>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	0c5b      	lsrs	r3, r3, #17
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80074fe:	4413      	add	r3, r2
 8007500:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007504:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4a0e      	ldr	r2, [pc, #56]	; (8007544 <HAL_RCC_GetSysClockFreq+0xb8>)
 800750a:	fb02 f203 	mul.w	r2, r2, r3
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	fbb2 f3f3 	udiv	r3, r2, r3
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
 8007516:	e004      	b.n	8007522 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	4a0b      	ldr	r2, [pc, #44]	; (8007548 <HAL_RCC_GetSysClockFreq+0xbc>)
 800751c:	fb02 f303 	mul.w	r3, r2, r3
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007524:	623b      	str	r3, [r7, #32]
      break;
 8007526:	e002      	b.n	800752e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007528:	4b06      	ldr	r3, [pc, #24]	; (8007544 <HAL_RCC_GetSysClockFreq+0xb8>)
 800752a:	623b      	str	r3, [r7, #32]
      break;
 800752c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800752e:	6a3b      	ldr	r3, [r7, #32]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3728      	adds	r7, #40	; 0x28
 8007534:	46bd      	mov	sp, r7
 8007536:	bc90      	pop	{r4, r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	0800cc68 	.word	0x0800cc68
 8007540:	40021000 	.word	0x40021000
 8007544:	007a1200 	.word	0x007a1200
 8007548:	003d0900 	.word	0x003d0900

0800754c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007550:	4b02      	ldr	r3, [pc, #8]	; (800755c <HAL_RCC_GetHCLKFreq+0x10>)
 8007552:	681b      	ldr	r3, [r3, #0]
}
 8007554:	4618      	mov	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr
 800755c:	20000038 	.word	0x20000038

08007560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007564:	f7ff fff2 	bl	800754c <HAL_RCC_GetHCLKFreq>
 8007568:	4602      	mov	r2, r0
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	4903      	ldr	r1, [pc, #12]	; (8007584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007576:	5ccb      	ldrb	r3, [r1, r3]
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}
 8007580:	40021000 	.word	0x40021000
 8007584:	0800cc98 	.word	0x0800cc98

08007588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800758c:	f7ff ffde 	bl	800754c <HAL_RCC_GetHCLKFreq>
 8007590:	4602      	mov	r2, r0
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	0adb      	lsrs	r3, r3, #11
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	4903      	ldr	r1, [pc, #12]	; (80075ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800759e:	5ccb      	ldrb	r3, [r1, r3]
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	40021000 	.word	0x40021000
 80075ac:	0800cc98 	.word	0x0800cc98

080075b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <RCC_Delay+0x34>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <RCC_Delay+0x38>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	0a5b      	lsrs	r3, r3, #9
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	fb02 f303 	mul.w	r3, r2, r3
 80075ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80075cc:	bf00      	nop
  }
  while (Delay --);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1e5a      	subs	r2, r3, #1
 80075d2:	60fa      	str	r2, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f9      	bne.n	80075cc <RCC_Delay+0x1c>
}
 80075d8:	bf00      	nop
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr
 80075e4:	20000038 	.word	0x20000038
 80075e8:	10624dd3 	.word	0x10624dd3

080075ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d07d      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8007608:	2300      	movs	r3, #0
 800760a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800760c:	4b4f      	ldr	r3, [pc, #316]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10d      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007618:	4b4c      	ldr	r3, [pc, #304]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	4a4b      	ldr	r2, [pc, #300]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007622:	61d3      	str	r3, [r2, #28]
 8007624:	4b49      	ldr	r3, [pc, #292]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007634:	4b46      	ldr	r3, [pc, #280]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800763c:	2b00      	cmp	r3, #0
 800763e:	d118      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007640:	4b43      	ldr	r3, [pc, #268]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a42      	ldr	r2, [pc, #264]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800764a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800764c:	f7fd fb02 	bl	8004c54 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007654:	f7fd fafe 	bl	8004c54 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b64      	cmp	r3, #100	; 0x64
 8007660:	d901      	bls.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e06d      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007666:	4b3a      	ldr	r3, [pc, #232]	; (8007750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0f0      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007672:	4b36      	ldr	r3, [pc, #216]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d02e      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	429a      	cmp	r2, r3
 800768e:	d027      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007690:	4b2e      	ldr	r3, [pc, #184]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007698:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800769a:	4b2e      	ldr	r3, [pc, #184]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800769c:	2201      	movs	r2, #1
 800769e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076a0:	4b2c      	ldr	r3, [pc, #176]	; (8007754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076a6:	4a29      	ldr	r2, [pc, #164]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d014      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b6:	f7fd facd 	bl	8004c54 <HAL_GetTick>
 80076ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076bc:	e00a      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076be:	f7fd fac9 	bl	8004c54 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e036      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076d4:	4b1d      	ldr	r3, [pc, #116]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d0ee      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076e0:	4b1a      	ldr	r3, [pc, #104]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	4917      	ldr	r1, [pc, #92]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80076f2:	7dfb      	ldrb	r3, [r7, #23]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d105      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076f8:	4b14      	ldr	r3, [pc, #80]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	4a13      	ldr	r2, [pc, #76]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007702:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007710:	4b0e      	ldr	r3, [pc, #56]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	490b      	ldr	r1, [pc, #44]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800771e:	4313      	orrs	r3, r2
 8007720:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	d008      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800772e:	4b07      	ldr	r3, [pc, #28]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	4904      	ldr	r1, [pc, #16]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800773c:	4313      	orrs	r3, r2
 800773e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40021000 	.word	0x40021000
 8007750:	40007000 	.word	0x40007000
 8007754:	42420440 	.word	0x42420440

08007758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e076      	b.n	8007858 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2b00      	cmp	r3, #0
 8007770:	d108      	bne.n	8007784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800777a:	d009      	beq.n	8007790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	61da      	str	r2, [r3, #28]
 8007782:	e005      	b.n	8007790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fc ff5a 	bl	8004664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007814:	ea42 0103 	orr.w	r1, r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	0c1a      	lsrs	r2, r3, #16
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f002 0204 	and.w	r2, r2, #4
 8007836:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007846:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	4613      	mov	r3, r2
 800786e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_SPI_Transmit+0x22>
 800787e:	2302      	movs	r3, #2
 8007880:	e126      	b.n	8007ad0 <HAL_SPI_Transmit+0x270>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788a:	f7fd f9e3 	bl	8004c54 <HAL_GetTick>
 800788e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	d002      	beq.n	80078a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
 80078a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078a4:	e10b      	b.n	8007abe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <HAL_SPI_Transmit+0x52>
 80078ac:	88fb      	ldrh	r3, [r7, #6]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d102      	bne.n	80078b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078b6:	e102      	b.n	8007abe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2203      	movs	r2, #3
 80078bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	88fa      	ldrh	r2, [r7, #6]
 80078d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078fe:	d10f      	bne.n	8007920 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800790e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800791e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792a:	2b40      	cmp	r3, #64	; 0x40
 800792c:	d007      	beq.n	800793e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800793c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007946:	d14b      	bne.n	80079e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <HAL_SPI_Transmit+0xf6>
 8007950:	8afb      	ldrh	r3, [r7, #22]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d13e      	bne.n	80079d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	881a      	ldrh	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	1c9a      	adds	r2, r3, #2
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	b29a      	uxth	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800797a:	e02b      	b.n	80079d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b02      	cmp	r3, #2
 8007988:	d112      	bne.n	80079b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	881a      	ldrh	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	1c9a      	adds	r2, r3, #2
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	3b01      	subs	r3, #1
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80079ae:	e011      	b.n	80079d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079b0:	f7fd f950 	bl	8004c54 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d803      	bhi.n	80079c8 <HAL_SPI_Transmit+0x168>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d102      	bne.n	80079ce <HAL_SPI_Transmit+0x16e>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80079d2:	e074      	b.n	8007abe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1ce      	bne.n	800797c <HAL_SPI_Transmit+0x11c>
 80079de:	e04c      	b.n	8007a7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_SPI_Transmit+0x18e>
 80079e8:	8afb      	ldrh	r3, [r7, #22]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d140      	bne.n	8007a70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a14:	e02c      	b.n	8007a70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d113      	bne.n	8007a4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	330c      	adds	r3, #12
 8007a2e:	7812      	ldrb	r2, [r2, #0]
 8007a30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a4a:	e011      	b.n	8007a70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a4c:	f7fd f902 	bl	8004c54 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	683a      	ldr	r2, [r7, #0]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d803      	bhi.n	8007a64 <HAL_SPI_Transmit+0x204>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d102      	bne.n	8007a6a <HAL_SPI_Transmit+0x20a>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d102      	bne.n	8007a70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a6e:	e026      	b.n	8007abe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1cd      	bne.n	8007a16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fbb8 	bl	80081f4 <SPI_EndRxTxTransaction>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d002      	beq.n	8007a90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	613b      	str	r3, [r7, #16]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	613b      	str	r3, [r7, #16]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e000      	b.n	8007abe <HAL_SPI_Transmit+0x25e>
  }

error:
 8007abc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ace:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3720      	adds	r7, #32
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af4:	d112      	bne.n	8007b1c <HAL_SPI_Receive+0x44>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10e      	bne.n	8007b1c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2204      	movs	r2, #4
 8007b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b06:	88fa      	ldrh	r2, [r7, #6]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f8f1 	bl	8007cfa <HAL_SPI_TransmitReceive>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	e0ea      	b.n	8007cf2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_SPI_Receive+0x52>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e0e3      	b.n	8007cf2 <HAL_SPI_Receive+0x21a>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b32:	f7fd f88f 	bl	8004c54 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d002      	beq.n	8007b4a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007b44:	2302      	movs	r3, #2
 8007b46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b48:	e0ca      	b.n	8007ce0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_SPI_Receive+0x7e>
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b5a:	e0c1      	b.n	8007ce0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2204      	movs	r2, #4
 8007b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	88fa      	ldrh	r2, [r7, #6]
 8007b7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba2:	d10f      	bne.n	8007bc4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007bc2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d007      	beq.n	8007be2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d162      	bne.n	8007cb0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bea:	e02e      	b.n	8007c4a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d115      	bne.n	8007c26 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f103 020c 	add.w	r2, r3, #12
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c24:	e011      	b.n	8007c4a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c26:	f7fd f815 	bl	8004c54 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d803      	bhi.n	8007c3e <HAL_SPI_Receive+0x166>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d102      	bne.n	8007c44 <HAL_SPI_Receive+0x16c>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c48:	e04a      	b.n	8007ce0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1cb      	bne.n	8007bec <HAL_SPI_Receive+0x114>
 8007c54:	e031      	b.n	8007cba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d113      	bne.n	8007c8c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68da      	ldr	r2, [r3, #12]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	b292      	uxth	r2, r2
 8007c70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	1c9a      	adds	r2, r3, #2
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c8a:	e011      	b.n	8007cb0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8c:	f7fc ffe2 	bl	8004c54 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d803      	bhi.n	8007ca4 <HAL_SPI_Receive+0x1cc>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d102      	bne.n	8007caa <HAL_SPI_Receive+0x1d2>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007cae:	e017      	b.n	8007ce0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1cd      	bne.n	8007c56 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fa46 	bl	8008150 <SPI_EndRxTransaction>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
 8007cdc:	e000      	b.n	8007ce0 <HAL_SPI_Receive+0x208>
  }

error :
 8007cde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b08c      	sub	sp, #48	; 0x30
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
 8007d06:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_SPI_TransmitReceive+0x26>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e18a      	b.n	8008036 <HAL_SPI_TransmitReceive+0x33c>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d28:	f7fc ff94 	bl	8004c54 <HAL_GetTick>
 8007d2c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d3e:	887b      	ldrh	r3, [r7, #2]
 8007d40:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d00f      	beq.n	8007d6a <HAL_SPI_TransmitReceive+0x70>
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d50:	d107      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x68>
 8007d5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d003      	beq.n	8007d6a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d62:	2302      	movs	r3, #2
 8007d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d68:	e15b      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d005      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x82>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <HAL_SPI_TransmitReceive+0x82>
 8007d76:	887b      	ldrh	r3, [r7, #2]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d82:	e14e      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d003      	beq.n	8007d98 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2205      	movs	r2, #5
 8007d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	887a      	ldrh	r2, [r7, #2]
 8007da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	887a      	ldrh	r2, [r7, #2]
 8007dae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	887a      	ldrh	r2, [r7, #2]
 8007dba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	887a      	ldrh	r2, [r7, #2]
 8007dc0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd8:	2b40      	cmp	r3, #64	; 0x40
 8007dda:	d007      	beq.n	8007dec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007df4:	d178      	bne.n	8007ee8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <HAL_SPI_TransmitReceive+0x10a>
 8007dfe:	8b7b      	ldrh	r3, [r7, #26]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d166      	bne.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	881a      	ldrh	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	1c9a      	adds	r2, r3, #2
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e28:	e053      	b.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d11b      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x176>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d016      	beq.n	8007e70 <HAL_SPI_TransmitReceive+0x176>
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d113      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4c:	881a      	ldrh	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	1c9a      	adds	r2, r3, #2
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d119      	bne.n	8007eb2 <HAL_SPI_TransmitReceive+0x1b8>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d014      	beq.n	8007eb2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e92:	b292      	uxth	r2, r2
 8007e94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	1c9a      	adds	r2, r3, #2
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007eb2:	f7fc fecf 	bl	8004c54 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d807      	bhi.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
 8007ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d003      	beq.n	8007ed2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ed0:	e0a7      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1a6      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x130>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1a1      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x130>
 8007ee6:	e07c      	b.n	8007fe2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_SPI_TransmitReceive+0x1fc>
 8007ef0:	8b7b      	ldrh	r3, [r7, #26]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d16b      	bne.n	8007fce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1c:	e057      	b.n	8007fce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d11c      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x26c>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d017      	beq.n	8007f66 <HAL_SPI_TransmitReceive+0x26c>
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d114      	bne.n	8007f66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d119      	bne.n	8007fa8 <HAL_SPI_TransmitReceive+0x2ae>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d014      	beq.n	8007fa8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	1c5a      	adds	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fa8:	f7fc fe54 	bl	8004c54 <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d803      	bhi.n	8007fc0 <HAL_SPI_TransmitReceive+0x2c6>
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbe:	d102      	bne.n	8007fc6 <HAL_SPI_TransmitReceive+0x2cc>
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fcc:	e029      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1a2      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x224>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d19d      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f904 	bl	80081f4 <SPI_EndRxTxTransaction>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d006      	beq.n	8008000 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ffe:	e010      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10b      	bne.n	8008020 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	617b      	str	r3, [r7, #20]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	e000      	b.n	8008022 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008036:	4618      	mov	r0, r3
 8008038:	3730      	adds	r7, #48	; 0x30
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	4613      	mov	r3, r2
 800804e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008050:	f7fc fe00 	bl	8004c54 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	4413      	add	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008060:	f7fc fdf8 	bl	8004c54 <HAL_GetTick>
 8008064:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008066:	4b39      	ldr	r3, [pc, #228]	; (800814c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	015b      	lsls	r3, r3, #5
 800806c:	0d1b      	lsrs	r3, r3, #20
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	fb02 f303 	mul.w	r3, r2, r3
 8008074:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008076:	e054      	b.n	8008122 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d050      	beq.n	8008122 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008080:	f7fc fde8 	bl	8004c54 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	429a      	cmp	r2, r3
 800808e:	d902      	bls.n	8008096 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d13d      	bne.n	8008112 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080ae:	d111      	bne.n	80080d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b8:	d004      	beq.n	80080c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c2:	d107      	bne.n	80080d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080dc:	d10f      	bne.n	80080fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e017      	b.n	8008142 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	3b01      	subs	r3, #1
 8008120:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	4013      	ands	r3, r2
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	bf0c      	ite	eq
 8008132:	2301      	moveq	r3, #1
 8008134:	2300      	movne	r3, #0
 8008136:	b2db      	uxtb	r3, r3
 8008138:	461a      	mov	r2, r3
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	429a      	cmp	r2, r3
 800813e:	d19b      	bne.n	8008078 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3720      	adds	r7, #32
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000038 	.word	0x20000038

08008150 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af02      	add	r7, sp, #8
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008164:	d111      	bne.n	800818a <SPI_EndRxTransaction+0x3a>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816e:	d004      	beq.n	800817a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d107      	bne.n	800818a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008188:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008192:	d117      	bne.n	80081c4 <SPI_EndRxTransaction+0x74>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819c:	d112      	bne.n	80081c4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	2101      	movs	r1, #1
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff ff49 	bl	8008040 <SPI_WaitFlagStateUntilTimeout>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01a      	beq.n	80081ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b8:	f043 0220 	orr.w	r2, r3, #32
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e013      	b.n	80081ec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2180      	movs	r1, #128	; 0x80
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff ff36 	bl	8008040 <SPI_WaitFlagStateUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081de:	f043 0220 	orr.w	r2, r3, #32
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e000      	b.n	80081ec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af02      	add	r7, sp, #8
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2200      	movs	r2, #0
 8008208:	2180      	movs	r1, #128	; 0x80
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff ff18 	bl	8008040 <SPI_WaitFlagStateUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821a:	f043 0220 	orr.w	r2, r3, #32
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e000      	b.n	8008228 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e041      	b.n	80082c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fc fa50 	bl	80046fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3304      	adds	r3, #4
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	f000 fc28 	bl	8008ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
	...

080082d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d001      	beq.n	80082e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e03a      	b.n	800835e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a18      	ldr	r2, [pc, #96]	; (8008368 <HAL_TIM_Base_Start_IT+0x98>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d00e      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x58>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008312:	d009      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x58>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a14      	ldr	r2, [pc, #80]	; (800836c <HAL_TIM_Base_Start_IT+0x9c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d004      	beq.n	8008328 <HAL_TIM_Base_Start_IT+0x58>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a13      	ldr	r2, [pc, #76]	; (8008370 <HAL_TIM_Base_Start_IT+0xa0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d111      	bne.n	800834c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b06      	cmp	r3, #6
 8008338:	d010      	beq.n	800835c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0201 	orr.w	r2, r2, #1
 8008348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800834a:	e007      	b.n	800835c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	bc80      	pop	{r7}
 8008366:	4770      	bx	lr
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800

08008374 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e041      	b.n	800840a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b00      	cmp	r3, #0
 8008390:	d106      	bne.n	80083a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f839 	bl	8008412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4619      	mov	r1, r3
 80083b2:	4610      	mov	r0, r2
 80083b4:	f000 fb86 	bl	8008ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008412:	b480      	push	{r7}
 8008414:	b083      	sub	sp, #12
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d109      	bne.n	8008448 <HAL_TIM_PWM_Start+0x24>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b01      	cmp	r3, #1
 800843e:	bf14      	ite	ne
 8008440:	2301      	movne	r3, #1
 8008442:	2300      	moveq	r3, #0
 8008444:	b2db      	uxtb	r3, r3
 8008446:	e022      	b.n	800848e <HAL_TIM_PWM_Start+0x6a>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b04      	cmp	r3, #4
 800844c:	d109      	bne.n	8008462 <HAL_TIM_PWM_Start+0x3e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b01      	cmp	r3, #1
 8008458:	bf14      	ite	ne
 800845a:	2301      	movne	r3, #1
 800845c:	2300      	moveq	r3, #0
 800845e:	b2db      	uxtb	r3, r3
 8008460:	e015      	b.n	800848e <HAL_TIM_PWM_Start+0x6a>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d109      	bne.n	800847c <HAL_TIM_PWM_Start+0x58>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	bf14      	ite	ne
 8008474:	2301      	movne	r3, #1
 8008476:	2300      	moveq	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	e008      	b.n	800848e <HAL_TIM_PWM_Start+0x6a>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b01      	cmp	r3, #1
 8008486:	bf14      	ite	ne
 8008488:	2301      	movne	r3, #1
 800848a:	2300      	moveq	r3, #0
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e05e      	b.n	8008554 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d104      	bne.n	80084a6 <HAL_TIM_PWM_Start+0x82>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084a4:	e013      	b.n	80084ce <HAL_TIM_PWM_Start+0xaa>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d104      	bne.n	80084b6 <HAL_TIM_PWM_Start+0x92>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084b4:	e00b      	b.n	80084ce <HAL_TIM_PWM_Start+0xaa>
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d104      	bne.n	80084c6 <HAL_TIM_PWM_Start+0xa2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084c4:	e003      	b.n	80084ce <HAL_TIM_PWM_Start+0xaa>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2202      	movs	r2, #2
 80084ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2201      	movs	r2, #1
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fd74 	bl	8008fc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a1e      	ldr	r2, [pc, #120]	; (800855c <HAL_TIM_PWM_Start+0x138>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d107      	bne.n	80084f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a18      	ldr	r2, [pc, #96]	; (800855c <HAL_TIM_PWM_Start+0x138>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00e      	beq.n	800851e <HAL_TIM_PWM_Start+0xfa>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008508:	d009      	beq.n	800851e <HAL_TIM_PWM_Start+0xfa>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a14      	ldr	r2, [pc, #80]	; (8008560 <HAL_TIM_PWM_Start+0x13c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d004      	beq.n	800851e <HAL_TIM_PWM_Start+0xfa>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a12      	ldr	r2, [pc, #72]	; (8008564 <HAL_TIM_PWM_Start+0x140>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d111      	bne.n	8008542 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b06      	cmp	r3, #6
 800852e:	d010      	beq.n	8008552 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008540:	e007      	b.n	8008552 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f042 0201 	orr.w	r2, r2, #1
 8008550:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40012c00 	.word	0x40012c00
 8008560:	40000400 	.word	0x40000400
 8008564:	40000800 	.word	0x40000800

08008568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b02      	cmp	r3, #2
 800857c:	d122      	bne.n	80085c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b02      	cmp	r3, #2
 800858a:	d11b      	bne.n	80085c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f06f 0202 	mvn.w	r2, #2
 8008594:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fa6f 	bl	8008a8e <HAL_TIM_IC_CaptureCallback>
 80085b0:	e005      	b.n	80085be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa62 	bl	8008a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fa71 	bl	8008aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d122      	bne.n	8008618 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b04      	cmp	r3, #4
 80085de:	d11b      	bne.n	8008618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f06f 0204 	mvn.w	r2, #4
 80085e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fa45 	bl	8008a8e <HAL_TIM_IC_CaptureCallback>
 8008604:	e005      	b.n	8008612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fa38 	bl	8008a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fa47 	bl	8008aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0308 	and.w	r3, r3, #8
 8008622:	2b08      	cmp	r3, #8
 8008624:	d122      	bne.n	800866c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b08      	cmp	r3, #8
 8008632:	d11b      	bne.n	800866c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0208 	mvn.w	r2, #8
 800863c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2204      	movs	r2, #4
 8008642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d003      	beq.n	800865a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa1b 	bl	8008a8e <HAL_TIM_IC_CaptureCallback>
 8008658:	e005      	b.n	8008666 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa0e 	bl	8008a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fa1d 	bl	8008aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b10      	cmp	r3, #16
 8008678:	d122      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b10      	cmp	r3, #16
 8008686:	d11b      	bne.n	80086c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f06f 0210 	mvn.w	r2, #16
 8008690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2208      	movs	r2, #8
 8008696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69db      	ldr	r3, [r3, #28]
 800869e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9f1 	bl	8008a8e <HAL_TIM_IC_CaptureCallback>
 80086ac:	e005      	b.n	80086ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9e4 	bl	8008a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f9f3 	bl	8008aa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d10e      	bne.n	80086ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d107      	bne.n	80086ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0201 	mvn.w	r2, #1
 80086e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f7fa fde6 	bl	80032b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f6:	2b80      	cmp	r3, #128	; 0x80
 80086f8:	d10e      	bne.n	8008718 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008704:	2b80      	cmp	r3, #128	; 0x80
 8008706:	d107      	bne.n	8008718 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fce1 	bl	80090da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d10e      	bne.n	8008744 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b40      	cmp	r3, #64	; 0x40
 8008732:	d107      	bne.n	8008744 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9b7 	bl	8008ab2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b20      	cmp	r3, #32
 8008750:	d10e      	bne.n	8008770 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b20      	cmp	r3, #32
 800875e:	d107      	bne.n	8008770 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f06f 0220 	mvn.w	r2, #32
 8008768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fcac 	bl	80090c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008770:	bf00      	nop
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800878e:	2302      	movs	r3, #2
 8008790:	e0ac      	b.n	80088ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b0c      	cmp	r3, #12
 800879e:	f200 809f 	bhi.w	80088e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80087a2:	a201      	add	r2, pc, #4	; (adr r2, 80087a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80087a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a8:	080087dd 	.word	0x080087dd
 80087ac:	080088e1 	.word	0x080088e1
 80087b0:	080088e1 	.word	0x080088e1
 80087b4:	080088e1 	.word	0x080088e1
 80087b8:	0800881d 	.word	0x0800881d
 80087bc:	080088e1 	.word	0x080088e1
 80087c0:	080088e1 	.word	0x080088e1
 80087c4:	080088e1 	.word	0x080088e1
 80087c8:	0800885f 	.word	0x0800885f
 80087cc:	080088e1 	.word	0x080088e1
 80087d0:	080088e1 	.word	0x080088e1
 80087d4:	080088e1 	.word	0x080088e1
 80087d8:	0800889f 	.word	0x0800889f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 f9d0 	bl	8008b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	699a      	ldr	r2, [r3, #24]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f042 0208 	orr.w	r2, r2, #8
 80087f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f022 0204 	bic.w	r2, r2, #4
 8008806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6999      	ldr	r1, [r3, #24]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	619a      	str	r2, [r3, #24]
      break;
 800881a:	e062      	b.n	80088e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 fa16 	bl	8008c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699a      	ldr	r2, [r3, #24]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6999      	ldr	r1, [r3, #24]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	021a      	lsls	r2, r3, #8
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	619a      	str	r2, [r3, #24]
      break;
 800885c:	e041      	b.n	80088e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fa5f 	bl	8008d28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69da      	ldr	r2, [r3, #28]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0208 	orr.w	r2, r2, #8
 8008878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69da      	ldr	r2, [r3, #28]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0204 	bic.w	r2, r2, #4
 8008888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69d9      	ldr	r1, [r3, #28]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	61da      	str	r2, [r3, #28]
      break;
 800889c:	e021      	b.n	80088e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 faa9 	bl	8008dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	69da      	ldr	r2, [r3, #28]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69d9      	ldr	r1, [r3, #28]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	021a      	lsls	r2, r3, #8
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	430a      	orrs	r2, r1
 80088dc:	61da      	str	r2, [r3, #28]
      break;
 80088de:	e000      	b.n	80088e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80088e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_TIM_ConfigClockSource+0x18>
 8008908:	2302      	movs	r3, #2
 800890a:	e0b3      	b.n	8008a74 <HAL_TIM_ConfigClockSource+0x180>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800892a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008944:	d03e      	beq.n	80089c4 <HAL_TIM_ConfigClockSource+0xd0>
 8008946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894a:	f200 8087 	bhi.w	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008952:	f000 8085 	beq.w	8008a60 <HAL_TIM_ConfigClockSource+0x16c>
 8008956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800895a:	d87f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 800895c:	2b70      	cmp	r3, #112	; 0x70
 800895e:	d01a      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0xa2>
 8008960:	2b70      	cmp	r3, #112	; 0x70
 8008962:	d87b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 8008964:	2b60      	cmp	r3, #96	; 0x60
 8008966:	d050      	beq.n	8008a0a <HAL_TIM_ConfigClockSource+0x116>
 8008968:	2b60      	cmp	r3, #96	; 0x60
 800896a:	d877      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 800896c:	2b50      	cmp	r3, #80	; 0x50
 800896e:	d03c      	beq.n	80089ea <HAL_TIM_ConfigClockSource+0xf6>
 8008970:	2b50      	cmp	r3, #80	; 0x50
 8008972:	d873      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 8008974:	2b40      	cmp	r3, #64	; 0x40
 8008976:	d058      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x136>
 8008978:	2b40      	cmp	r3, #64	; 0x40
 800897a:	d86f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 800897c:	2b30      	cmp	r3, #48	; 0x30
 800897e:	d064      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x156>
 8008980:	2b30      	cmp	r3, #48	; 0x30
 8008982:	d86b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 8008984:	2b20      	cmp	r3, #32
 8008986:	d060      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x156>
 8008988:	2b20      	cmp	r3, #32
 800898a:	d867      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d05c      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x156>
 8008990:	2b10      	cmp	r3, #16
 8008992:	d05a      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008994:	e062      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6899      	ldr	r1, [r3, #8]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f000 faee 	bl	8008f86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	609a      	str	r2, [r3, #8]
      break;
 80089c2:	e04e      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	6899      	ldr	r1, [r3, #8]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f000 fad7 	bl	8008f86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089e6:	609a      	str	r2, [r3, #8]
      break;
 80089e8:	e03b      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6859      	ldr	r1, [r3, #4]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	461a      	mov	r2, r3
 80089f8:	f000 fa4e 	bl	8008e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2150      	movs	r1, #80	; 0x50
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 faa5 	bl	8008f52 <TIM_ITRx_SetConfig>
      break;
 8008a08:	e02b      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6859      	ldr	r1, [r3, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f000 fa6c 	bl	8008ef4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2160      	movs	r1, #96	; 0x60
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fa95 	bl	8008f52 <TIM_ITRx_SetConfig>
      break;
 8008a28:	e01b      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6859      	ldr	r1, [r3, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	461a      	mov	r2, r3
 8008a38:	f000 fa2e 	bl	8008e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2140      	movs	r1, #64	; 0x40
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fa85 	bl	8008f52 <TIM_ITRx_SetConfig>
      break;
 8008a48:	e00b      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f000 fa7c 	bl	8008f52 <TIM_ITRx_SetConfig>
        break;
 8008a5a:	e002      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a5c:	bf00      	nop
 8008a5e:	e000      	b.n	8008a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008a60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr

08008a8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bc80      	pop	{r7}
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bc80      	pop	{r7}
 8008ab0:	4770      	bx	lr

08008ab2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr

08008ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a29      	ldr	r2, [pc, #164]	; (8008b7c <TIM_Base_SetConfig+0xb8>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00b      	beq.n	8008af4 <TIM_Base_SetConfig+0x30>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae2:	d007      	beq.n	8008af4 <TIM_Base_SetConfig+0x30>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <TIM_Base_SetConfig+0xbc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_Base_SetConfig+0x30>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a25      	ldr	r2, [pc, #148]	; (8008b84 <TIM_Base_SetConfig+0xc0>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d108      	bne.n	8008b06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a1c      	ldr	r2, [pc, #112]	; (8008b7c <TIM_Base_SetConfig+0xb8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d00b      	beq.n	8008b26 <TIM_Base_SetConfig+0x62>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b14:	d007      	beq.n	8008b26 <TIM_Base_SetConfig+0x62>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a19      	ldr	r2, [pc, #100]	; (8008b80 <TIM_Base_SetConfig+0xbc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d003      	beq.n	8008b26 <TIM_Base_SetConfig+0x62>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a18      	ldr	r2, [pc, #96]	; (8008b84 <TIM_Base_SetConfig+0xc0>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d108      	bne.n	8008b38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a07      	ldr	r2, [pc, #28]	; (8008b7c <TIM_Base_SetConfig+0xb8>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d103      	bne.n	8008b6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	615a      	str	r2, [r3, #20]
}
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	40000400 	.word	0x40000400
 8008b84:	40000800 	.word	0x40000800

08008b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f023 0201 	bic.w	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f023 0302 	bic.w	r3, r3, #2
 8008bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	697a      	ldr	r2, [r7, #20]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a1c      	ldr	r2, [pc, #112]	; (8008c50 <TIM_OC1_SetConfig+0xc8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d10c      	bne.n	8008bfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	f023 0308 	bic.w	r3, r3, #8
 8008bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f023 0304 	bic.w	r3, r3, #4
 8008bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a13      	ldr	r2, [pc, #76]	; (8008c50 <TIM_OC1_SetConfig+0xc8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d111      	bne.n	8008c2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	621a      	str	r2, [r3, #32]
}
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bc80      	pop	{r7}
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	40012c00 	.word	0x40012c00

08008c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f023 0210 	bic.w	r2, r3, #16
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f023 0320 	bic.w	r3, r3, #32
 8008c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <TIM_OC2_SetConfig+0xd0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d10d      	bne.n	8008cd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	011b      	lsls	r3, r3, #4
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a14      	ldr	r2, [pc, #80]	; (8008d24 <TIM_OC2_SetConfig+0xd0>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d113      	bne.n	8008d00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	621a      	str	r2, [r3, #32]
}
 8008d1a:	bf00      	nop
 8008d1c:	371c      	adds	r7, #28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr
 8008d24:	40012c00 	.word	0x40012c00

08008d28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1d      	ldr	r2, [pc, #116]	; (8008df8 <TIM_OC3_SetConfig+0xd0>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d10d      	bne.n	8008da2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	697a      	ldr	r2, [r7, #20]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a14      	ldr	r2, [pc, #80]	; (8008df8 <TIM_OC3_SetConfig+0xd0>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d113      	bne.n	8008dd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	621a      	str	r2, [r3, #32]
}
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bc80      	pop	{r7}
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40012c00 	.word	0x40012c00

08008dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b087      	sub	sp, #28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	69db      	ldr	r3, [r3, #28]
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	021b      	lsls	r3, r3, #8
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	031b      	lsls	r3, r3, #12
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a0f      	ldr	r2, [pc, #60]	; (8008e94 <TIM_OC4_SetConfig+0x98>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d109      	bne.n	8008e70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	019b      	lsls	r3, r3, #6
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	621a      	str	r2, [r3, #32]
}
 8008e8a:	bf00      	nop
 8008e8c:	371c      	adds	r7, #28
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr
 8008e94:	40012c00 	.word	0x40012c00

08008e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b087      	sub	sp, #28
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	f023 0201 	bic.w	r2, r3, #1
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f023 030a 	bic.w	r3, r3, #10
 8008ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	621a      	str	r2, [r3, #32]
}
 8008eea:	bf00      	nop
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f023 0210 	bic.w	r2, r3, #16
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	031b      	lsls	r3, r3, #12
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	621a      	str	r2, [r3, #32]
}
 8008f48:	bf00      	nop
 8008f4a:	371c      	adds	r7, #28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr

08008f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f6a:	683a      	ldr	r2, [r7, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f043 0307 	orr.w	r3, r3, #7
 8008f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	609a      	str	r2, [r3, #8]
}
 8008f7c:	bf00      	nop
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bc80      	pop	{r7}
 8008f84:	4770      	bx	lr

08008f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b087      	sub	sp, #28
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	60f8      	str	r0, [r7, #12]
 8008f8e:	60b9      	str	r1, [r7, #8]
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	021a      	lsls	r2, r3, #8
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	431a      	orrs	r2, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	609a      	str	r2, [r3, #8]
}
 8008fba:	bf00      	nop
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f003 031f 	and.w	r3, r3, #31
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a1a      	ldr	r2, [r3, #32]
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	401a      	ands	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6a1a      	ldr	r2, [r3, #32]
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f003 031f 	and.w	r3, r3, #31
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	621a      	str	r2, [r3, #32]
}
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	bc80      	pop	{r7}
 800900a:	4770      	bx	lr

0800900c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009020:	2302      	movs	r3, #2
 8009022:	e046      	b.n	80090b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800904a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a16      	ldr	r2, [pc, #88]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00e      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009070:	d009      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a12      	ldr	r2, [pc, #72]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d004      	beq.n	8009086 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a10      	ldr	r2, [pc, #64]	; (80090c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d10c      	bne.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800908c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	4313      	orrs	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr
 80090bc:	40012c00 	.word	0x40012c00
 80090c0:	40000400 	.word	0x40000400
 80090c4:	40000800 	.word	0x40000800

080090c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr

080090da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bc80      	pop	{r7}
 80090ea:	4770      	bx	lr

080090ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	e03f      	b.n	800917e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7fb fbaa 	bl	800486c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2224      	movs	r2, #36	; 0x24
 800911c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800912e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f905 	bl	8009340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009144:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	695a      	ldr	r2, [r3, #20]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009154:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68da      	ldr	r2, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009164:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2220      	movs	r2, #32
 8009178:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b08a      	sub	sp, #40	; 0x28
 800918a:	af02      	add	r7, sp, #8
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	603b      	str	r3, [r7, #0]
 8009192:	4613      	mov	r3, r2
 8009194:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009196:	2300      	movs	r3, #0
 8009198:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	d17c      	bne.n	80092a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <HAL_UART_Transmit+0x2c>
 80091ac:	88fb      	ldrh	r3, [r7, #6]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e075      	b.n	80092a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d101      	bne.n	80091c4 <HAL_UART_Transmit+0x3e>
 80091c0:	2302      	movs	r3, #2
 80091c2:	e06e      	b.n	80092a2 <HAL_UART_Transmit+0x11c>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2221      	movs	r2, #33	; 0x21
 80091d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80091da:	f7fb fd3b 	bl	8004c54 <HAL_GetTick>
 80091de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	88fa      	ldrh	r2, [r7, #6]
 80091e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	88fa      	ldrh	r2, [r7, #6]
 80091ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f4:	d108      	bne.n	8009208 <HAL_UART_Transmit+0x82>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	e003      	b.n	8009210 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800920c:	2300      	movs	r3, #0
 800920e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009218:	e02a      	b.n	8009270 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	2200      	movs	r2, #0
 8009222:	2180      	movs	r1, #128	; 0x80
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f840 	bl	80092aa <UART_WaitOnFlagUntilTimeout>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e036      	b.n	80092a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10b      	bne.n	8009252 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	461a      	mov	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009248:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	3302      	adds	r3, #2
 800924e:	61bb      	str	r3, [r7, #24]
 8009250:	e007      	b.n	8009262 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	3301      	adds	r3, #1
 8009260:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009266:	b29b      	uxth	r3, r3
 8009268:	3b01      	subs	r3, #1
 800926a:	b29a      	uxth	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1cf      	bne.n	800921a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2200      	movs	r2, #0
 8009282:	2140      	movs	r1, #64	; 0x40
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f810 	bl	80092aa <UART_WaitOnFlagUntilTimeout>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e006      	b.n	80092a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2220      	movs	r2, #32
 8009298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	e000      	b.n	80092a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80092a0:	2302      	movs	r3, #2
  }
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3720      	adds	r7, #32
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	60f8      	str	r0, [r7, #12]
 80092b2:	60b9      	str	r1, [r7, #8]
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	4613      	mov	r3, r2
 80092b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ba:	e02c      	b.n	8009316 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c2:	d028      	beq.n	8009316 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d007      	beq.n	80092da <UART_WaitOnFlagUntilTimeout+0x30>
 80092ca:	f7fb fcc3 	bl	8004c54 <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d21d      	bcs.n	8009316 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695a      	ldr	r2, [r3, #20]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0201 	bic.w	r2, r2, #1
 80092f8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2220      	movs	r2, #32
 80092fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e00f      	b.n	8009336 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4013      	ands	r3, r2
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	429a      	cmp	r2, r3
 8009324:	bf0c      	ite	eq
 8009326:	2301      	moveq	r3, #1
 8009328:	2300      	movne	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	429a      	cmp	r2, r3
 8009332:	d0c3      	beq.n	80092bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	4313      	orrs	r3, r2
 800936e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800937a:	f023 030c 	bic.w	r3, r3, #12
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	68b9      	ldr	r1, [r7, #8]
 8009384:	430b      	orrs	r3, r1
 8009386:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699a      	ldr	r2, [r3, #24]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a2c      	ldr	r2, [pc, #176]	; (8009454 <UART_SetConfig+0x114>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d103      	bne.n	80093b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80093a8:	f7fe f8ee 	bl	8007588 <HAL_RCC_GetPCLK2Freq>
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	e002      	b.n	80093b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80093b0:	f7fe f8d6 	bl	8007560 <HAL_RCC_GetPCLK1Freq>
 80093b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009a      	lsls	r2, r3, #2
 80093c0:	441a      	add	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093cc:	4a22      	ldr	r2, [pc, #136]	; (8009458 <UART_SetConfig+0x118>)
 80093ce:	fba2 2303 	umull	r2, r3, r2, r3
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	0119      	lsls	r1, r3, #4
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009a      	lsls	r2, r3, #2
 80093e0:	441a      	add	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80093ec:	4b1a      	ldr	r3, [pc, #104]	; (8009458 <UART_SetConfig+0x118>)
 80093ee:	fba3 0302 	umull	r0, r3, r3, r2
 80093f2:	095b      	lsrs	r3, r3, #5
 80093f4:	2064      	movs	r0, #100	; 0x64
 80093f6:	fb00 f303 	mul.w	r3, r0, r3
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	011b      	lsls	r3, r3, #4
 80093fe:	3332      	adds	r3, #50	; 0x32
 8009400:	4a15      	ldr	r2, [pc, #84]	; (8009458 <UART_SetConfig+0x118>)
 8009402:	fba2 2303 	umull	r2, r3, r2, r3
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800940c:	4419      	add	r1, r3
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009a      	lsls	r2, r3, #2
 8009418:	441a      	add	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	fbb2 f2f3 	udiv	r2, r2, r3
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <UART_SetConfig+0x118>)
 8009426:	fba3 0302 	umull	r0, r3, r3, r2
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	2064      	movs	r0, #100	; 0x64
 800942e:	fb00 f303 	mul.w	r3, r0, r3
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	3332      	adds	r3, #50	; 0x32
 8009438:	4a07      	ldr	r2, [pc, #28]	; (8009458 <UART_SetConfig+0x118>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	f003 020f 	and.w	r2, r3, #15
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	440a      	add	r2, r1
 800944a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	40013800 	.word	0x40013800
 8009458:	51eb851f 	.word	0x51eb851f

0800945c <__errno>:
 800945c:	4b01      	ldr	r3, [pc, #4]	; (8009464 <__errno+0x8>)
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	20000044 	.word	0x20000044

08009468 <__libc_init_array>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	2600      	movs	r6, #0
 800946c:	4d0c      	ldr	r5, [pc, #48]	; (80094a0 <__libc_init_array+0x38>)
 800946e:	4c0d      	ldr	r4, [pc, #52]	; (80094a4 <__libc_init_array+0x3c>)
 8009470:	1b64      	subs	r4, r4, r5
 8009472:	10a4      	asrs	r4, r4, #2
 8009474:	42a6      	cmp	r6, r4
 8009476:	d109      	bne.n	800948c <__libc_init_array+0x24>
 8009478:	f003 f92a 	bl	800c6d0 <_init>
 800947c:	2600      	movs	r6, #0
 800947e:	4d0a      	ldr	r5, [pc, #40]	; (80094a8 <__libc_init_array+0x40>)
 8009480:	4c0a      	ldr	r4, [pc, #40]	; (80094ac <__libc_init_array+0x44>)
 8009482:	1b64      	subs	r4, r4, r5
 8009484:	10a4      	asrs	r4, r4, #2
 8009486:	42a6      	cmp	r6, r4
 8009488:	d105      	bne.n	8009496 <__libc_init_array+0x2e>
 800948a:	bd70      	pop	{r4, r5, r6, pc}
 800948c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009490:	4798      	blx	r3
 8009492:	3601      	adds	r6, #1
 8009494:	e7ee      	b.n	8009474 <__libc_init_array+0xc>
 8009496:	f855 3b04 	ldr.w	r3, [r5], #4
 800949a:	4798      	blx	r3
 800949c:	3601      	adds	r6, #1
 800949e:	e7f2      	b.n	8009486 <__libc_init_array+0x1e>
 80094a0:	0800d0bc 	.word	0x0800d0bc
 80094a4:	0800d0bc 	.word	0x0800d0bc
 80094a8:	0800d0bc 	.word	0x0800d0bc
 80094ac:	0800d0c0 	.word	0x0800d0c0

080094b0 <memcpy>:
 80094b0:	440a      	add	r2, r1
 80094b2:	4291      	cmp	r1, r2
 80094b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094b8:	d100      	bne.n	80094bc <memcpy+0xc>
 80094ba:	4770      	bx	lr
 80094bc:	b510      	push	{r4, lr}
 80094be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094c2:	4291      	cmp	r1, r2
 80094c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094c8:	d1f9      	bne.n	80094be <memcpy+0xe>
 80094ca:	bd10      	pop	{r4, pc}

080094cc <memset>:
 80094cc:	4603      	mov	r3, r0
 80094ce:	4402      	add	r2, r0
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d100      	bne.n	80094d6 <memset+0xa>
 80094d4:	4770      	bx	lr
 80094d6:	f803 1b01 	strb.w	r1, [r3], #1
 80094da:	e7f9      	b.n	80094d0 <memset+0x4>

080094dc <__cvt>:
 80094dc:	2b00      	cmp	r3, #0
 80094de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e2:	461f      	mov	r7, r3
 80094e4:	bfbb      	ittet	lt
 80094e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80094ea:	461f      	movlt	r7, r3
 80094ec:	2300      	movge	r3, #0
 80094ee:	232d      	movlt	r3, #45	; 0x2d
 80094f0:	b088      	sub	sp, #32
 80094f2:	4614      	mov	r4, r2
 80094f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80094f8:	7013      	strb	r3, [r2, #0]
 80094fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009500:	f023 0820 	bic.w	r8, r3, #32
 8009504:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009508:	d005      	beq.n	8009516 <__cvt+0x3a>
 800950a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800950e:	d100      	bne.n	8009512 <__cvt+0x36>
 8009510:	3501      	adds	r5, #1
 8009512:	2302      	movs	r3, #2
 8009514:	e000      	b.n	8009518 <__cvt+0x3c>
 8009516:	2303      	movs	r3, #3
 8009518:	aa07      	add	r2, sp, #28
 800951a:	9204      	str	r2, [sp, #16]
 800951c:	aa06      	add	r2, sp, #24
 800951e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009522:	e9cd 3500 	strd	r3, r5, [sp]
 8009526:	4622      	mov	r2, r4
 8009528:	463b      	mov	r3, r7
 800952a:	f000 fce5 	bl	8009ef8 <_dtoa_r>
 800952e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009532:	4606      	mov	r6, r0
 8009534:	d102      	bne.n	800953c <__cvt+0x60>
 8009536:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009538:	07db      	lsls	r3, r3, #31
 800953a:	d522      	bpl.n	8009582 <__cvt+0xa6>
 800953c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009540:	eb06 0905 	add.w	r9, r6, r5
 8009544:	d110      	bne.n	8009568 <__cvt+0x8c>
 8009546:	7833      	ldrb	r3, [r6, #0]
 8009548:	2b30      	cmp	r3, #48	; 0x30
 800954a:	d10a      	bne.n	8009562 <__cvt+0x86>
 800954c:	2200      	movs	r2, #0
 800954e:	2300      	movs	r3, #0
 8009550:	4620      	mov	r0, r4
 8009552:	4639      	mov	r1, r7
 8009554:	f7f7 fa28 	bl	80009a8 <__aeabi_dcmpeq>
 8009558:	b918      	cbnz	r0, 8009562 <__cvt+0x86>
 800955a:	f1c5 0501 	rsb	r5, r5, #1
 800955e:	f8ca 5000 	str.w	r5, [sl]
 8009562:	f8da 3000 	ldr.w	r3, [sl]
 8009566:	4499      	add	r9, r3
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	4620      	mov	r0, r4
 800956e:	4639      	mov	r1, r7
 8009570:	f7f7 fa1a 	bl	80009a8 <__aeabi_dcmpeq>
 8009574:	b108      	cbz	r0, 800957a <__cvt+0x9e>
 8009576:	f8cd 901c 	str.w	r9, [sp, #28]
 800957a:	2230      	movs	r2, #48	; 0x30
 800957c:	9b07      	ldr	r3, [sp, #28]
 800957e:	454b      	cmp	r3, r9
 8009580:	d307      	bcc.n	8009592 <__cvt+0xb6>
 8009582:	4630      	mov	r0, r6
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009588:	1b9b      	subs	r3, r3, r6
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	b008      	add	sp, #32
 800958e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009592:	1c59      	adds	r1, r3, #1
 8009594:	9107      	str	r1, [sp, #28]
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e7f0      	b.n	800957c <__cvt+0xa0>

0800959a <__exponent>:
 800959a:	4603      	mov	r3, r0
 800959c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800959e:	2900      	cmp	r1, #0
 80095a0:	f803 2b02 	strb.w	r2, [r3], #2
 80095a4:	bfb6      	itet	lt
 80095a6:	222d      	movlt	r2, #45	; 0x2d
 80095a8:	222b      	movge	r2, #43	; 0x2b
 80095aa:	4249      	neglt	r1, r1
 80095ac:	2909      	cmp	r1, #9
 80095ae:	7042      	strb	r2, [r0, #1]
 80095b0:	dd2b      	ble.n	800960a <__exponent+0x70>
 80095b2:	f10d 0407 	add.w	r4, sp, #7
 80095b6:	46a4      	mov	ip, r4
 80095b8:	270a      	movs	r7, #10
 80095ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80095be:	460a      	mov	r2, r1
 80095c0:	46a6      	mov	lr, r4
 80095c2:	fb07 1516 	mls	r5, r7, r6, r1
 80095c6:	2a63      	cmp	r2, #99	; 0x63
 80095c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80095cc:	4631      	mov	r1, r6
 80095ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80095d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095d6:	dcf0      	bgt.n	80095ba <__exponent+0x20>
 80095d8:	3130      	adds	r1, #48	; 0x30
 80095da:	f1ae 0502 	sub.w	r5, lr, #2
 80095de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095e2:	4629      	mov	r1, r5
 80095e4:	1c44      	adds	r4, r0, #1
 80095e6:	4561      	cmp	r1, ip
 80095e8:	d30a      	bcc.n	8009600 <__exponent+0x66>
 80095ea:	f10d 0209 	add.w	r2, sp, #9
 80095ee:	eba2 020e 	sub.w	r2, r2, lr
 80095f2:	4565      	cmp	r5, ip
 80095f4:	bf88      	it	hi
 80095f6:	2200      	movhi	r2, #0
 80095f8:	4413      	add	r3, r2
 80095fa:	1a18      	subs	r0, r3, r0
 80095fc:	b003      	add	sp, #12
 80095fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009600:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009604:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009608:	e7ed      	b.n	80095e6 <__exponent+0x4c>
 800960a:	2330      	movs	r3, #48	; 0x30
 800960c:	3130      	adds	r1, #48	; 0x30
 800960e:	7083      	strb	r3, [r0, #2]
 8009610:	70c1      	strb	r1, [r0, #3]
 8009612:	1d03      	adds	r3, r0, #4
 8009614:	e7f1      	b.n	80095fa <__exponent+0x60>
	...

08009618 <_printf_float>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	b091      	sub	sp, #68	; 0x44
 800961e:	460c      	mov	r4, r1
 8009620:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009624:	4616      	mov	r6, r2
 8009626:	461f      	mov	r7, r3
 8009628:	4605      	mov	r5, r0
 800962a:	f001 fa53 	bl	800aad4 <_localeconv_r>
 800962e:	6803      	ldr	r3, [r0, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	9309      	str	r3, [sp, #36]	; 0x24
 8009634:	f7f6 fd8c 	bl	8000150 <strlen>
 8009638:	2300      	movs	r3, #0
 800963a:	930e      	str	r3, [sp, #56]	; 0x38
 800963c:	f8d8 3000 	ldr.w	r3, [r8]
 8009640:	900a      	str	r0, [sp, #40]	; 0x28
 8009642:	3307      	adds	r3, #7
 8009644:	f023 0307 	bic.w	r3, r3, #7
 8009648:	f103 0208 	add.w	r2, r3, #8
 800964c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009650:	f8d4 b000 	ldr.w	fp, [r4]
 8009654:	f8c8 2000 	str.w	r2, [r8]
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009660:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009664:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009668:	930b      	str	r3, [sp, #44]	; 0x2c
 800966a:	f04f 32ff 	mov.w	r2, #4294967295
 800966e:	4640      	mov	r0, r8
 8009670:	4b9c      	ldr	r3, [pc, #624]	; (80098e4 <_printf_float+0x2cc>)
 8009672:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009674:	f7f7 f9ca 	bl	8000a0c <__aeabi_dcmpun>
 8009678:	bb70      	cbnz	r0, 80096d8 <_printf_float+0xc0>
 800967a:	f04f 32ff 	mov.w	r2, #4294967295
 800967e:	4640      	mov	r0, r8
 8009680:	4b98      	ldr	r3, [pc, #608]	; (80098e4 <_printf_float+0x2cc>)
 8009682:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009684:	f7f7 f9a4 	bl	80009d0 <__aeabi_dcmple>
 8009688:	bb30      	cbnz	r0, 80096d8 <_printf_float+0xc0>
 800968a:	2200      	movs	r2, #0
 800968c:	2300      	movs	r3, #0
 800968e:	4640      	mov	r0, r8
 8009690:	4651      	mov	r1, sl
 8009692:	f7f7 f993 	bl	80009bc <__aeabi_dcmplt>
 8009696:	b110      	cbz	r0, 800969e <_printf_float+0x86>
 8009698:	232d      	movs	r3, #45	; 0x2d
 800969a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800969e:	4b92      	ldr	r3, [pc, #584]	; (80098e8 <_printf_float+0x2d0>)
 80096a0:	4892      	ldr	r0, [pc, #584]	; (80098ec <_printf_float+0x2d4>)
 80096a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80096a6:	bf94      	ite	ls
 80096a8:	4698      	movls	r8, r3
 80096aa:	4680      	movhi	r8, r0
 80096ac:	2303      	movs	r3, #3
 80096ae:	f04f 0a00 	mov.w	sl, #0
 80096b2:	6123      	str	r3, [r4, #16]
 80096b4:	f02b 0304 	bic.w	r3, fp, #4
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	4633      	mov	r3, r6
 80096bc:	4621      	mov	r1, r4
 80096be:	4628      	mov	r0, r5
 80096c0:	9700      	str	r7, [sp, #0]
 80096c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80096c4:	f000 f9d4 	bl	8009a70 <_printf_common>
 80096c8:	3001      	adds	r0, #1
 80096ca:	f040 8090 	bne.w	80097ee <_printf_float+0x1d6>
 80096ce:	f04f 30ff 	mov.w	r0, #4294967295
 80096d2:	b011      	add	sp, #68	; 0x44
 80096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d8:	4642      	mov	r2, r8
 80096da:	4653      	mov	r3, sl
 80096dc:	4640      	mov	r0, r8
 80096de:	4651      	mov	r1, sl
 80096e0:	f7f7 f994 	bl	8000a0c <__aeabi_dcmpun>
 80096e4:	b148      	cbz	r0, 80096fa <_printf_float+0xe2>
 80096e6:	f1ba 0f00 	cmp.w	sl, #0
 80096ea:	bfb8      	it	lt
 80096ec:	232d      	movlt	r3, #45	; 0x2d
 80096ee:	4880      	ldr	r0, [pc, #512]	; (80098f0 <_printf_float+0x2d8>)
 80096f0:	bfb8      	it	lt
 80096f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096f6:	4b7f      	ldr	r3, [pc, #508]	; (80098f4 <_printf_float+0x2dc>)
 80096f8:	e7d3      	b.n	80096a2 <_printf_float+0x8a>
 80096fa:	6863      	ldr	r3, [r4, #4]
 80096fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	d142      	bne.n	800978a <_printf_float+0x172>
 8009704:	2306      	movs	r3, #6
 8009706:	6063      	str	r3, [r4, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	9206      	str	r2, [sp, #24]
 800970c:	aa0e      	add	r2, sp, #56	; 0x38
 800970e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009712:	aa0d      	add	r2, sp, #52	; 0x34
 8009714:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009718:	9203      	str	r2, [sp, #12]
 800971a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800971e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	6863      	ldr	r3, [r4, #4]
 8009726:	4642      	mov	r2, r8
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	4628      	mov	r0, r5
 800972c:	4653      	mov	r3, sl
 800972e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009730:	f7ff fed4 	bl	80094dc <__cvt>
 8009734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009736:	4680      	mov	r8, r0
 8009738:	2947      	cmp	r1, #71	; 0x47
 800973a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800973c:	d108      	bne.n	8009750 <_printf_float+0x138>
 800973e:	1cc8      	adds	r0, r1, #3
 8009740:	db02      	blt.n	8009748 <_printf_float+0x130>
 8009742:	6863      	ldr	r3, [r4, #4]
 8009744:	4299      	cmp	r1, r3
 8009746:	dd40      	ble.n	80097ca <_printf_float+0x1b2>
 8009748:	f1a9 0902 	sub.w	r9, r9, #2
 800974c:	fa5f f989 	uxtb.w	r9, r9
 8009750:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009754:	d81f      	bhi.n	8009796 <_printf_float+0x17e>
 8009756:	464a      	mov	r2, r9
 8009758:	3901      	subs	r1, #1
 800975a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800975e:	910d      	str	r1, [sp, #52]	; 0x34
 8009760:	f7ff ff1b 	bl	800959a <__exponent>
 8009764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009766:	4682      	mov	sl, r0
 8009768:	1813      	adds	r3, r2, r0
 800976a:	2a01      	cmp	r2, #1
 800976c:	6123      	str	r3, [r4, #16]
 800976e:	dc02      	bgt.n	8009776 <_printf_float+0x15e>
 8009770:	6822      	ldr	r2, [r4, #0]
 8009772:	07d2      	lsls	r2, r2, #31
 8009774:	d501      	bpl.n	800977a <_printf_float+0x162>
 8009776:	3301      	adds	r3, #1
 8009778:	6123      	str	r3, [r4, #16]
 800977a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800977e:	2b00      	cmp	r3, #0
 8009780:	d09b      	beq.n	80096ba <_printf_float+0xa2>
 8009782:	232d      	movs	r3, #45	; 0x2d
 8009784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009788:	e797      	b.n	80096ba <_printf_float+0xa2>
 800978a:	2947      	cmp	r1, #71	; 0x47
 800978c:	d1bc      	bne.n	8009708 <_printf_float+0xf0>
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1ba      	bne.n	8009708 <_printf_float+0xf0>
 8009792:	2301      	movs	r3, #1
 8009794:	e7b7      	b.n	8009706 <_printf_float+0xee>
 8009796:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800979a:	d118      	bne.n	80097ce <_printf_float+0x1b6>
 800979c:	2900      	cmp	r1, #0
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	dd0b      	ble.n	80097ba <_printf_float+0x1a2>
 80097a2:	6121      	str	r1, [r4, #16]
 80097a4:	b913      	cbnz	r3, 80097ac <_printf_float+0x194>
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	07d0      	lsls	r0, r2, #31
 80097aa:	d502      	bpl.n	80097b2 <_printf_float+0x19a>
 80097ac:	3301      	adds	r3, #1
 80097ae:	440b      	add	r3, r1
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	f04f 0a00 	mov.w	sl, #0
 80097b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80097b8:	e7df      	b.n	800977a <_printf_float+0x162>
 80097ba:	b913      	cbnz	r3, 80097c2 <_printf_float+0x1aa>
 80097bc:	6822      	ldr	r2, [r4, #0]
 80097be:	07d2      	lsls	r2, r2, #31
 80097c0:	d501      	bpl.n	80097c6 <_printf_float+0x1ae>
 80097c2:	3302      	adds	r3, #2
 80097c4:	e7f4      	b.n	80097b0 <_printf_float+0x198>
 80097c6:	2301      	movs	r3, #1
 80097c8:	e7f2      	b.n	80097b0 <_printf_float+0x198>
 80097ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80097ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097d0:	4299      	cmp	r1, r3
 80097d2:	db05      	blt.n	80097e0 <_printf_float+0x1c8>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	6121      	str	r1, [r4, #16]
 80097d8:	07d8      	lsls	r0, r3, #31
 80097da:	d5ea      	bpl.n	80097b2 <_printf_float+0x19a>
 80097dc:	1c4b      	adds	r3, r1, #1
 80097de:	e7e7      	b.n	80097b0 <_printf_float+0x198>
 80097e0:	2900      	cmp	r1, #0
 80097e2:	bfcc      	ite	gt
 80097e4:	2201      	movgt	r2, #1
 80097e6:	f1c1 0202 	rsble	r2, r1, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	e7e0      	b.n	80097b0 <_printf_float+0x198>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	055a      	lsls	r2, r3, #21
 80097f2:	d407      	bmi.n	8009804 <_printf_float+0x1ec>
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	4642      	mov	r2, r8
 80097f8:	4631      	mov	r1, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b8      	blx	r7
 80097fe:	3001      	adds	r0, #1
 8009800:	d12b      	bne.n	800985a <_printf_float+0x242>
 8009802:	e764      	b.n	80096ce <_printf_float+0xb6>
 8009804:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009808:	f240 80dd 	bls.w	80099c6 <_printf_float+0x3ae>
 800980c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009810:	2200      	movs	r2, #0
 8009812:	2300      	movs	r3, #0
 8009814:	f7f7 f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8009818:	2800      	cmp	r0, #0
 800981a:	d033      	beq.n	8009884 <_printf_float+0x26c>
 800981c:	2301      	movs	r3, #1
 800981e:	4631      	mov	r1, r6
 8009820:	4628      	mov	r0, r5
 8009822:	4a35      	ldr	r2, [pc, #212]	; (80098f8 <_printf_float+0x2e0>)
 8009824:	47b8      	blx	r7
 8009826:	3001      	adds	r0, #1
 8009828:	f43f af51 	beq.w	80096ce <_printf_float+0xb6>
 800982c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009830:	429a      	cmp	r2, r3
 8009832:	db02      	blt.n	800983a <_printf_float+0x222>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	07d8      	lsls	r0, r3, #31
 8009838:	d50f      	bpl.n	800985a <_printf_float+0x242>
 800983a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	47b8      	blx	r7
 8009844:	3001      	adds	r0, #1
 8009846:	f43f af42 	beq.w	80096ce <_printf_float+0xb6>
 800984a:	f04f 0800 	mov.w	r8, #0
 800984e:	f104 091a 	add.w	r9, r4, #26
 8009852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009854:	3b01      	subs	r3, #1
 8009856:	4543      	cmp	r3, r8
 8009858:	dc09      	bgt.n	800986e <_printf_float+0x256>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	079b      	lsls	r3, r3, #30
 800985e:	f100 8102 	bmi.w	8009a66 <_printf_float+0x44e>
 8009862:	68e0      	ldr	r0, [r4, #12]
 8009864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009866:	4298      	cmp	r0, r3
 8009868:	bfb8      	it	lt
 800986a:	4618      	movlt	r0, r3
 800986c:	e731      	b.n	80096d2 <_printf_float+0xba>
 800986e:	2301      	movs	r3, #1
 8009870:	464a      	mov	r2, r9
 8009872:	4631      	mov	r1, r6
 8009874:	4628      	mov	r0, r5
 8009876:	47b8      	blx	r7
 8009878:	3001      	adds	r0, #1
 800987a:	f43f af28 	beq.w	80096ce <_printf_float+0xb6>
 800987e:	f108 0801 	add.w	r8, r8, #1
 8009882:	e7e6      	b.n	8009852 <_printf_float+0x23a>
 8009884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009886:	2b00      	cmp	r3, #0
 8009888:	dc38      	bgt.n	80098fc <_printf_float+0x2e4>
 800988a:	2301      	movs	r3, #1
 800988c:	4631      	mov	r1, r6
 800988e:	4628      	mov	r0, r5
 8009890:	4a19      	ldr	r2, [pc, #100]	; (80098f8 <_printf_float+0x2e0>)
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f af1a 	beq.w	80096ce <_printf_float+0xb6>
 800989a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800989e:	4313      	orrs	r3, r2
 80098a0:	d102      	bne.n	80098a8 <_printf_float+0x290>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	07d9      	lsls	r1, r3, #31
 80098a6:	d5d8      	bpl.n	800985a <_printf_float+0x242>
 80098a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	f43f af0b 	beq.w	80096ce <_printf_float+0xb6>
 80098b8:	f04f 0900 	mov.w	r9, #0
 80098bc:	f104 0a1a 	add.w	sl, r4, #26
 80098c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098c2:	425b      	negs	r3, r3
 80098c4:	454b      	cmp	r3, r9
 80098c6:	dc01      	bgt.n	80098cc <_printf_float+0x2b4>
 80098c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ca:	e794      	b.n	80097f6 <_printf_float+0x1de>
 80098cc:	2301      	movs	r3, #1
 80098ce:	4652      	mov	r2, sl
 80098d0:	4631      	mov	r1, r6
 80098d2:	4628      	mov	r0, r5
 80098d4:	47b8      	blx	r7
 80098d6:	3001      	adds	r0, #1
 80098d8:	f43f aef9 	beq.w	80096ce <_printf_float+0xb6>
 80098dc:	f109 0901 	add.w	r9, r9, #1
 80098e0:	e7ee      	b.n	80098c0 <_printf_float+0x2a8>
 80098e2:	bf00      	nop
 80098e4:	7fefffff 	.word	0x7fefffff
 80098e8:	0800cca4 	.word	0x0800cca4
 80098ec:	0800cca8 	.word	0x0800cca8
 80098f0:	0800ccb0 	.word	0x0800ccb0
 80098f4:	0800ccac 	.word	0x0800ccac
 80098f8:	0800ccb4 	.word	0x0800ccb4
 80098fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009900:	429a      	cmp	r2, r3
 8009902:	bfa8      	it	ge
 8009904:	461a      	movge	r2, r3
 8009906:	2a00      	cmp	r2, #0
 8009908:	4691      	mov	r9, r2
 800990a:	dc37      	bgt.n	800997c <_printf_float+0x364>
 800990c:	f04f 0b00 	mov.w	fp, #0
 8009910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009914:	f104 021a 	add.w	r2, r4, #26
 8009918:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800991c:	ebaa 0309 	sub.w	r3, sl, r9
 8009920:	455b      	cmp	r3, fp
 8009922:	dc33      	bgt.n	800998c <_printf_float+0x374>
 8009924:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009928:	429a      	cmp	r2, r3
 800992a:	db3b      	blt.n	80099a4 <_printf_float+0x38c>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	07da      	lsls	r2, r3, #31
 8009930:	d438      	bmi.n	80099a4 <_printf_float+0x38c>
 8009932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009934:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009936:	eba2 030a 	sub.w	r3, r2, sl
 800993a:	eba2 0901 	sub.w	r9, r2, r1
 800993e:	4599      	cmp	r9, r3
 8009940:	bfa8      	it	ge
 8009942:	4699      	movge	r9, r3
 8009944:	f1b9 0f00 	cmp.w	r9, #0
 8009948:	dc34      	bgt.n	80099b4 <_printf_float+0x39c>
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009952:	f104 0a1a 	add.w	sl, r4, #26
 8009956:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	eba3 0309 	sub.w	r3, r3, r9
 8009960:	4543      	cmp	r3, r8
 8009962:	f77f af7a 	ble.w	800985a <_printf_float+0x242>
 8009966:	2301      	movs	r3, #1
 8009968:	4652      	mov	r2, sl
 800996a:	4631      	mov	r1, r6
 800996c:	4628      	mov	r0, r5
 800996e:	47b8      	blx	r7
 8009970:	3001      	adds	r0, #1
 8009972:	f43f aeac 	beq.w	80096ce <_printf_float+0xb6>
 8009976:	f108 0801 	add.w	r8, r8, #1
 800997a:	e7ec      	b.n	8009956 <_printf_float+0x33e>
 800997c:	4613      	mov	r3, r2
 800997e:	4631      	mov	r1, r6
 8009980:	4642      	mov	r2, r8
 8009982:	4628      	mov	r0, r5
 8009984:	47b8      	blx	r7
 8009986:	3001      	adds	r0, #1
 8009988:	d1c0      	bne.n	800990c <_printf_float+0x2f4>
 800998a:	e6a0      	b.n	80096ce <_printf_float+0xb6>
 800998c:	2301      	movs	r3, #1
 800998e:	4631      	mov	r1, r6
 8009990:	4628      	mov	r0, r5
 8009992:	920b      	str	r2, [sp, #44]	; 0x2c
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	f43f ae99 	beq.w	80096ce <_printf_float+0xb6>
 800999c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800999e:	f10b 0b01 	add.w	fp, fp, #1
 80099a2:	e7b9      	b.n	8009918 <_printf_float+0x300>
 80099a4:	4631      	mov	r1, r6
 80099a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099aa:	4628      	mov	r0, r5
 80099ac:	47b8      	blx	r7
 80099ae:	3001      	adds	r0, #1
 80099b0:	d1bf      	bne.n	8009932 <_printf_float+0x31a>
 80099b2:	e68c      	b.n	80096ce <_printf_float+0xb6>
 80099b4:	464b      	mov	r3, r9
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	eb08 020a 	add.w	r2, r8, sl
 80099be:	47b8      	blx	r7
 80099c0:	3001      	adds	r0, #1
 80099c2:	d1c2      	bne.n	800994a <_printf_float+0x332>
 80099c4:	e683      	b.n	80096ce <_printf_float+0xb6>
 80099c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099c8:	2a01      	cmp	r2, #1
 80099ca:	dc01      	bgt.n	80099d0 <_printf_float+0x3b8>
 80099cc:	07db      	lsls	r3, r3, #31
 80099ce:	d537      	bpl.n	8009a40 <_printf_float+0x428>
 80099d0:	2301      	movs	r3, #1
 80099d2:	4642      	mov	r2, r8
 80099d4:	4631      	mov	r1, r6
 80099d6:	4628      	mov	r0, r5
 80099d8:	47b8      	blx	r7
 80099da:	3001      	adds	r0, #1
 80099dc:	f43f ae77 	beq.w	80096ce <_printf_float+0xb6>
 80099e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	f43f ae6f 	beq.w	80096ce <_printf_float+0xb6>
 80099f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099f4:	2200      	movs	r2, #0
 80099f6:	2300      	movs	r3, #0
 80099f8:	f7f6 ffd6 	bl	80009a8 <__aeabi_dcmpeq>
 80099fc:	b9d8      	cbnz	r0, 8009a36 <_printf_float+0x41e>
 80099fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a00:	f108 0201 	add.w	r2, r8, #1
 8009a04:	3b01      	subs	r3, #1
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d10e      	bne.n	8009a2e <_printf_float+0x416>
 8009a10:	e65d      	b.n	80096ce <_printf_float+0xb6>
 8009a12:	2301      	movs	r3, #1
 8009a14:	464a      	mov	r2, r9
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f43f ae56 	beq.w	80096ce <_printf_float+0xb6>
 8009a22:	f108 0801 	add.w	r8, r8, #1
 8009a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4543      	cmp	r3, r8
 8009a2c:	dcf1      	bgt.n	8009a12 <_printf_float+0x3fa>
 8009a2e:	4653      	mov	r3, sl
 8009a30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a34:	e6e0      	b.n	80097f8 <_printf_float+0x1e0>
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	f104 091a 	add.w	r9, r4, #26
 8009a3e:	e7f2      	b.n	8009a26 <_printf_float+0x40e>
 8009a40:	2301      	movs	r3, #1
 8009a42:	4642      	mov	r2, r8
 8009a44:	e7df      	b.n	8009a06 <_printf_float+0x3ee>
 8009a46:	2301      	movs	r3, #1
 8009a48:	464a      	mov	r2, r9
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f ae3c 	beq.w	80096ce <_printf_float+0xb6>
 8009a56:	f108 0801 	add.w	r8, r8, #1
 8009a5a:	68e3      	ldr	r3, [r4, #12]
 8009a5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a5e:	1a5b      	subs	r3, r3, r1
 8009a60:	4543      	cmp	r3, r8
 8009a62:	dcf0      	bgt.n	8009a46 <_printf_float+0x42e>
 8009a64:	e6fd      	b.n	8009862 <_printf_float+0x24a>
 8009a66:	f04f 0800 	mov.w	r8, #0
 8009a6a:	f104 0919 	add.w	r9, r4, #25
 8009a6e:	e7f4      	b.n	8009a5a <_printf_float+0x442>

08009a70 <_printf_common>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	4616      	mov	r6, r2
 8009a76:	4699      	mov	r9, r3
 8009a78:	688a      	ldr	r2, [r1, #8]
 8009a7a:	690b      	ldr	r3, [r1, #16]
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	bfb8      	it	lt
 8009a82:	4613      	movlt	r3, r2
 8009a84:	6033      	str	r3, [r6, #0]
 8009a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a90:	b10a      	cbz	r2, 8009a96 <_printf_common+0x26>
 8009a92:	3301      	adds	r3, #1
 8009a94:	6033      	str	r3, [r6, #0]
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	0699      	lsls	r1, r3, #26
 8009a9a:	bf42      	ittt	mi
 8009a9c:	6833      	ldrmi	r3, [r6, #0]
 8009a9e:	3302      	addmi	r3, #2
 8009aa0:	6033      	strmi	r3, [r6, #0]
 8009aa2:	6825      	ldr	r5, [r4, #0]
 8009aa4:	f015 0506 	ands.w	r5, r5, #6
 8009aa8:	d106      	bne.n	8009ab8 <_printf_common+0x48>
 8009aaa:	f104 0a19 	add.w	sl, r4, #25
 8009aae:	68e3      	ldr	r3, [r4, #12]
 8009ab0:	6832      	ldr	r2, [r6, #0]
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	42ab      	cmp	r3, r5
 8009ab6:	dc28      	bgt.n	8009b0a <_printf_common+0x9a>
 8009ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009abc:	1e13      	subs	r3, r2, #0
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	bf18      	it	ne
 8009ac2:	2301      	movne	r3, #1
 8009ac4:	0692      	lsls	r2, r2, #26
 8009ac6:	d42d      	bmi.n	8009b24 <_printf_common+0xb4>
 8009ac8:	4649      	mov	r1, r9
 8009aca:	4638      	mov	r0, r7
 8009acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad0:	47c0      	blx	r8
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d020      	beq.n	8009b18 <_printf_common+0xa8>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	68e5      	ldr	r5, [r4, #12]
 8009ada:	f003 0306 	and.w	r3, r3, #6
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	bf18      	it	ne
 8009ae2:	2500      	movne	r5, #0
 8009ae4:	6832      	ldr	r2, [r6, #0]
 8009ae6:	f04f 0600 	mov.w	r6, #0
 8009aea:	68a3      	ldr	r3, [r4, #8]
 8009aec:	bf08      	it	eq
 8009aee:	1aad      	subeq	r5, r5, r2
 8009af0:	6922      	ldr	r2, [r4, #16]
 8009af2:	bf08      	it	eq
 8009af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af8:	4293      	cmp	r3, r2
 8009afa:	bfc4      	itt	gt
 8009afc:	1a9b      	subgt	r3, r3, r2
 8009afe:	18ed      	addgt	r5, r5, r3
 8009b00:	341a      	adds	r4, #26
 8009b02:	42b5      	cmp	r5, r6
 8009b04:	d11a      	bne.n	8009b3c <_printf_common+0xcc>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e008      	b.n	8009b1c <_printf_common+0xac>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4638      	mov	r0, r7
 8009b12:	47c0      	blx	r8
 8009b14:	3001      	adds	r0, #1
 8009b16:	d103      	bne.n	8009b20 <_printf_common+0xb0>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	3501      	adds	r5, #1
 8009b22:	e7c4      	b.n	8009aae <_printf_common+0x3e>
 8009b24:	2030      	movs	r0, #48	; 0x30
 8009b26:	18e1      	adds	r1, r4, r3
 8009b28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b32:	4422      	add	r2, r4
 8009b34:	3302      	adds	r3, #2
 8009b36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b3a:	e7c5      	b.n	8009ac8 <_printf_common+0x58>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4649      	mov	r1, r9
 8009b42:	4638      	mov	r0, r7
 8009b44:	47c0      	blx	r8
 8009b46:	3001      	adds	r0, #1
 8009b48:	d0e6      	beq.n	8009b18 <_printf_common+0xa8>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7d9      	b.n	8009b02 <_printf_common+0x92>
	...

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	7e27      	ldrb	r7, [r4, #24]
 8009b58:	4691      	mov	r9, r2
 8009b5a:	2f78      	cmp	r7, #120	; 0x78
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	469a      	mov	sl, r3
 8009b60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	; 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d9 	beq.w	8009d24 <_printf_i+0x1d4>
 8009b72:	2f58      	cmp	r7, #88	; 0x58
 8009b74:	f000 80a4 	beq.w	8009cc0 <_printf_i+0x170>
 8009b78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a001      	add	r0, pc, #4	; (adr r0, 8009b90 <_printf_i+0x40>)
 8009b8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009d0b 	.word	0x08009d0b
 8009bc0:	08009c2d 	.word	0x08009c2d
 8009bc4:	08009ced 	.word	0x08009ced
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d2d 	.word	0x08009d2d
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c2d 	.word	0x08009c2d
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cf5 	.word	0x08009cf5
 8009be8:	680b      	ldr	r3, [r1, #0]
 8009bea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bee:	1d1a      	adds	r2, r3, #4
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	600a      	str	r2, [r1, #0]
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e0a4      	b.n	8009d46 <_printf_i+0x1f6>
 8009bfc:	6825      	ldr	r5, [r4, #0]
 8009bfe:	6808      	ldr	r0, [r1, #0]
 8009c00:	062e      	lsls	r6, r5, #24
 8009c02:	f100 0304 	add.w	r3, r0, #4
 8009c06:	d50a      	bpl.n	8009c1e <_printf_i+0xce>
 8009c08:	6805      	ldr	r5, [r0, #0]
 8009c0a:	600b      	str	r3, [r1, #0]
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	da03      	bge.n	8009c18 <_printf_i+0xc8>
 8009c10:	232d      	movs	r3, #45	; 0x2d
 8009c12:	426d      	negs	r5, r5
 8009c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c18:	230a      	movs	r3, #10
 8009c1a:	485e      	ldr	r0, [pc, #376]	; (8009d94 <_printf_i+0x244>)
 8009c1c:	e019      	b.n	8009c52 <_printf_i+0x102>
 8009c1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c22:	6805      	ldr	r5, [r0, #0]
 8009c24:	600b      	str	r3, [r1, #0]
 8009c26:	bf18      	it	ne
 8009c28:	b22d      	sxthne	r5, r5
 8009c2a:	e7ef      	b.n	8009c0c <_printf_i+0xbc>
 8009c2c:	680b      	ldr	r3, [r1, #0]
 8009c2e:	6825      	ldr	r5, [r4, #0]
 8009c30:	1d18      	adds	r0, r3, #4
 8009c32:	6008      	str	r0, [r1, #0]
 8009c34:	0628      	lsls	r0, r5, #24
 8009c36:	d501      	bpl.n	8009c3c <_printf_i+0xec>
 8009c38:	681d      	ldr	r5, [r3, #0]
 8009c3a:	e002      	b.n	8009c42 <_printf_i+0xf2>
 8009c3c:	0669      	lsls	r1, r5, #25
 8009c3e:	d5fb      	bpl.n	8009c38 <_printf_i+0xe8>
 8009c40:	881d      	ldrh	r5, [r3, #0]
 8009c42:	2f6f      	cmp	r7, #111	; 0x6f
 8009c44:	bf0c      	ite	eq
 8009c46:	2308      	moveq	r3, #8
 8009c48:	230a      	movne	r3, #10
 8009c4a:	4852      	ldr	r0, [pc, #328]	; (8009d94 <_printf_i+0x244>)
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c52:	6866      	ldr	r6, [r4, #4]
 8009c54:	2e00      	cmp	r6, #0
 8009c56:	bfa8      	it	ge
 8009c58:	6821      	ldrge	r1, [r4, #0]
 8009c5a:	60a6      	str	r6, [r4, #8]
 8009c5c:	bfa4      	itt	ge
 8009c5e:	f021 0104 	bicge.w	r1, r1, #4
 8009c62:	6021      	strge	r1, [r4, #0]
 8009c64:	b90d      	cbnz	r5, 8009c6a <_printf_i+0x11a>
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	d04d      	beq.n	8009d06 <_printf_i+0x1b6>
 8009c6a:	4616      	mov	r6, r2
 8009c6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c70:	fb03 5711 	mls	r7, r3, r1, r5
 8009c74:	5dc7      	ldrb	r7, [r0, r7]
 8009c76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c7a:	462f      	mov	r7, r5
 8009c7c:	42bb      	cmp	r3, r7
 8009c7e:	460d      	mov	r5, r1
 8009c80:	d9f4      	bls.n	8009c6c <_printf_i+0x11c>
 8009c82:	2b08      	cmp	r3, #8
 8009c84:	d10b      	bne.n	8009c9e <_printf_i+0x14e>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	07df      	lsls	r7, r3, #31
 8009c8a:	d508      	bpl.n	8009c9e <_printf_i+0x14e>
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	6861      	ldr	r1, [r4, #4]
 8009c90:	4299      	cmp	r1, r3
 8009c92:	bfde      	ittt	le
 8009c94:	2330      	movle	r3, #48	; 0x30
 8009c96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c9e:	1b92      	subs	r2, r2, r6
 8009ca0:	6122      	str	r2, [r4, #16]
 8009ca2:	464b      	mov	r3, r9
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f8cd a000 	str.w	sl, [sp]
 8009cac:	aa03      	add	r2, sp, #12
 8009cae:	f7ff fedf 	bl	8009a70 <_printf_common>
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d14c      	bne.n	8009d50 <_printf_i+0x200>
 8009cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cba:	b004      	add	sp, #16
 8009cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc0:	4834      	ldr	r0, [pc, #208]	; (8009d94 <_printf_i+0x244>)
 8009cc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cc6:	680e      	ldr	r6, [r1, #0]
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cce:	061f      	lsls	r7, r3, #24
 8009cd0:	600e      	str	r6, [r1, #0]
 8009cd2:	d514      	bpl.n	8009cfe <_printf_i+0x1ae>
 8009cd4:	07d9      	lsls	r1, r3, #31
 8009cd6:	bf44      	itt	mi
 8009cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8009cdc:	6023      	strmi	r3, [r4, #0]
 8009cde:	b91d      	cbnz	r5, 8009ce8 <_printf_i+0x198>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	f023 0320 	bic.w	r3, r3, #32
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	2310      	movs	r3, #16
 8009cea:	e7af      	b.n	8009c4c <_printf_i+0xfc>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	f043 0320 	orr.w	r3, r3, #32
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	2378      	movs	r3, #120	; 0x78
 8009cf6:	4828      	ldr	r0, [pc, #160]	; (8009d98 <_printf_i+0x248>)
 8009cf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cfc:	e7e3      	b.n	8009cc6 <_printf_i+0x176>
 8009cfe:	065e      	lsls	r6, r3, #25
 8009d00:	bf48      	it	mi
 8009d02:	b2ad      	uxthmi	r5, r5
 8009d04:	e7e6      	b.n	8009cd4 <_printf_i+0x184>
 8009d06:	4616      	mov	r6, r2
 8009d08:	e7bb      	b.n	8009c82 <_printf_i+0x132>
 8009d0a:	680b      	ldr	r3, [r1, #0]
 8009d0c:	6826      	ldr	r6, [r4, #0]
 8009d0e:	1d1d      	adds	r5, r3, #4
 8009d10:	6960      	ldr	r0, [r4, #20]
 8009d12:	600d      	str	r5, [r1, #0]
 8009d14:	0635      	lsls	r5, r6, #24
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	d501      	bpl.n	8009d1e <_printf_i+0x1ce>
 8009d1a:	6018      	str	r0, [r3, #0]
 8009d1c:	e002      	b.n	8009d24 <_printf_i+0x1d4>
 8009d1e:	0671      	lsls	r1, r6, #25
 8009d20:	d5fb      	bpl.n	8009d1a <_printf_i+0x1ca>
 8009d22:	8018      	strh	r0, [r3, #0]
 8009d24:	2300      	movs	r3, #0
 8009d26:	4616      	mov	r6, r2
 8009d28:	6123      	str	r3, [r4, #16]
 8009d2a:	e7ba      	b.n	8009ca2 <_printf_i+0x152>
 8009d2c:	680b      	ldr	r3, [r1, #0]
 8009d2e:	1d1a      	adds	r2, r3, #4
 8009d30:	600a      	str	r2, [r1, #0]
 8009d32:	681e      	ldr	r6, [r3, #0]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4630      	mov	r0, r6
 8009d38:	6862      	ldr	r2, [r4, #4]
 8009d3a:	f000 fed7 	bl	800aaec <memchr>
 8009d3e:	b108      	cbz	r0, 8009d44 <_printf_i+0x1f4>
 8009d40:	1b80      	subs	r0, r0, r6
 8009d42:	6060      	str	r0, [r4, #4]
 8009d44:	6863      	ldr	r3, [r4, #4]
 8009d46:	6123      	str	r3, [r4, #16]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d4e:	e7a8      	b.n	8009ca2 <_printf_i+0x152>
 8009d50:	4632      	mov	r2, r6
 8009d52:	4649      	mov	r1, r9
 8009d54:	4640      	mov	r0, r8
 8009d56:	6923      	ldr	r3, [r4, #16]
 8009d58:	47d0      	blx	sl
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	d0ab      	beq.n	8009cb6 <_printf_i+0x166>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	079b      	lsls	r3, r3, #30
 8009d62:	d413      	bmi.n	8009d8c <_printf_i+0x23c>
 8009d64:	68e0      	ldr	r0, [r4, #12]
 8009d66:	9b03      	ldr	r3, [sp, #12]
 8009d68:	4298      	cmp	r0, r3
 8009d6a:	bfb8      	it	lt
 8009d6c:	4618      	movlt	r0, r3
 8009d6e:	e7a4      	b.n	8009cba <_printf_i+0x16a>
 8009d70:	2301      	movs	r3, #1
 8009d72:	4632      	mov	r2, r6
 8009d74:	4649      	mov	r1, r9
 8009d76:	4640      	mov	r0, r8
 8009d78:	47d0      	blx	sl
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d09b      	beq.n	8009cb6 <_printf_i+0x166>
 8009d7e:	3501      	adds	r5, #1
 8009d80:	68e3      	ldr	r3, [r4, #12]
 8009d82:	9903      	ldr	r1, [sp, #12]
 8009d84:	1a5b      	subs	r3, r3, r1
 8009d86:	42ab      	cmp	r3, r5
 8009d88:	dcf2      	bgt.n	8009d70 <_printf_i+0x220>
 8009d8a:	e7eb      	b.n	8009d64 <_printf_i+0x214>
 8009d8c:	2500      	movs	r5, #0
 8009d8e:	f104 0619 	add.w	r6, r4, #25
 8009d92:	e7f5      	b.n	8009d80 <_printf_i+0x230>
 8009d94:	0800ccb6 	.word	0x0800ccb6
 8009d98:	0800ccc7 	.word	0x0800ccc7

08009d9c <siprintf>:
 8009d9c:	b40e      	push	{r1, r2, r3}
 8009d9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009da2:	b500      	push	{lr}
 8009da4:	b09c      	sub	sp, #112	; 0x70
 8009da6:	ab1d      	add	r3, sp, #116	; 0x74
 8009da8:	9002      	str	r0, [sp, #8]
 8009daa:	9006      	str	r0, [sp, #24]
 8009dac:	9107      	str	r1, [sp, #28]
 8009dae:	9104      	str	r1, [sp, #16]
 8009db0:	4808      	ldr	r0, [pc, #32]	; (8009dd4 <siprintf+0x38>)
 8009db2:	4909      	ldr	r1, [pc, #36]	; (8009dd8 <siprintf+0x3c>)
 8009db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db8:	9105      	str	r1, [sp, #20]
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	a902      	add	r1, sp, #8
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	f001 fb34 	bl	800b42c <_svfiprintf_r>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	9b02      	ldr	r3, [sp, #8]
 8009dc8:	701a      	strb	r2, [r3, #0]
 8009dca:	b01c      	add	sp, #112	; 0x70
 8009dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd0:	b003      	add	sp, #12
 8009dd2:	4770      	bx	lr
 8009dd4:	20000044 	.word	0x20000044
 8009dd8:	ffff0208 	.word	0xffff0208

08009ddc <quorem>:
 8009ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de0:	6903      	ldr	r3, [r0, #16]
 8009de2:	690c      	ldr	r4, [r1, #16]
 8009de4:	4607      	mov	r7, r0
 8009de6:	42a3      	cmp	r3, r4
 8009de8:	f2c0 8083 	blt.w	8009ef2 <quorem+0x116>
 8009dec:	3c01      	subs	r4, #1
 8009dee:	f100 0514 	add.w	r5, r0, #20
 8009df2:	f101 0814 	add.w	r8, r1, #20
 8009df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e04:	3301      	adds	r3, #1
 8009e06:	429a      	cmp	r2, r3
 8009e08:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e14:	d332      	bcc.n	8009e7c <quorem+0xa0>
 8009e16:	f04f 0e00 	mov.w	lr, #0
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	46ac      	mov	ip, r5
 8009e1e:	46f2      	mov	sl, lr
 8009e20:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e24:	b293      	uxth	r3, r2
 8009e26:	fb06 e303 	mla	r3, r6, r3, lr
 8009e2a:	0c12      	lsrs	r2, r2, #16
 8009e2c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e30:	fb06 e202 	mla	r2, r6, r2, lr
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	ebaa 0303 	sub.w	r3, sl, r3
 8009e3a:	f8dc a000 	ldr.w	sl, [ip]
 8009e3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e42:	fa1f fa8a 	uxth.w	sl, sl
 8009e46:	4453      	add	r3, sl
 8009e48:	fa1f fa82 	uxth.w	sl, r2
 8009e4c:	f8dc 2000 	ldr.w	r2, [ip]
 8009e50:	4581      	cmp	r9, r0
 8009e52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009e56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e64:	f84c 3b04 	str.w	r3, [ip], #4
 8009e68:	d2da      	bcs.n	8009e20 <quorem+0x44>
 8009e6a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e6e:	b92b      	cbnz	r3, 8009e7c <quorem+0xa0>
 8009e70:	9b01      	ldr	r3, [sp, #4]
 8009e72:	3b04      	subs	r3, #4
 8009e74:	429d      	cmp	r5, r3
 8009e76:	461a      	mov	r2, r3
 8009e78:	d32f      	bcc.n	8009eda <quorem+0xfe>
 8009e7a:	613c      	str	r4, [r7, #16]
 8009e7c:	4638      	mov	r0, r7
 8009e7e:	f001 f8bd 	bl	800affc <__mcmp>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	db25      	blt.n	8009ed2 <quorem+0xf6>
 8009e86:	4628      	mov	r0, r5
 8009e88:	f04f 0c00 	mov.w	ip, #0
 8009e8c:	3601      	adds	r6, #1
 8009e8e:	f858 1b04 	ldr.w	r1, [r8], #4
 8009e92:	f8d0 e000 	ldr.w	lr, [r0]
 8009e96:	b28b      	uxth	r3, r1
 8009e98:	ebac 0303 	sub.w	r3, ip, r3
 8009e9c:	fa1f f28e 	uxth.w	r2, lr
 8009ea0:	4413      	add	r3, r2
 8009ea2:	0c0a      	lsrs	r2, r1, #16
 8009ea4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ea8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb2:	45c1      	cmp	r9, r8
 8009eb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009eb8:	f840 3b04 	str.w	r3, [r0], #4
 8009ebc:	d2e7      	bcs.n	8009e8e <quorem+0xb2>
 8009ebe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ec6:	b922      	cbnz	r2, 8009ed2 <quorem+0xf6>
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	429d      	cmp	r5, r3
 8009ecc:	461a      	mov	r2, r3
 8009ece:	d30a      	bcc.n	8009ee6 <quorem+0x10a>
 8009ed0:	613c      	str	r4, [r7, #16]
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	b003      	add	sp, #12
 8009ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	3b04      	subs	r3, #4
 8009ede:	2a00      	cmp	r2, #0
 8009ee0:	d1cb      	bne.n	8009e7a <quorem+0x9e>
 8009ee2:	3c01      	subs	r4, #1
 8009ee4:	e7c6      	b.n	8009e74 <quorem+0x98>
 8009ee6:	6812      	ldr	r2, [r2, #0]
 8009ee8:	3b04      	subs	r3, #4
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	d1f0      	bne.n	8009ed0 <quorem+0xf4>
 8009eee:	3c01      	subs	r4, #1
 8009ef0:	e7eb      	b.n	8009eca <quorem+0xee>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	e7ee      	b.n	8009ed4 <quorem+0xf8>
	...

08009ef8 <_dtoa_r>:
 8009ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	4616      	mov	r6, r2
 8009efe:	461f      	mov	r7, r3
 8009f00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009f02:	b099      	sub	sp, #100	; 0x64
 8009f04:	4605      	mov	r5, r0
 8009f06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009f0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009f0e:	b974      	cbnz	r4, 8009f2e <_dtoa_r+0x36>
 8009f10:	2010      	movs	r0, #16
 8009f12:	f000 fde3 	bl	800aadc <malloc>
 8009f16:	4602      	mov	r2, r0
 8009f18:	6268      	str	r0, [r5, #36]	; 0x24
 8009f1a:	b920      	cbnz	r0, 8009f26 <_dtoa_r+0x2e>
 8009f1c:	21ea      	movs	r1, #234	; 0xea
 8009f1e:	4bae      	ldr	r3, [pc, #696]	; (800a1d8 <_dtoa_r+0x2e0>)
 8009f20:	48ae      	ldr	r0, [pc, #696]	; (800a1dc <_dtoa_r+0x2e4>)
 8009f22:	f001 fb93 	bl	800b64c <__assert_func>
 8009f26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f2a:	6004      	str	r4, [r0, #0]
 8009f2c:	60c4      	str	r4, [r0, #12]
 8009f2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f30:	6819      	ldr	r1, [r3, #0]
 8009f32:	b151      	cbz	r1, 8009f4a <_dtoa_r+0x52>
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	2301      	movs	r3, #1
 8009f38:	4093      	lsls	r3, r2
 8009f3a:	604a      	str	r2, [r1, #4]
 8009f3c:	608b      	str	r3, [r1, #8]
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f000 fe22 	bl	800ab88 <_Bfree>
 8009f44:	2200      	movs	r2, #0
 8009f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	1e3b      	subs	r3, r7, #0
 8009f4c:	bfaf      	iteee	ge
 8009f4e:	2300      	movge	r3, #0
 8009f50:	2201      	movlt	r2, #1
 8009f52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f56:	9305      	strlt	r3, [sp, #20]
 8009f58:	bfa8      	it	ge
 8009f5a:	f8c8 3000 	strge.w	r3, [r8]
 8009f5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009f62:	4b9f      	ldr	r3, [pc, #636]	; (800a1e0 <_dtoa_r+0x2e8>)
 8009f64:	bfb8      	it	lt
 8009f66:	f8c8 2000 	strlt.w	r2, [r8]
 8009f6a:	ea33 0309 	bics.w	r3, r3, r9
 8009f6e:	d119      	bne.n	8009fa4 <_dtoa_r+0xac>
 8009f70:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f7c:	4333      	orrs	r3, r6
 8009f7e:	f000 8580 	beq.w	800aa82 <_dtoa_r+0xb8a>
 8009f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f84:	b953      	cbnz	r3, 8009f9c <_dtoa_r+0xa4>
 8009f86:	4b97      	ldr	r3, [pc, #604]	; (800a1e4 <_dtoa_r+0x2ec>)
 8009f88:	e022      	b.n	8009fd0 <_dtoa_r+0xd8>
 8009f8a:	4b97      	ldr	r3, [pc, #604]	; (800a1e8 <_dtoa_r+0x2f0>)
 8009f8c:	9308      	str	r3, [sp, #32]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	9808      	ldr	r0, [sp, #32]
 8009f96:	b019      	add	sp, #100	; 0x64
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	4b91      	ldr	r3, [pc, #580]	; (800a1e4 <_dtoa_r+0x2ec>)
 8009f9e:	9308      	str	r3, [sp, #32]
 8009fa0:	3303      	adds	r3, #3
 8009fa2:	e7f5      	b.n	8009f90 <_dtoa_r+0x98>
 8009fa4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009fa8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f7f6 fcf8 	bl	80009a8 <__aeabi_dcmpeq>
 8009fb8:	4680      	mov	r8, r0
 8009fba:	b158      	cbz	r0, 8009fd4 <_dtoa_r+0xdc>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8559 	beq.w	800aa7c <_dtoa_r+0xb84>
 8009fca:	4888      	ldr	r0, [pc, #544]	; (800a1ec <_dtoa_r+0x2f4>)
 8009fcc:	6018      	str	r0, [r3, #0]
 8009fce:	1e43      	subs	r3, r0, #1
 8009fd0:	9308      	str	r3, [sp, #32]
 8009fd2:	e7df      	b.n	8009f94 <_dtoa_r+0x9c>
 8009fd4:	ab16      	add	r3, sp, #88	; 0x58
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	ab17      	add	r3, sp, #92	; 0x5c
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	4628      	mov	r0, r5
 8009fde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009fe2:	f001 f8b7 	bl	800b154 <__d2b>
 8009fe6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009fea:	4682      	mov	sl, r0
 8009fec:	2c00      	cmp	r4, #0
 8009fee:	d07e      	beq.n	800a0ee <_dtoa_r+0x1f6>
 8009ff0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ff6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009ffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ffe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a002:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a006:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a00a:	2200      	movs	r2, #0
 800a00c:	4b78      	ldr	r3, [pc, #480]	; (800a1f0 <_dtoa_r+0x2f8>)
 800a00e:	f7f6 f8ab 	bl	8000168 <__aeabi_dsub>
 800a012:	a36b      	add	r3, pc, #428	; (adr r3, 800a1c0 <_dtoa_r+0x2c8>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 fa5e 	bl	80004d8 <__aeabi_dmul>
 800a01c:	a36a      	add	r3, pc, #424	; (adr r3, 800a1c8 <_dtoa_r+0x2d0>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 f8a3 	bl	800016c <__adddf3>
 800a026:	4606      	mov	r6, r0
 800a028:	4620      	mov	r0, r4
 800a02a:	460f      	mov	r7, r1
 800a02c:	f7f6 f9ea 	bl	8000404 <__aeabi_i2d>
 800a030:	a367      	add	r3, pc, #412	; (adr r3, 800a1d0 <_dtoa_r+0x2d8>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 fa4f 	bl	80004d8 <__aeabi_dmul>
 800a03a:	4602      	mov	r2, r0
 800a03c:	460b      	mov	r3, r1
 800a03e:	4630      	mov	r0, r6
 800a040:	4639      	mov	r1, r7
 800a042:	f7f6 f893 	bl	800016c <__adddf3>
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	f7f6 fcf5 	bl	8000a38 <__aeabi_d2iz>
 800a04e:	2200      	movs	r2, #0
 800a050:	4681      	mov	r9, r0
 800a052:	2300      	movs	r3, #0
 800a054:	4630      	mov	r0, r6
 800a056:	4639      	mov	r1, r7
 800a058:	f7f6 fcb0 	bl	80009bc <__aeabi_dcmplt>
 800a05c:	b148      	cbz	r0, 800a072 <_dtoa_r+0x17a>
 800a05e:	4648      	mov	r0, r9
 800a060:	f7f6 f9d0 	bl	8000404 <__aeabi_i2d>
 800a064:	4632      	mov	r2, r6
 800a066:	463b      	mov	r3, r7
 800a068:	f7f6 fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800a06c:	b908      	cbnz	r0, 800a072 <_dtoa_r+0x17a>
 800a06e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a072:	f1b9 0f16 	cmp.w	r9, #22
 800a076:	d857      	bhi.n	800a128 <_dtoa_r+0x230>
 800a078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a07c:	4b5d      	ldr	r3, [pc, #372]	; (800a1f4 <_dtoa_r+0x2fc>)
 800a07e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	f7f6 fc99 	bl	80009bc <__aeabi_dcmplt>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d04e      	beq.n	800a12c <_dtoa_r+0x234>
 800a08e:	2300      	movs	r3, #0
 800a090:	f109 39ff 	add.w	r9, r9, #4294967295
 800a094:	930f      	str	r3, [sp, #60]	; 0x3c
 800a096:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a098:	1b1c      	subs	r4, r3, r4
 800a09a:	1e63      	subs	r3, r4, #1
 800a09c:	9309      	str	r3, [sp, #36]	; 0x24
 800a09e:	bf49      	itett	mi
 800a0a0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a0a4:	2300      	movpl	r3, #0
 800a0a6:	9306      	strmi	r3, [sp, #24]
 800a0a8:	2300      	movmi	r3, #0
 800a0aa:	bf54      	ite	pl
 800a0ac:	9306      	strpl	r3, [sp, #24]
 800a0ae:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a0b0:	f1b9 0f00 	cmp.w	r9, #0
 800a0b4:	db3c      	blt.n	800a130 <_dtoa_r+0x238>
 800a0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0b8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a0bc:	444b      	add	r3, r9
 800a0be:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d86c      	bhi.n	800a1a4 <_dtoa_r+0x2ac>
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	bfc4      	itt	gt
 800a0ce:	3b04      	subgt	r3, #4
 800a0d0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a0d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0d4:	bfc8      	it	gt
 800a0d6:	2400      	movgt	r4, #0
 800a0d8:	f1a3 0302 	sub.w	r3, r3, #2
 800a0dc:	bfd8      	it	le
 800a0de:	2401      	movle	r4, #1
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	f200 808b 	bhi.w	800a1fc <_dtoa_r+0x304>
 800a0e6:	e8df f003 	tbb	[pc, r3]
 800a0ea:	4f2d      	.short	0x4f2d
 800a0ec:	5b4d      	.short	0x5b4d
 800a0ee:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a0f2:	441c      	add	r4, r3
 800a0f4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	bfc3      	ittte	gt
 800a0fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a100:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a104:	fa09 f303 	lslgt.w	r3, r9, r3
 800a108:	f1c3 0320 	rsble	r3, r3, #32
 800a10c:	bfc6      	itte	gt
 800a10e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a112:	4318      	orrgt	r0, r3
 800a114:	fa06 f003 	lslle.w	r0, r6, r3
 800a118:	f7f6 f964 	bl	80003e4 <__aeabi_ui2d>
 800a11c:	2301      	movs	r3, #1
 800a11e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a122:	3c01      	subs	r4, #1
 800a124:	9313      	str	r3, [sp, #76]	; 0x4c
 800a126:	e770      	b.n	800a00a <_dtoa_r+0x112>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7b3      	b.n	800a094 <_dtoa_r+0x19c>
 800a12c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a12e:	e7b2      	b.n	800a096 <_dtoa_r+0x19e>
 800a130:	9b06      	ldr	r3, [sp, #24]
 800a132:	eba3 0309 	sub.w	r3, r3, r9
 800a136:	9306      	str	r3, [sp, #24]
 800a138:	f1c9 0300 	rsb	r3, r9, #0
 800a13c:	930a      	str	r3, [sp, #40]	; 0x28
 800a13e:	2300      	movs	r3, #0
 800a140:	930e      	str	r3, [sp, #56]	; 0x38
 800a142:	e7bf      	b.n	800a0c4 <_dtoa_r+0x1cc>
 800a144:	2300      	movs	r3, #0
 800a146:	930b      	str	r3, [sp, #44]	; 0x2c
 800a148:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	dc59      	bgt.n	800a202 <_dtoa_r+0x30a>
 800a14e:	f04f 0b01 	mov.w	fp, #1
 800a152:	465b      	mov	r3, fp
 800a154:	f8cd b008 	str.w	fp, [sp, #8]
 800a158:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a15c:	2200      	movs	r2, #0
 800a15e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a160:	6042      	str	r2, [r0, #4]
 800a162:	2204      	movs	r2, #4
 800a164:	f102 0614 	add.w	r6, r2, #20
 800a168:	429e      	cmp	r6, r3
 800a16a:	6841      	ldr	r1, [r0, #4]
 800a16c:	d94f      	bls.n	800a20e <_dtoa_r+0x316>
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 fcca 	bl	800ab08 <_Balloc>
 800a174:	9008      	str	r0, [sp, #32]
 800a176:	2800      	cmp	r0, #0
 800a178:	d14d      	bne.n	800a216 <_dtoa_r+0x31e>
 800a17a:	4602      	mov	r2, r0
 800a17c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a180:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <_dtoa_r+0x300>)
 800a182:	e6cd      	b.n	8009f20 <_dtoa_r+0x28>
 800a184:	2301      	movs	r3, #1
 800a186:	e7de      	b.n	800a146 <_dtoa_r+0x24e>
 800a188:	2300      	movs	r3, #0
 800a18a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a18c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a18e:	eb09 0b03 	add.w	fp, r9, r3
 800a192:	f10b 0301 	add.w	r3, fp, #1
 800a196:	2b01      	cmp	r3, #1
 800a198:	9302      	str	r3, [sp, #8]
 800a19a:	bfb8      	it	lt
 800a19c:	2301      	movlt	r3, #1
 800a19e:	e7dd      	b.n	800a15c <_dtoa_r+0x264>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e7f2      	b.n	800a18a <_dtoa_r+0x292>
 800a1a4:	2401      	movs	r4, #1
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a1aa:	9322      	str	r3, [sp, #136]	; 0x88
 800a1ac:	f04f 3bff 	mov.w	fp, #4294967295
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2312      	movs	r3, #18
 800a1b4:	f8cd b008 	str.w	fp, [sp, #8]
 800a1b8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a1ba:	e7cf      	b.n	800a15c <_dtoa_r+0x264>
 800a1bc:	f3af 8000 	nop.w
 800a1c0:	636f4361 	.word	0x636f4361
 800a1c4:	3fd287a7 	.word	0x3fd287a7
 800a1c8:	8b60c8b3 	.word	0x8b60c8b3
 800a1cc:	3fc68a28 	.word	0x3fc68a28
 800a1d0:	509f79fb 	.word	0x509f79fb
 800a1d4:	3fd34413 	.word	0x3fd34413
 800a1d8:	0800cce5 	.word	0x0800cce5
 800a1dc:	0800ccfc 	.word	0x0800ccfc
 800a1e0:	7ff00000 	.word	0x7ff00000
 800a1e4:	0800cce1 	.word	0x0800cce1
 800a1e8:	0800ccd8 	.word	0x0800ccd8
 800a1ec:	0800ccb5 	.word	0x0800ccb5
 800a1f0:	3ff80000 	.word	0x3ff80000
 800a1f4:	0800cdf8 	.word	0x0800cdf8
 800a1f8:	0800cd5b 	.word	0x0800cd5b
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a200:	e7d4      	b.n	800a1ac <_dtoa_r+0x2b4>
 800a202:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a206:	465b      	mov	r3, fp
 800a208:	f8cd b008 	str.w	fp, [sp, #8]
 800a20c:	e7a6      	b.n	800a15c <_dtoa_r+0x264>
 800a20e:	3101      	adds	r1, #1
 800a210:	6041      	str	r1, [r0, #4]
 800a212:	0052      	lsls	r2, r2, #1
 800a214:	e7a6      	b.n	800a164 <_dtoa_r+0x26c>
 800a216:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a218:	9a08      	ldr	r2, [sp, #32]
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	2b0e      	cmp	r3, #14
 800a220:	f200 80a8 	bhi.w	800a374 <_dtoa_r+0x47c>
 800a224:	2c00      	cmp	r4, #0
 800a226:	f000 80a5 	beq.w	800a374 <_dtoa_r+0x47c>
 800a22a:	f1b9 0f00 	cmp.w	r9, #0
 800a22e:	dd34      	ble.n	800a29a <_dtoa_r+0x3a2>
 800a230:	4a9a      	ldr	r2, [pc, #616]	; (800a49c <_dtoa_r+0x5a4>)
 800a232:	f009 030f 	and.w	r3, r9, #15
 800a236:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a23a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a23e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a242:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a246:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a24a:	d016      	beq.n	800a27a <_dtoa_r+0x382>
 800a24c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a250:	4b93      	ldr	r3, [pc, #588]	; (800a4a0 <_dtoa_r+0x5a8>)
 800a252:	2703      	movs	r7, #3
 800a254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a258:	f7f6 fa68 	bl	800072c <__aeabi_ddiv>
 800a25c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a260:	f004 040f 	and.w	r4, r4, #15
 800a264:	4e8e      	ldr	r6, [pc, #568]	; (800a4a0 <_dtoa_r+0x5a8>)
 800a266:	b954      	cbnz	r4, 800a27e <_dtoa_r+0x386>
 800a268:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a26c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a270:	f7f6 fa5c 	bl	800072c <__aeabi_ddiv>
 800a274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a278:	e029      	b.n	800a2ce <_dtoa_r+0x3d6>
 800a27a:	2702      	movs	r7, #2
 800a27c:	e7f2      	b.n	800a264 <_dtoa_r+0x36c>
 800a27e:	07e1      	lsls	r1, r4, #31
 800a280:	d508      	bpl.n	800a294 <_dtoa_r+0x39c>
 800a282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a286:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a28a:	f7f6 f925 	bl	80004d8 <__aeabi_dmul>
 800a28e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a292:	3701      	adds	r7, #1
 800a294:	1064      	asrs	r4, r4, #1
 800a296:	3608      	adds	r6, #8
 800a298:	e7e5      	b.n	800a266 <_dtoa_r+0x36e>
 800a29a:	f000 80a5 	beq.w	800a3e8 <_dtoa_r+0x4f0>
 800a29e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2a2:	f1c9 0400 	rsb	r4, r9, #0
 800a2a6:	4b7d      	ldr	r3, [pc, #500]	; (800a49c <_dtoa_r+0x5a4>)
 800a2a8:	f004 020f 	and.w	r2, r4, #15
 800a2ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f7f6 f910 	bl	80004d8 <__aeabi_dmul>
 800a2b8:	2702      	movs	r7, #2
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2c0:	4e77      	ldr	r6, [pc, #476]	; (800a4a0 <_dtoa_r+0x5a8>)
 800a2c2:	1124      	asrs	r4, r4, #4
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	f040 8084 	bne.w	800a3d2 <_dtoa_r+0x4da>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1d2      	bne.n	800a274 <_dtoa_r+0x37c>
 800a2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 808b 	beq.w	800a3ec <_dtoa_r+0x4f4>
 800a2d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a2da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	4b6f      	ldr	r3, [pc, #444]	; (800a4a4 <_dtoa_r+0x5ac>)
 800a2e6:	f7f6 fb69 	bl	80009bc <__aeabi_dcmplt>
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d07e      	beq.n	800a3ec <_dtoa_r+0x4f4>
 800a2ee:	9b02      	ldr	r3, [sp, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d07b      	beq.n	800a3ec <_dtoa_r+0x4f4>
 800a2f4:	f1bb 0f00 	cmp.w	fp, #0
 800a2f8:	dd38      	ble.n	800a36c <_dtoa_r+0x474>
 800a2fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2fe:	2200      	movs	r2, #0
 800a300:	4b69      	ldr	r3, [pc, #420]	; (800a4a8 <_dtoa_r+0x5b0>)
 800a302:	f7f6 f8e9 	bl	80004d8 <__aeabi_dmul>
 800a306:	465c      	mov	r4, fp
 800a308:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a30c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a310:	3701      	adds	r7, #1
 800a312:	4638      	mov	r0, r7
 800a314:	f7f6 f876 	bl	8000404 <__aeabi_i2d>
 800a318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a31c:	f7f6 f8dc 	bl	80004d8 <__aeabi_dmul>
 800a320:	2200      	movs	r2, #0
 800a322:	4b62      	ldr	r3, [pc, #392]	; (800a4ac <_dtoa_r+0x5b4>)
 800a324:	f7f5 ff22 	bl	800016c <__adddf3>
 800a328:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a32c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a330:	9611      	str	r6, [sp, #68]	; 0x44
 800a332:	2c00      	cmp	r4, #0
 800a334:	d15d      	bne.n	800a3f2 <_dtoa_r+0x4fa>
 800a336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a33a:	2200      	movs	r2, #0
 800a33c:	4b5c      	ldr	r3, [pc, #368]	; (800a4b0 <_dtoa_r+0x5b8>)
 800a33e:	f7f5 ff13 	bl	8000168 <__aeabi_dsub>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a34a:	4633      	mov	r3, r6
 800a34c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a34e:	f7f6 fb53 	bl	80009f8 <__aeabi_dcmpgt>
 800a352:	2800      	cmp	r0, #0
 800a354:	f040 829e 	bne.w	800a894 <_dtoa_r+0x99c>
 800a358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a35c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a35e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a362:	f7f6 fb2b 	bl	80009bc <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	f040 8292 	bne.w	800a890 <_dtoa_r+0x998>
 800a36c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a370:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a376:	2b00      	cmp	r3, #0
 800a378:	f2c0 8153 	blt.w	800a622 <_dtoa_r+0x72a>
 800a37c:	f1b9 0f0e 	cmp.w	r9, #14
 800a380:	f300 814f 	bgt.w	800a622 <_dtoa_r+0x72a>
 800a384:	4b45      	ldr	r3, [pc, #276]	; (800a49c <_dtoa_r+0x5a4>)
 800a386:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a38a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a38e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a392:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a394:	2b00      	cmp	r3, #0
 800a396:	f280 80db 	bge.w	800a550 <_dtoa_r+0x658>
 800a39a:	9b02      	ldr	r3, [sp, #8]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f300 80d7 	bgt.w	800a550 <_dtoa_r+0x658>
 800a3a2:	f040 8274 	bne.w	800a88e <_dtoa_r+0x996>
 800a3a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	4b40      	ldr	r3, [pc, #256]	; (800a4b0 <_dtoa_r+0x5b8>)
 800a3ae:	f7f6 f893 	bl	80004d8 <__aeabi_dmul>
 800a3b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b6:	f7f6 fb15 	bl	80009e4 <__aeabi_dcmpge>
 800a3ba:	9c02      	ldr	r4, [sp, #8]
 800a3bc:	4626      	mov	r6, r4
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	f040 824a 	bne.w	800a858 <_dtoa_r+0x960>
 800a3c4:	2331      	movs	r3, #49	; 0x31
 800a3c6:	9f08      	ldr	r7, [sp, #32]
 800a3c8:	f109 0901 	add.w	r9, r9, #1
 800a3cc:	f807 3b01 	strb.w	r3, [r7], #1
 800a3d0:	e246      	b.n	800a860 <_dtoa_r+0x968>
 800a3d2:	07e2      	lsls	r2, r4, #31
 800a3d4:	d505      	bpl.n	800a3e2 <_dtoa_r+0x4ea>
 800a3d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3da:	f7f6 f87d 	bl	80004d8 <__aeabi_dmul>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	3701      	adds	r7, #1
 800a3e2:	1064      	asrs	r4, r4, #1
 800a3e4:	3608      	adds	r6, #8
 800a3e6:	e76d      	b.n	800a2c4 <_dtoa_r+0x3cc>
 800a3e8:	2702      	movs	r7, #2
 800a3ea:	e770      	b.n	800a2ce <_dtoa_r+0x3d6>
 800a3ec:	46c8      	mov	r8, r9
 800a3ee:	9c02      	ldr	r4, [sp, #8]
 800a3f0:	e78f      	b.n	800a312 <_dtoa_r+0x41a>
 800a3f2:	9908      	ldr	r1, [sp, #32]
 800a3f4:	4b29      	ldr	r3, [pc, #164]	; (800a49c <_dtoa_r+0x5a4>)
 800a3f6:	4421      	add	r1, r4
 800a3f8:	9112      	str	r1, [sp, #72]	; 0x48
 800a3fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a400:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a404:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a408:	2900      	cmp	r1, #0
 800a40a:	d055      	beq.n	800a4b8 <_dtoa_r+0x5c0>
 800a40c:	2000      	movs	r0, #0
 800a40e:	4929      	ldr	r1, [pc, #164]	; (800a4b4 <_dtoa_r+0x5bc>)
 800a410:	f7f6 f98c 	bl	800072c <__aeabi_ddiv>
 800a414:	463b      	mov	r3, r7
 800a416:	4632      	mov	r2, r6
 800a418:	f7f5 fea6 	bl	8000168 <__aeabi_dsub>
 800a41c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a420:	9f08      	ldr	r7, [sp, #32]
 800a422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a426:	f7f6 fb07 	bl	8000a38 <__aeabi_d2iz>
 800a42a:	4604      	mov	r4, r0
 800a42c:	f7f5 ffea 	bl	8000404 <__aeabi_i2d>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a438:	f7f5 fe96 	bl	8000168 <__aeabi_dsub>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	3430      	adds	r4, #48	; 0x30
 800a442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a44a:	f807 4b01 	strb.w	r4, [r7], #1
 800a44e:	f7f6 fab5 	bl	80009bc <__aeabi_dcmplt>
 800a452:	2800      	cmp	r0, #0
 800a454:	d174      	bne.n	800a540 <_dtoa_r+0x648>
 800a456:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a45a:	2000      	movs	r0, #0
 800a45c:	4911      	ldr	r1, [pc, #68]	; (800a4a4 <_dtoa_r+0x5ac>)
 800a45e:	f7f5 fe83 	bl	8000168 <__aeabi_dsub>
 800a462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a466:	f7f6 faa9 	bl	80009bc <__aeabi_dcmplt>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	f040 80b6 	bne.w	800a5dc <_dtoa_r+0x6e4>
 800a470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a472:	429f      	cmp	r7, r3
 800a474:	f43f af7a 	beq.w	800a36c <_dtoa_r+0x474>
 800a478:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a47c:	2200      	movs	r2, #0
 800a47e:	4b0a      	ldr	r3, [pc, #40]	; (800a4a8 <_dtoa_r+0x5b0>)
 800a480:	f7f6 f82a 	bl	80004d8 <__aeabi_dmul>
 800a484:	2200      	movs	r2, #0
 800a486:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a48a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a48e:	4b06      	ldr	r3, [pc, #24]	; (800a4a8 <_dtoa_r+0x5b0>)
 800a490:	f7f6 f822 	bl	80004d8 <__aeabi_dmul>
 800a494:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a498:	e7c3      	b.n	800a422 <_dtoa_r+0x52a>
 800a49a:	bf00      	nop
 800a49c:	0800cdf8 	.word	0x0800cdf8
 800a4a0:	0800cdd0 	.word	0x0800cdd0
 800a4a4:	3ff00000 	.word	0x3ff00000
 800a4a8:	40240000 	.word	0x40240000
 800a4ac:	401c0000 	.word	0x401c0000
 800a4b0:	40140000 	.word	0x40140000
 800a4b4:	3fe00000 	.word	0x3fe00000
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f6 f80c 	bl	80004d8 <__aeabi_dmul>
 800a4c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4c6:	9c08      	ldr	r4, [sp, #32]
 800a4c8:	9314      	str	r3, [sp, #80]	; 0x50
 800a4ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ce:	f7f6 fab3 	bl	8000a38 <__aeabi_d2iz>
 800a4d2:	9015      	str	r0, [sp, #84]	; 0x54
 800a4d4:	f7f5 ff96 	bl	8000404 <__aeabi_i2d>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4e0:	f7f5 fe42 	bl	8000168 <__aeabi_dsub>
 800a4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	3330      	adds	r3, #48	; 0x30
 800a4ea:	f804 3b01 	strb.w	r3, [r4], #1
 800a4ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	429c      	cmp	r4, r3
 800a4f4:	f04f 0200 	mov.w	r2, #0
 800a4f8:	d124      	bne.n	800a544 <_dtoa_r+0x64c>
 800a4fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4fe:	4bb3      	ldr	r3, [pc, #716]	; (800a7cc <_dtoa_r+0x8d4>)
 800a500:	f7f5 fe34 	bl	800016c <__adddf3>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4630      	mov	r0, r6
 800a50a:	4639      	mov	r1, r7
 800a50c:	f7f6 fa74 	bl	80009f8 <__aeabi_dcmpgt>
 800a510:	2800      	cmp	r0, #0
 800a512:	d162      	bne.n	800a5da <_dtoa_r+0x6e2>
 800a514:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a518:	2000      	movs	r0, #0
 800a51a:	49ac      	ldr	r1, [pc, #688]	; (800a7cc <_dtoa_r+0x8d4>)
 800a51c:	f7f5 fe24 	bl	8000168 <__aeabi_dsub>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f6 fa48 	bl	80009bc <__aeabi_dcmplt>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	f43f af1d 	beq.w	800a36c <_dtoa_r+0x474>
 800a532:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a534:	1e7b      	subs	r3, r7, #1
 800a536:	9314      	str	r3, [sp, #80]	; 0x50
 800a538:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a53c:	2b30      	cmp	r3, #48	; 0x30
 800a53e:	d0f8      	beq.n	800a532 <_dtoa_r+0x63a>
 800a540:	46c1      	mov	r9, r8
 800a542:	e03a      	b.n	800a5ba <_dtoa_r+0x6c2>
 800a544:	4ba2      	ldr	r3, [pc, #648]	; (800a7d0 <_dtoa_r+0x8d8>)
 800a546:	f7f5 ffc7 	bl	80004d8 <__aeabi_dmul>
 800a54a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a54e:	e7bc      	b.n	800a4ca <_dtoa_r+0x5d2>
 800a550:	9f08      	ldr	r7, [sp, #32]
 800a552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a55a:	f7f6 f8e7 	bl	800072c <__aeabi_ddiv>
 800a55e:	f7f6 fa6b 	bl	8000a38 <__aeabi_d2iz>
 800a562:	4604      	mov	r4, r0
 800a564:	f7f5 ff4e 	bl	8000404 <__aeabi_i2d>
 800a568:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a56c:	f7f5 ffb4 	bl	80004d8 <__aeabi_dmul>
 800a570:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a574:	460b      	mov	r3, r1
 800a576:	4602      	mov	r2, r0
 800a578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a57c:	f7f5 fdf4 	bl	8000168 <__aeabi_dsub>
 800a580:	f807 6b01 	strb.w	r6, [r7], #1
 800a584:	9e08      	ldr	r6, [sp, #32]
 800a586:	9b02      	ldr	r3, [sp, #8]
 800a588:	1bbe      	subs	r6, r7, r6
 800a58a:	42b3      	cmp	r3, r6
 800a58c:	d13a      	bne.n	800a604 <_dtoa_r+0x70c>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	f7f5 fdeb 	bl	800016c <__adddf3>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a59e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5a2:	f7f6 fa29 	bl	80009f8 <__aeabi_dcmpgt>
 800a5a6:	bb58      	cbnz	r0, 800a600 <_dtoa_r+0x708>
 800a5a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b0:	f7f6 f9fa 	bl	80009a8 <__aeabi_dcmpeq>
 800a5b4:	b108      	cbz	r0, 800a5ba <_dtoa_r+0x6c2>
 800a5b6:	07e1      	lsls	r1, r4, #31
 800a5b8:	d422      	bmi.n	800a600 <_dtoa_r+0x708>
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	4651      	mov	r1, sl
 800a5be:	f000 fae3 	bl	800ab88 <_Bfree>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	703b      	strb	r3, [r7, #0]
 800a5c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a5c8:	f109 0001 	add.w	r0, r9, #1
 800a5cc:	6018      	str	r0, [r3, #0]
 800a5ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f43f acdf 	beq.w	8009f94 <_dtoa_r+0x9c>
 800a5d6:	601f      	str	r7, [r3, #0]
 800a5d8:	e4dc      	b.n	8009f94 <_dtoa_r+0x9c>
 800a5da:	4627      	mov	r7, r4
 800a5dc:	463b      	mov	r3, r7
 800a5de:	461f      	mov	r7, r3
 800a5e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5e4:	2a39      	cmp	r2, #57	; 0x39
 800a5e6:	d107      	bne.n	800a5f8 <_dtoa_r+0x700>
 800a5e8:	9a08      	ldr	r2, [sp, #32]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d1f7      	bne.n	800a5de <_dtoa_r+0x6e6>
 800a5ee:	2230      	movs	r2, #48	; 0x30
 800a5f0:	9908      	ldr	r1, [sp, #32]
 800a5f2:	f108 0801 	add.w	r8, r8, #1
 800a5f6:	700a      	strb	r2, [r1, #0]
 800a5f8:	781a      	ldrb	r2, [r3, #0]
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	701a      	strb	r2, [r3, #0]
 800a5fe:	e79f      	b.n	800a540 <_dtoa_r+0x648>
 800a600:	46c8      	mov	r8, r9
 800a602:	e7eb      	b.n	800a5dc <_dtoa_r+0x6e4>
 800a604:	2200      	movs	r2, #0
 800a606:	4b72      	ldr	r3, [pc, #456]	; (800a7d0 <_dtoa_r+0x8d8>)
 800a608:	f7f5 ff66 	bl	80004d8 <__aeabi_dmul>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a614:	2200      	movs	r2, #0
 800a616:	2300      	movs	r3, #0
 800a618:	f7f6 f9c6 	bl	80009a8 <__aeabi_dcmpeq>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d098      	beq.n	800a552 <_dtoa_r+0x65a>
 800a620:	e7cb      	b.n	800a5ba <_dtoa_r+0x6c2>
 800a622:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a624:	2a00      	cmp	r2, #0
 800a626:	f000 80cd 	beq.w	800a7c4 <_dtoa_r+0x8cc>
 800a62a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a62c:	2a01      	cmp	r2, #1
 800a62e:	f300 80af 	bgt.w	800a790 <_dtoa_r+0x898>
 800a632:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a634:	2a00      	cmp	r2, #0
 800a636:	f000 80a7 	beq.w	800a788 <_dtoa_r+0x890>
 800a63a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a63e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a640:	9f06      	ldr	r7, [sp, #24]
 800a642:	9a06      	ldr	r2, [sp, #24]
 800a644:	2101      	movs	r1, #1
 800a646:	441a      	add	r2, r3
 800a648:	9206      	str	r2, [sp, #24]
 800a64a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a64c:	4628      	mov	r0, r5
 800a64e:	441a      	add	r2, r3
 800a650:	9209      	str	r2, [sp, #36]	; 0x24
 800a652:	f000 fb53 	bl	800acfc <__i2b>
 800a656:	4606      	mov	r6, r0
 800a658:	2f00      	cmp	r7, #0
 800a65a:	dd0c      	ble.n	800a676 <_dtoa_r+0x77e>
 800a65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd09      	ble.n	800a676 <_dtoa_r+0x77e>
 800a662:	42bb      	cmp	r3, r7
 800a664:	bfa8      	it	ge
 800a666:	463b      	movge	r3, r7
 800a668:	9a06      	ldr	r2, [sp, #24]
 800a66a:	1aff      	subs	r7, r7, r3
 800a66c:	1ad2      	subs	r2, r2, r3
 800a66e:	9206      	str	r2, [sp, #24]
 800a670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	9309      	str	r3, [sp, #36]	; 0x24
 800a676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a678:	b1f3      	cbz	r3, 800a6b8 <_dtoa_r+0x7c0>
 800a67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 80a9 	beq.w	800a7d4 <_dtoa_r+0x8dc>
 800a682:	2c00      	cmp	r4, #0
 800a684:	dd10      	ble.n	800a6a8 <_dtoa_r+0x7b0>
 800a686:	4631      	mov	r1, r6
 800a688:	4622      	mov	r2, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 fbf0 	bl	800ae70 <__pow5mult>
 800a690:	4652      	mov	r2, sl
 800a692:	4601      	mov	r1, r0
 800a694:	4606      	mov	r6, r0
 800a696:	4628      	mov	r0, r5
 800a698:	f000 fb46 	bl	800ad28 <__multiply>
 800a69c:	4680      	mov	r8, r0
 800a69e:	4651      	mov	r1, sl
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f000 fa71 	bl	800ab88 <_Bfree>
 800a6a6:	46c2      	mov	sl, r8
 800a6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6aa:	1b1a      	subs	r2, r3, r4
 800a6ac:	d004      	beq.n	800a6b8 <_dtoa_r+0x7c0>
 800a6ae:	4651      	mov	r1, sl
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	f000 fbdd 	bl	800ae70 <__pow5mult>
 800a6b6:	4682      	mov	sl, r0
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f000 fb1e 	bl	800acfc <__i2b>
 800a6c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f340 8087 	ble.w	800a7d8 <_dtoa_r+0x8e0>
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	4601      	mov	r1, r0
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	f000 fbce 	bl	800ae70 <__pow5mult>
 800a6d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	f340 8080 	ble.w	800a7de <_dtoa_r+0x8e6>
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	6923      	ldr	r3, [r4, #16]
 800a6e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6e8:	6918      	ldr	r0, [r3, #16]
 800a6ea:	f000 fab9 	bl	800ac60 <__hi0bits>
 800a6ee:	f1c0 0020 	rsb	r0, r0, #32
 800a6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f4:	4418      	add	r0, r3
 800a6f6:	f010 001f 	ands.w	r0, r0, #31
 800a6fa:	f000 8092 	beq.w	800a822 <_dtoa_r+0x92a>
 800a6fe:	f1c0 0320 	rsb	r3, r0, #32
 800a702:	2b04      	cmp	r3, #4
 800a704:	f340 808a 	ble.w	800a81c <_dtoa_r+0x924>
 800a708:	f1c0 001c 	rsb	r0, r0, #28
 800a70c:	9b06      	ldr	r3, [sp, #24]
 800a70e:	4407      	add	r7, r0
 800a710:	4403      	add	r3, r0
 800a712:	9306      	str	r3, [sp, #24]
 800a714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a716:	4403      	add	r3, r0
 800a718:	9309      	str	r3, [sp, #36]	; 0x24
 800a71a:	9b06      	ldr	r3, [sp, #24]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	dd05      	ble.n	800a72c <_dtoa_r+0x834>
 800a720:	4651      	mov	r1, sl
 800a722:	461a      	mov	r2, r3
 800a724:	4628      	mov	r0, r5
 800a726:	f000 fbfd 	bl	800af24 <__lshift>
 800a72a:	4682      	mov	sl, r0
 800a72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd05      	ble.n	800a73e <_dtoa_r+0x846>
 800a732:	4621      	mov	r1, r4
 800a734:	461a      	mov	r2, r3
 800a736:	4628      	mov	r0, r5
 800a738:	f000 fbf4 	bl	800af24 <__lshift>
 800a73c:	4604      	mov	r4, r0
 800a73e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a740:	2b00      	cmp	r3, #0
 800a742:	d070      	beq.n	800a826 <_dtoa_r+0x92e>
 800a744:	4621      	mov	r1, r4
 800a746:	4650      	mov	r0, sl
 800a748:	f000 fc58 	bl	800affc <__mcmp>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	da6a      	bge.n	800a826 <_dtoa_r+0x92e>
 800a750:	2300      	movs	r3, #0
 800a752:	4651      	mov	r1, sl
 800a754:	220a      	movs	r2, #10
 800a756:	4628      	mov	r0, r5
 800a758:	f000 fa38 	bl	800abcc <__multadd>
 800a75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a75e:	4682      	mov	sl, r0
 800a760:	f109 39ff 	add.w	r9, r9, #4294967295
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8193 	beq.w	800aa90 <_dtoa_r+0xb98>
 800a76a:	4631      	mov	r1, r6
 800a76c:	2300      	movs	r3, #0
 800a76e:	220a      	movs	r2, #10
 800a770:	4628      	mov	r0, r5
 800a772:	f000 fa2b 	bl	800abcc <__multadd>
 800a776:	f1bb 0f00 	cmp.w	fp, #0
 800a77a:	4606      	mov	r6, r0
 800a77c:	f300 8093 	bgt.w	800a8a6 <_dtoa_r+0x9ae>
 800a780:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a782:	2b02      	cmp	r3, #2
 800a784:	dc57      	bgt.n	800a836 <_dtoa_r+0x93e>
 800a786:	e08e      	b.n	800a8a6 <_dtoa_r+0x9ae>
 800a788:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a78a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a78e:	e756      	b.n	800a63e <_dtoa_r+0x746>
 800a790:	9b02      	ldr	r3, [sp, #8]
 800a792:	1e5c      	subs	r4, r3, #1
 800a794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a796:	42a3      	cmp	r3, r4
 800a798:	bfb7      	itett	lt
 800a79a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a79c:	1b1c      	subge	r4, r3, r4
 800a79e:	1ae2      	sublt	r2, r4, r3
 800a7a0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a7a2:	bfbe      	ittt	lt
 800a7a4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a7a6:	189b      	addlt	r3, r3, r2
 800a7a8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a7aa:	9b02      	ldr	r3, [sp, #8]
 800a7ac:	bfb8      	it	lt
 800a7ae:	2400      	movlt	r4, #0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfbb      	ittet	lt
 800a7b4:	9b06      	ldrlt	r3, [sp, #24]
 800a7b6:	9a02      	ldrlt	r2, [sp, #8]
 800a7b8:	9f06      	ldrge	r7, [sp, #24]
 800a7ba:	1a9f      	sublt	r7, r3, r2
 800a7bc:	bfac      	ite	ge
 800a7be:	9b02      	ldrge	r3, [sp, #8]
 800a7c0:	2300      	movlt	r3, #0
 800a7c2:	e73e      	b.n	800a642 <_dtoa_r+0x74a>
 800a7c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a7c6:	9f06      	ldr	r7, [sp, #24]
 800a7c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a7ca:	e745      	b.n	800a658 <_dtoa_r+0x760>
 800a7cc:	3fe00000 	.word	0x3fe00000
 800a7d0:	40240000 	.word	0x40240000
 800a7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7d6:	e76a      	b.n	800a6ae <_dtoa_r+0x7b6>
 800a7d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	dc19      	bgt.n	800a812 <_dtoa_r+0x91a>
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	b9bb      	cbnz	r3, 800a812 <_dtoa_r+0x91a>
 800a7e2:	9b05      	ldr	r3, [sp, #20]
 800a7e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7e8:	b99b      	cbnz	r3, 800a812 <_dtoa_r+0x91a>
 800a7ea:	9b05      	ldr	r3, [sp, #20]
 800a7ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7f0:	0d1b      	lsrs	r3, r3, #20
 800a7f2:	051b      	lsls	r3, r3, #20
 800a7f4:	b183      	cbz	r3, 800a818 <_dtoa_r+0x920>
 800a7f6:	f04f 0801 	mov.w	r8, #1
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	9306      	str	r3, [sp, #24]
 800a800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a802:	3301      	adds	r3, #1
 800a804:	9309      	str	r3, [sp, #36]	; 0x24
 800a806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f47f af6a 	bne.w	800a6e2 <_dtoa_r+0x7ea>
 800a80e:	2001      	movs	r0, #1
 800a810:	e76f      	b.n	800a6f2 <_dtoa_r+0x7fa>
 800a812:	f04f 0800 	mov.w	r8, #0
 800a816:	e7f6      	b.n	800a806 <_dtoa_r+0x90e>
 800a818:	4698      	mov	r8, r3
 800a81a:	e7f4      	b.n	800a806 <_dtoa_r+0x90e>
 800a81c:	f43f af7d 	beq.w	800a71a <_dtoa_r+0x822>
 800a820:	4618      	mov	r0, r3
 800a822:	301c      	adds	r0, #28
 800a824:	e772      	b.n	800a70c <_dtoa_r+0x814>
 800a826:	9b02      	ldr	r3, [sp, #8]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dc36      	bgt.n	800a89a <_dtoa_r+0x9a2>
 800a82c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a82e:	2b02      	cmp	r3, #2
 800a830:	dd33      	ble.n	800a89a <_dtoa_r+0x9a2>
 800a832:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a836:	f1bb 0f00 	cmp.w	fp, #0
 800a83a:	d10d      	bne.n	800a858 <_dtoa_r+0x960>
 800a83c:	4621      	mov	r1, r4
 800a83e:	465b      	mov	r3, fp
 800a840:	2205      	movs	r2, #5
 800a842:	4628      	mov	r0, r5
 800a844:	f000 f9c2 	bl	800abcc <__multadd>
 800a848:	4601      	mov	r1, r0
 800a84a:	4604      	mov	r4, r0
 800a84c:	4650      	mov	r0, sl
 800a84e:	f000 fbd5 	bl	800affc <__mcmp>
 800a852:	2800      	cmp	r0, #0
 800a854:	f73f adb6 	bgt.w	800a3c4 <_dtoa_r+0x4cc>
 800a858:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a85a:	9f08      	ldr	r7, [sp, #32]
 800a85c:	ea6f 0903 	mvn.w	r9, r3
 800a860:	f04f 0800 	mov.w	r8, #0
 800a864:	4621      	mov	r1, r4
 800a866:	4628      	mov	r0, r5
 800a868:	f000 f98e 	bl	800ab88 <_Bfree>
 800a86c:	2e00      	cmp	r6, #0
 800a86e:	f43f aea4 	beq.w	800a5ba <_dtoa_r+0x6c2>
 800a872:	f1b8 0f00 	cmp.w	r8, #0
 800a876:	d005      	beq.n	800a884 <_dtoa_r+0x98c>
 800a878:	45b0      	cmp	r8, r6
 800a87a:	d003      	beq.n	800a884 <_dtoa_r+0x98c>
 800a87c:	4641      	mov	r1, r8
 800a87e:	4628      	mov	r0, r5
 800a880:	f000 f982 	bl	800ab88 <_Bfree>
 800a884:	4631      	mov	r1, r6
 800a886:	4628      	mov	r0, r5
 800a888:	f000 f97e 	bl	800ab88 <_Bfree>
 800a88c:	e695      	b.n	800a5ba <_dtoa_r+0x6c2>
 800a88e:	2400      	movs	r4, #0
 800a890:	4626      	mov	r6, r4
 800a892:	e7e1      	b.n	800a858 <_dtoa_r+0x960>
 800a894:	46c1      	mov	r9, r8
 800a896:	4626      	mov	r6, r4
 800a898:	e594      	b.n	800a3c4 <_dtoa_r+0x4cc>
 800a89a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a89c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80fc 	beq.w	800aa9e <_dtoa_r+0xba6>
 800a8a6:	2f00      	cmp	r7, #0
 800a8a8:	dd05      	ble.n	800a8b6 <_dtoa_r+0x9be>
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	463a      	mov	r2, r7
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 fb38 	bl	800af24 <__lshift>
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ba:	d05c      	beq.n	800a976 <_dtoa_r+0xa7e>
 800a8bc:	4628      	mov	r0, r5
 800a8be:	6871      	ldr	r1, [r6, #4]
 800a8c0:	f000 f922 	bl	800ab08 <_Balloc>
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	b928      	cbnz	r0, 800a8d4 <_dtoa_r+0x9dc>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8ce:	4b7e      	ldr	r3, [pc, #504]	; (800aac8 <_dtoa_r+0xbd0>)
 800a8d0:	f7ff bb26 	b.w	8009f20 <_dtoa_r+0x28>
 800a8d4:	6932      	ldr	r2, [r6, #16]
 800a8d6:	f106 010c 	add.w	r1, r6, #12
 800a8da:	3202      	adds	r2, #2
 800a8dc:	0092      	lsls	r2, r2, #2
 800a8de:	300c      	adds	r0, #12
 800a8e0:	f7fe fde6 	bl	80094b0 <memcpy>
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	f000 fb1b 	bl	800af24 <__lshift>
 800a8ee:	46b0      	mov	r8, r6
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	9b08      	ldr	r3, [sp, #32]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	9b08      	ldr	r3, [sp, #32]
 800a8fa:	445b      	add	r3, fp
 800a8fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a8fe:	9b04      	ldr	r3, [sp, #16]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	9309      	str	r3, [sp, #36]	; 0x24
 800a906:	9b02      	ldr	r3, [sp, #8]
 800a908:	4621      	mov	r1, r4
 800a90a:	4650      	mov	r0, sl
 800a90c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a910:	f7ff fa64 	bl	8009ddc <quorem>
 800a914:	4603      	mov	r3, r0
 800a916:	4641      	mov	r1, r8
 800a918:	3330      	adds	r3, #48	; 0x30
 800a91a:	9004      	str	r0, [sp, #16]
 800a91c:	4650      	mov	r0, sl
 800a91e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a920:	f000 fb6c 	bl	800affc <__mcmp>
 800a924:	4632      	mov	r2, r6
 800a926:	9006      	str	r0, [sp, #24]
 800a928:	4621      	mov	r1, r4
 800a92a:	4628      	mov	r0, r5
 800a92c:	f000 fb82 	bl	800b034 <__mdiff>
 800a930:	68c2      	ldr	r2, [r0, #12]
 800a932:	4607      	mov	r7, r0
 800a934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a936:	bb02      	cbnz	r2, 800a97a <_dtoa_r+0xa82>
 800a938:	4601      	mov	r1, r0
 800a93a:	4650      	mov	r0, sl
 800a93c:	f000 fb5e 	bl	800affc <__mcmp>
 800a940:	4602      	mov	r2, r0
 800a942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a944:	4639      	mov	r1, r7
 800a946:	4628      	mov	r0, r5
 800a948:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a94c:	f000 f91c 	bl	800ab88 <_Bfree>
 800a950:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a954:	9f02      	ldr	r7, [sp, #8]
 800a956:	ea43 0102 	orr.w	r1, r3, r2
 800a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95c:	430b      	orrs	r3, r1
 800a95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a960:	d10d      	bne.n	800a97e <_dtoa_r+0xa86>
 800a962:	2b39      	cmp	r3, #57	; 0x39
 800a964:	d027      	beq.n	800a9b6 <_dtoa_r+0xabe>
 800a966:	9a06      	ldr	r2, [sp, #24]
 800a968:	2a00      	cmp	r2, #0
 800a96a:	dd01      	ble.n	800a970 <_dtoa_r+0xa78>
 800a96c:	9b04      	ldr	r3, [sp, #16]
 800a96e:	3331      	adds	r3, #49	; 0x31
 800a970:	f88b 3000 	strb.w	r3, [fp]
 800a974:	e776      	b.n	800a864 <_dtoa_r+0x96c>
 800a976:	4630      	mov	r0, r6
 800a978:	e7b9      	b.n	800a8ee <_dtoa_r+0x9f6>
 800a97a:	2201      	movs	r2, #1
 800a97c:	e7e2      	b.n	800a944 <_dtoa_r+0xa4c>
 800a97e:	9906      	ldr	r1, [sp, #24]
 800a980:	2900      	cmp	r1, #0
 800a982:	db04      	blt.n	800a98e <_dtoa_r+0xa96>
 800a984:	9822      	ldr	r0, [sp, #136]	; 0x88
 800a986:	4301      	orrs	r1, r0
 800a988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a98a:	4301      	orrs	r1, r0
 800a98c:	d120      	bne.n	800a9d0 <_dtoa_r+0xad8>
 800a98e:	2a00      	cmp	r2, #0
 800a990:	ddee      	ble.n	800a970 <_dtoa_r+0xa78>
 800a992:	4651      	mov	r1, sl
 800a994:	2201      	movs	r2, #1
 800a996:	4628      	mov	r0, r5
 800a998:	9302      	str	r3, [sp, #8]
 800a99a:	f000 fac3 	bl	800af24 <__lshift>
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4682      	mov	sl, r0
 800a9a2:	f000 fb2b 	bl	800affc <__mcmp>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	dc02      	bgt.n	800a9b2 <_dtoa_r+0xaba>
 800a9ac:	d1e0      	bne.n	800a970 <_dtoa_r+0xa78>
 800a9ae:	07da      	lsls	r2, r3, #31
 800a9b0:	d5de      	bpl.n	800a970 <_dtoa_r+0xa78>
 800a9b2:	2b39      	cmp	r3, #57	; 0x39
 800a9b4:	d1da      	bne.n	800a96c <_dtoa_r+0xa74>
 800a9b6:	2339      	movs	r3, #57	; 0x39
 800a9b8:	f88b 3000 	strb.w	r3, [fp]
 800a9bc:	463b      	mov	r3, r7
 800a9be:	461f      	mov	r7, r3
 800a9c0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	2a39      	cmp	r2, #57	; 0x39
 800a9c8:	d050      	beq.n	800aa6c <_dtoa_r+0xb74>
 800a9ca:	3201      	adds	r2, #1
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	e749      	b.n	800a864 <_dtoa_r+0x96c>
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	dd03      	ble.n	800a9dc <_dtoa_r+0xae4>
 800a9d4:	2b39      	cmp	r3, #57	; 0x39
 800a9d6:	d0ee      	beq.n	800a9b6 <_dtoa_r+0xabe>
 800a9d8:	3301      	adds	r3, #1
 800a9da:	e7c9      	b.n	800a970 <_dtoa_r+0xa78>
 800a9dc:	9a02      	ldr	r2, [sp, #8]
 800a9de:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a9e4:	428a      	cmp	r2, r1
 800a9e6:	d02a      	beq.n	800aa3e <_dtoa_r+0xb46>
 800a9e8:	4651      	mov	r1, sl
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	220a      	movs	r2, #10
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f000 f8ec 	bl	800abcc <__multadd>
 800a9f4:	45b0      	cmp	r8, r6
 800a9f6:	4682      	mov	sl, r0
 800a9f8:	f04f 0300 	mov.w	r3, #0
 800a9fc:	f04f 020a 	mov.w	r2, #10
 800aa00:	4641      	mov	r1, r8
 800aa02:	4628      	mov	r0, r5
 800aa04:	d107      	bne.n	800aa16 <_dtoa_r+0xb1e>
 800aa06:	f000 f8e1 	bl	800abcc <__multadd>
 800aa0a:	4680      	mov	r8, r0
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	9b02      	ldr	r3, [sp, #8]
 800aa10:	3301      	adds	r3, #1
 800aa12:	9302      	str	r3, [sp, #8]
 800aa14:	e777      	b.n	800a906 <_dtoa_r+0xa0e>
 800aa16:	f000 f8d9 	bl	800abcc <__multadd>
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4680      	mov	r8, r0
 800aa1e:	2300      	movs	r3, #0
 800aa20:	220a      	movs	r2, #10
 800aa22:	4628      	mov	r0, r5
 800aa24:	f000 f8d2 	bl	800abcc <__multadd>
 800aa28:	4606      	mov	r6, r0
 800aa2a:	e7f0      	b.n	800aa0e <_dtoa_r+0xb16>
 800aa2c:	f1bb 0f00 	cmp.w	fp, #0
 800aa30:	bfcc      	ite	gt
 800aa32:	465f      	movgt	r7, fp
 800aa34:	2701      	movle	r7, #1
 800aa36:	f04f 0800 	mov.w	r8, #0
 800aa3a:	9a08      	ldr	r2, [sp, #32]
 800aa3c:	4417      	add	r7, r2
 800aa3e:	4651      	mov	r1, sl
 800aa40:	2201      	movs	r2, #1
 800aa42:	4628      	mov	r0, r5
 800aa44:	9302      	str	r3, [sp, #8]
 800aa46:	f000 fa6d 	bl	800af24 <__lshift>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	f000 fad5 	bl	800affc <__mcmp>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	dcb2      	bgt.n	800a9bc <_dtoa_r+0xac4>
 800aa56:	d102      	bne.n	800aa5e <_dtoa_r+0xb66>
 800aa58:	9b02      	ldr	r3, [sp, #8]
 800aa5a:	07db      	lsls	r3, r3, #31
 800aa5c:	d4ae      	bmi.n	800a9bc <_dtoa_r+0xac4>
 800aa5e:	463b      	mov	r3, r7
 800aa60:	461f      	mov	r7, r3
 800aa62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa66:	2a30      	cmp	r2, #48	; 0x30
 800aa68:	d0fa      	beq.n	800aa60 <_dtoa_r+0xb68>
 800aa6a:	e6fb      	b.n	800a864 <_dtoa_r+0x96c>
 800aa6c:	9a08      	ldr	r2, [sp, #32]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d1a5      	bne.n	800a9be <_dtoa_r+0xac6>
 800aa72:	2331      	movs	r3, #49	; 0x31
 800aa74:	f109 0901 	add.w	r9, r9, #1
 800aa78:	7013      	strb	r3, [r2, #0]
 800aa7a:	e6f3      	b.n	800a864 <_dtoa_r+0x96c>
 800aa7c:	4b13      	ldr	r3, [pc, #76]	; (800aacc <_dtoa_r+0xbd4>)
 800aa7e:	f7ff baa7 	b.w	8009fd0 <_dtoa_r+0xd8>
 800aa82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f47f aa80 	bne.w	8009f8a <_dtoa_r+0x92>
 800aa8a:	4b11      	ldr	r3, [pc, #68]	; (800aad0 <_dtoa_r+0xbd8>)
 800aa8c:	f7ff baa0 	b.w	8009fd0 <_dtoa_r+0xd8>
 800aa90:	f1bb 0f00 	cmp.w	fp, #0
 800aa94:	dc03      	bgt.n	800aa9e <_dtoa_r+0xba6>
 800aa96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	f73f aecc 	bgt.w	800a836 <_dtoa_r+0x93e>
 800aa9e:	9f08      	ldr	r7, [sp, #32]
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	f7ff f99a 	bl	8009ddc <quorem>
 800aaa8:	9a08      	ldr	r2, [sp, #32]
 800aaaa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aaae:	f807 3b01 	strb.w	r3, [r7], #1
 800aab2:	1aba      	subs	r2, r7, r2
 800aab4:	4593      	cmp	fp, r2
 800aab6:	ddb9      	ble.n	800aa2c <_dtoa_r+0xb34>
 800aab8:	4651      	mov	r1, sl
 800aaba:	2300      	movs	r3, #0
 800aabc:	220a      	movs	r2, #10
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 f884 	bl	800abcc <__multadd>
 800aac4:	4682      	mov	sl, r0
 800aac6:	e7eb      	b.n	800aaa0 <_dtoa_r+0xba8>
 800aac8:	0800cd5b 	.word	0x0800cd5b
 800aacc:	0800ccb4 	.word	0x0800ccb4
 800aad0:	0800ccd8 	.word	0x0800ccd8

0800aad4 <_localeconv_r>:
 800aad4:	4800      	ldr	r0, [pc, #0]	; (800aad8 <_localeconv_r+0x4>)
 800aad6:	4770      	bx	lr
 800aad8:	20000198 	.word	0x20000198

0800aadc <malloc>:
 800aadc:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <malloc+0xc>)
 800aade:	4601      	mov	r1, r0
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	f000 bbed 	b.w	800b2c0 <_malloc_r>
 800aae6:	bf00      	nop
 800aae8:	20000044 	.word	0x20000044

0800aaec <memchr>:
 800aaec:	4603      	mov	r3, r0
 800aaee:	b510      	push	{r4, lr}
 800aaf0:	b2c9      	uxtb	r1, r1
 800aaf2:	4402      	add	r2, r0
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	d101      	bne.n	800aafe <memchr+0x12>
 800aafa:	2000      	movs	r0, #0
 800aafc:	e003      	b.n	800ab06 <memchr+0x1a>
 800aafe:	7804      	ldrb	r4, [r0, #0]
 800ab00:	3301      	adds	r3, #1
 800ab02:	428c      	cmp	r4, r1
 800ab04:	d1f6      	bne.n	800aaf4 <memchr+0x8>
 800ab06:	bd10      	pop	{r4, pc}

0800ab08 <_Balloc>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	460d      	mov	r5, r1
 800ab10:	b976      	cbnz	r6, 800ab30 <_Balloc+0x28>
 800ab12:	2010      	movs	r0, #16
 800ab14:	f7ff ffe2 	bl	800aadc <malloc>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab1c:	b920      	cbnz	r0, 800ab28 <_Balloc+0x20>
 800ab1e:	2166      	movs	r1, #102	; 0x66
 800ab20:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <_Balloc+0x78>)
 800ab22:	4818      	ldr	r0, [pc, #96]	; (800ab84 <_Balloc+0x7c>)
 800ab24:	f000 fd92 	bl	800b64c <__assert_func>
 800ab28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab2c:	6006      	str	r6, [r0, #0]
 800ab2e:	60c6      	str	r6, [r0, #12]
 800ab30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab32:	68f3      	ldr	r3, [r6, #12]
 800ab34:	b183      	cbz	r3, 800ab58 <_Balloc+0x50>
 800ab36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab3e:	b9b8      	cbnz	r0, 800ab70 <_Balloc+0x68>
 800ab40:	2101      	movs	r1, #1
 800ab42:	fa01 f605 	lsl.w	r6, r1, r5
 800ab46:	1d72      	adds	r2, r6, #5
 800ab48:	4620      	mov	r0, r4
 800ab4a:	0092      	lsls	r2, r2, #2
 800ab4c:	f000 fb5e 	bl	800b20c <_calloc_r>
 800ab50:	b160      	cbz	r0, 800ab6c <_Balloc+0x64>
 800ab52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab56:	e00e      	b.n	800ab76 <_Balloc+0x6e>
 800ab58:	2221      	movs	r2, #33	; 0x21
 800ab5a:	2104      	movs	r1, #4
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f000 fb55 	bl	800b20c <_calloc_r>
 800ab62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab64:	60f0      	str	r0, [r6, #12]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e4      	bne.n	800ab36 <_Balloc+0x2e>
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
 800ab70:	6802      	ldr	r2, [r0, #0]
 800ab72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab76:	2300      	movs	r3, #0
 800ab78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab7c:	e7f7      	b.n	800ab6e <_Balloc+0x66>
 800ab7e:	bf00      	nop
 800ab80:	0800cce5 	.word	0x0800cce5
 800ab84:	0800cd6c 	.word	0x0800cd6c

0800ab88 <_Bfree>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	460c      	mov	r4, r1
 800ab90:	b976      	cbnz	r6, 800abb0 <_Bfree+0x28>
 800ab92:	2010      	movs	r0, #16
 800ab94:	f7ff ffa2 	bl	800aadc <malloc>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	6268      	str	r0, [r5, #36]	; 0x24
 800ab9c:	b920      	cbnz	r0, 800aba8 <_Bfree+0x20>
 800ab9e:	218a      	movs	r1, #138	; 0x8a
 800aba0:	4b08      	ldr	r3, [pc, #32]	; (800abc4 <_Bfree+0x3c>)
 800aba2:	4809      	ldr	r0, [pc, #36]	; (800abc8 <_Bfree+0x40>)
 800aba4:	f000 fd52 	bl	800b64c <__assert_func>
 800aba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abac:	6006      	str	r6, [r0, #0]
 800abae:	60c6      	str	r6, [r0, #12]
 800abb0:	b13c      	cbz	r4, 800abc2 <_Bfree+0x3a>
 800abb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abb4:	6862      	ldr	r2, [r4, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abbc:	6021      	str	r1, [r4, #0]
 800abbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	0800cce5 	.word	0x0800cce5
 800abc8:	0800cd6c 	.word	0x0800cd6c

0800abcc <__multadd>:
 800abcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd0:	4698      	mov	r8, r3
 800abd2:	460c      	mov	r4, r1
 800abd4:	2300      	movs	r3, #0
 800abd6:	690e      	ldr	r6, [r1, #16]
 800abd8:	4607      	mov	r7, r0
 800abda:	f101 0014 	add.w	r0, r1, #20
 800abde:	6805      	ldr	r5, [r0, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	b2a9      	uxth	r1, r5
 800abe4:	fb02 8101 	mla	r1, r2, r1, r8
 800abe8:	0c2d      	lsrs	r5, r5, #16
 800abea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800abee:	fb02 c505 	mla	r5, r2, r5, ip
 800abf2:	b289      	uxth	r1, r1
 800abf4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800abf8:	429e      	cmp	r6, r3
 800abfa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800abfe:	f840 1b04 	str.w	r1, [r0], #4
 800ac02:	dcec      	bgt.n	800abde <__multadd+0x12>
 800ac04:	f1b8 0f00 	cmp.w	r8, #0
 800ac08:	d022      	beq.n	800ac50 <__multadd+0x84>
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	42b3      	cmp	r3, r6
 800ac0e:	dc19      	bgt.n	800ac44 <__multadd+0x78>
 800ac10:	6861      	ldr	r1, [r4, #4]
 800ac12:	4638      	mov	r0, r7
 800ac14:	3101      	adds	r1, #1
 800ac16:	f7ff ff77 	bl	800ab08 <_Balloc>
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	b928      	cbnz	r0, 800ac2a <__multadd+0x5e>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	21b5      	movs	r1, #181	; 0xb5
 800ac22:	4b0d      	ldr	r3, [pc, #52]	; (800ac58 <__multadd+0x8c>)
 800ac24:	480d      	ldr	r0, [pc, #52]	; (800ac5c <__multadd+0x90>)
 800ac26:	f000 fd11 	bl	800b64c <__assert_func>
 800ac2a:	6922      	ldr	r2, [r4, #16]
 800ac2c:	f104 010c 	add.w	r1, r4, #12
 800ac30:	3202      	adds	r2, #2
 800ac32:	0092      	lsls	r2, r2, #2
 800ac34:	300c      	adds	r0, #12
 800ac36:	f7fe fc3b 	bl	80094b0 <memcpy>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f7ff ffa3 	bl	800ab88 <_Bfree>
 800ac42:	462c      	mov	r4, r5
 800ac44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ac48:	3601      	adds	r6, #1
 800ac4a:	f8c3 8014 	str.w	r8, [r3, #20]
 800ac4e:	6126      	str	r6, [r4, #16]
 800ac50:	4620      	mov	r0, r4
 800ac52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac56:	bf00      	nop
 800ac58:	0800cd5b 	.word	0x0800cd5b
 800ac5c:	0800cd6c 	.word	0x0800cd6c

0800ac60 <__hi0bits>:
 800ac60:	0c02      	lsrs	r2, r0, #16
 800ac62:	0412      	lsls	r2, r2, #16
 800ac64:	4603      	mov	r3, r0
 800ac66:	b9ca      	cbnz	r2, 800ac9c <__hi0bits+0x3c>
 800ac68:	0403      	lsls	r3, r0, #16
 800ac6a:	2010      	movs	r0, #16
 800ac6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac70:	bf04      	itt	eq
 800ac72:	021b      	lsleq	r3, r3, #8
 800ac74:	3008      	addeq	r0, #8
 800ac76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac7a:	bf04      	itt	eq
 800ac7c:	011b      	lsleq	r3, r3, #4
 800ac7e:	3004      	addeq	r0, #4
 800ac80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac84:	bf04      	itt	eq
 800ac86:	009b      	lsleq	r3, r3, #2
 800ac88:	3002      	addeq	r0, #2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	db05      	blt.n	800ac9a <__hi0bits+0x3a>
 800ac8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ac92:	f100 0001 	add.w	r0, r0, #1
 800ac96:	bf08      	it	eq
 800ac98:	2020      	moveq	r0, #32
 800ac9a:	4770      	bx	lr
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	e7e5      	b.n	800ac6c <__hi0bits+0xc>

0800aca0 <__lo0bits>:
 800aca0:	6803      	ldr	r3, [r0, #0]
 800aca2:	4602      	mov	r2, r0
 800aca4:	f013 0007 	ands.w	r0, r3, #7
 800aca8:	d00b      	beq.n	800acc2 <__lo0bits+0x22>
 800acaa:	07d9      	lsls	r1, r3, #31
 800acac:	d422      	bmi.n	800acf4 <__lo0bits+0x54>
 800acae:	0798      	lsls	r0, r3, #30
 800acb0:	bf49      	itett	mi
 800acb2:	085b      	lsrmi	r3, r3, #1
 800acb4:	089b      	lsrpl	r3, r3, #2
 800acb6:	2001      	movmi	r0, #1
 800acb8:	6013      	strmi	r3, [r2, #0]
 800acba:	bf5c      	itt	pl
 800acbc:	2002      	movpl	r0, #2
 800acbe:	6013      	strpl	r3, [r2, #0]
 800acc0:	4770      	bx	lr
 800acc2:	b299      	uxth	r1, r3
 800acc4:	b909      	cbnz	r1, 800acca <__lo0bits+0x2a>
 800acc6:	2010      	movs	r0, #16
 800acc8:	0c1b      	lsrs	r3, r3, #16
 800acca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acce:	bf04      	itt	eq
 800acd0:	0a1b      	lsreq	r3, r3, #8
 800acd2:	3008      	addeq	r0, #8
 800acd4:	0719      	lsls	r1, r3, #28
 800acd6:	bf04      	itt	eq
 800acd8:	091b      	lsreq	r3, r3, #4
 800acda:	3004      	addeq	r0, #4
 800acdc:	0799      	lsls	r1, r3, #30
 800acde:	bf04      	itt	eq
 800ace0:	089b      	lsreq	r3, r3, #2
 800ace2:	3002      	addeq	r0, #2
 800ace4:	07d9      	lsls	r1, r3, #31
 800ace6:	d403      	bmi.n	800acf0 <__lo0bits+0x50>
 800ace8:	085b      	lsrs	r3, r3, #1
 800acea:	f100 0001 	add.w	r0, r0, #1
 800acee:	d003      	beq.n	800acf8 <__lo0bits+0x58>
 800acf0:	6013      	str	r3, [r2, #0]
 800acf2:	4770      	bx	lr
 800acf4:	2000      	movs	r0, #0
 800acf6:	4770      	bx	lr
 800acf8:	2020      	movs	r0, #32
 800acfa:	4770      	bx	lr

0800acfc <__i2b>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	460c      	mov	r4, r1
 800ad00:	2101      	movs	r1, #1
 800ad02:	f7ff ff01 	bl	800ab08 <_Balloc>
 800ad06:	4602      	mov	r2, r0
 800ad08:	b928      	cbnz	r0, 800ad16 <__i2b+0x1a>
 800ad0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad0e:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <__i2b+0x24>)
 800ad10:	4804      	ldr	r0, [pc, #16]	; (800ad24 <__i2b+0x28>)
 800ad12:	f000 fc9b 	bl	800b64c <__assert_func>
 800ad16:	2301      	movs	r3, #1
 800ad18:	6144      	str	r4, [r0, #20]
 800ad1a:	6103      	str	r3, [r0, #16]
 800ad1c:	bd10      	pop	{r4, pc}
 800ad1e:	bf00      	nop
 800ad20:	0800cd5b 	.word	0x0800cd5b
 800ad24:	0800cd6c 	.word	0x0800cd6c

0800ad28 <__multiply>:
 800ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	4614      	mov	r4, r2
 800ad2e:	690a      	ldr	r2, [r1, #16]
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	460d      	mov	r5, r1
 800ad34:	429a      	cmp	r2, r3
 800ad36:	bfbe      	ittt	lt
 800ad38:	460b      	movlt	r3, r1
 800ad3a:	4625      	movlt	r5, r4
 800ad3c:	461c      	movlt	r4, r3
 800ad3e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad46:	68ab      	ldr	r3, [r5, #8]
 800ad48:	6869      	ldr	r1, [r5, #4]
 800ad4a:	eb0a 0709 	add.w	r7, sl, r9
 800ad4e:	42bb      	cmp	r3, r7
 800ad50:	b085      	sub	sp, #20
 800ad52:	bfb8      	it	lt
 800ad54:	3101      	addlt	r1, #1
 800ad56:	f7ff fed7 	bl	800ab08 <_Balloc>
 800ad5a:	b930      	cbnz	r0, 800ad6a <__multiply+0x42>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	f240 115d 	movw	r1, #349	; 0x15d
 800ad62:	4b41      	ldr	r3, [pc, #260]	; (800ae68 <__multiply+0x140>)
 800ad64:	4841      	ldr	r0, [pc, #260]	; (800ae6c <__multiply+0x144>)
 800ad66:	f000 fc71 	bl	800b64c <__assert_func>
 800ad6a:	f100 0614 	add.w	r6, r0, #20
 800ad6e:	4633      	mov	r3, r6
 800ad70:	2200      	movs	r2, #0
 800ad72:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ad76:	4543      	cmp	r3, r8
 800ad78:	d31e      	bcc.n	800adb8 <__multiply+0x90>
 800ad7a:	f105 0c14 	add.w	ip, r5, #20
 800ad7e:	f104 0314 	add.w	r3, r4, #20
 800ad82:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ad86:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ad8a:	9202      	str	r2, [sp, #8]
 800ad8c:	ebac 0205 	sub.w	r2, ip, r5
 800ad90:	3a15      	subs	r2, #21
 800ad92:	f022 0203 	bic.w	r2, r2, #3
 800ad96:	3204      	adds	r2, #4
 800ad98:	f105 0115 	add.w	r1, r5, #21
 800ad9c:	458c      	cmp	ip, r1
 800ad9e:	bf38      	it	cc
 800ada0:	2204      	movcc	r2, #4
 800ada2:	9201      	str	r2, [sp, #4]
 800ada4:	9a02      	ldr	r2, [sp, #8]
 800ada6:	9303      	str	r3, [sp, #12]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d808      	bhi.n	800adbe <__multiply+0x96>
 800adac:	2f00      	cmp	r7, #0
 800adae:	dc55      	bgt.n	800ae5c <__multiply+0x134>
 800adb0:	6107      	str	r7, [r0, #16]
 800adb2:	b005      	add	sp, #20
 800adb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb8:	f843 2b04 	str.w	r2, [r3], #4
 800adbc:	e7db      	b.n	800ad76 <__multiply+0x4e>
 800adbe:	f8b3 a000 	ldrh.w	sl, [r3]
 800adc2:	f1ba 0f00 	cmp.w	sl, #0
 800adc6:	d020      	beq.n	800ae0a <__multiply+0xe2>
 800adc8:	46b1      	mov	r9, r6
 800adca:	2200      	movs	r2, #0
 800adcc:	f105 0e14 	add.w	lr, r5, #20
 800add0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800add4:	f8d9 b000 	ldr.w	fp, [r9]
 800add8:	b2a1      	uxth	r1, r4
 800adda:	fa1f fb8b 	uxth.w	fp, fp
 800adde:	fb0a b101 	mla	r1, sl, r1, fp
 800ade2:	4411      	add	r1, r2
 800ade4:	f8d9 2000 	ldr.w	r2, [r9]
 800ade8:	0c24      	lsrs	r4, r4, #16
 800adea:	0c12      	lsrs	r2, r2, #16
 800adec:	fb0a 2404 	mla	r4, sl, r4, r2
 800adf0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800adf4:	b289      	uxth	r1, r1
 800adf6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800adfa:	45f4      	cmp	ip, lr
 800adfc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ae00:	f849 1b04 	str.w	r1, [r9], #4
 800ae04:	d8e4      	bhi.n	800add0 <__multiply+0xa8>
 800ae06:	9901      	ldr	r1, [sp, #4]
 800ae08:	5072      	str	r2, [r6, r1]
 800ae0a:	9a03      	ldr	r2, [sp, #12]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae12:	f1b9 0f00 	cmp.w	r9, #0
 800ae16:	d01f      	beq.n	800ae58 <__multiply+0x130>
 800ae18:	46b6      	mov	lr, r6
 800ae1a:	f04f 0a00 	mov.w	sl, #0
 800ae1e:	6834      	ldr	r4, [r6, #0]
 800ae20:	f105 0114 	add.w	r1, r5, #20
 800ae24:	880a      	ldrh	r2, [r1, #0]
 800ae26:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae2a:	b2a4      	uxth	r4, r4
 800ae2c:	fb09 b202 	mla	r2, r9, r2, fp
 800ae30:	4492      	add	sl, r2
 800ae32:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae36:	f84e 4b04 	str.w	r4, [lr], #4
 800ae3a:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae3e:	f8be 2000 	ldrh.w	r2, [lr]
 800ae42:	0c24      	lsrs	r4, r4, #16
 800ae44:	fb09 2404 	mla	r4, r9, r4, r2
 800ae48:	458c      	cmp	ip, r1
 800ae4a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae4e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae52:	d8e7      	bhi.n	800ae24 <__multiply+0xfc>
 800ae54:	9a01      	ldr	r2, [sp, #4]
 800ae56:	50b4      	str	r4, [r6, r2]
 800ae58:	3604      	adds	r6, #4
 800ae5a:	e7a3      	b.n	800ada4 <__multiply+0x7c>
 800ae5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1a5      	bne.n	800adb0 <__multiply+0x88>
 800ae64:	3f01      	subs	r7, #1
 800ae66:	e7a1      	b.n	800adac <__multiply+0x84>
 800ae68:	0800cd5b 	.word	0x0800cd5b
 800ae6c:	0800cd6c 	.word	0x0800cd6c

0800ae70 <__pow5mult>:
 800ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae74:	4615      	mov	r5, r2
 800ae76:	f012 0203 	ands.w	r2, r2, #3
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	460f      	mov	r7, r1
 800ae7e:	d007      	beq.n	800ae90 <__pow5mult+0x20>
 800ae80:	4c25      	ldr	r4, [pc, #148]	; (800af18 <__pow5mult+0xa8>)
 800ae82:	3a01      	subs	r2, #1
 800ae84:	2300      	movs	r3, #0
 800ae86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae8a:	f7ff fe9f 	bl	800abcc <__multadd>
 800ae8e:	4607      	mov	r7, r0
 800ae90:	10ad      	asrs	r5, r5, #2
 800ae92:	d03d      	beq.n	800af10 <__pow5mult+0xa0>
 800ae94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae96:	b97c      	cbnz	r4, 800aeb8 <__pow5mult+0x48>
 800ae98:	2010      	movs	r0, #16
 800ae9a:	f7ff fe1f 	bl	800aadc <malloc>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	6270      	str	r0, [r6, #36]	; 0x24
 800aea2:	b928      	cbnz	r0, 800aeb0 <__pow5mult+0x40>
 800aea4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aea8:	4b1c      	ldr	r3, [pc, #112]	; (800af1c <__pow5mult+0xac>)
 800aeaa:	481d      	ldr	r0, [pc, #116]	; (800af20 <__pow5mult+0xb0>)
 800aeac:	f000 fbce 	bl	800b64c <__assert_func>
 800aeb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aeb4:	6004      	str	r4, [r0, #0]
 800aeb6:	60c4      	str	r4, [r0, #12]
 800aeb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aec0:	b94c      	cbnz	r4, 800aed6 <__pow5mult+0x66>
 800aec2:	f240 2171 	movw	r1, #625	; 0x271
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff ff18 	bl	800acfc <__i2b>
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	f8c8 0008 	str.w	r0, [r8, #8]
 800aed4:	6003      	str	r3, [r0, #0]
 800aed6:	f04f 0900 	mov.w	r9, #0
 800aeda:	07eb      	lsls	r3, r5, #31
 800aedc:	d50a      	bpl.n	800aef4 <__pow5mult+0x84>
 800aede:	4639      	mov	r1, r7
 800aee0:	4622      	mov	r2, r4
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff ff20 	bl	800ad28 <__multiply>
 800aee8:	4680      	mov	r8, r0
 800aeea:	4639      	mov	r1, r7
 800aeec:	4630      	mov	r0, r6
 800aeee:	f7ff fe4b 	bl	800ab88 <_Bfree>
 800aef2:	4647      	mov	r7, r8
 800aef4:	106d      	asrs	r5, r5, #1
 800aef6:	d00b      	beq.n	800af10 <__pow5mult+0xa0>
 800aef8:	6820      	ldr	r0, [r4, #0]
 800aefa:	b938      	cbnz	r0, 800af0c <__pow5mult+0x9c>
 800aefc:	4622      	mov	r2, r4
 800aefe:	4621      	mov	r1, r4
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff ff11 	bl	800ad28 <__multiply>
 800af06:	6020      	str	r0, [r4, #0]
 800af08:	f8c0 9000 	str.w	r9, [r0]
 800af0c:	4604      	mov	r4, r0
 800af0e:	e7e4      	b.n	800aeda <__pow5mult+0x6a>
 800af10:	4638      	mov	r0, r7
 800af12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af16:	bf00      	nop
 800af18:	0800cec0 	.word	0x0800cec0
 800af1c:	0800cce5 	.word	0x0800cce5
 800af20:	0800cd6c 	.word	0x0800cd6c

0800af24 <__lshift>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	460c      	mov	r4, r1
 800af2a:	4607      	mov	r7, r0
 800af2c:	4691      	mov	r9, r2
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	6849      	ldr	r1, [r1, #4]
 800af32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af36:	68a3      	ldr	r3, [r4, #8]
 800af38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af3c:	f108 0601 	add.w	r6, r8, #1
 800af40:	42b3      	cmp	r3, r6
 800af42:	db0b      	blt.n	800af5c <__lshift+0x38>
 800af44:	4638      	mov	r0, r7
 800af46:	f7ff fddf 	bl	800ab08 <_Balloc>
 800af4a:	4605      	mov	r5, r0
 800af4c:	b948      	cbnz	r0, 800af62 <__lshift+0x3e>
 800af4e:	4602      	mov	r2, r0
 800af50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af54:	4b27      	ldr	r3, [pc, #156]	; (800aff4 <__lshift+0xd0>)
 800af56:	4828      	ldr	r0, [pc, #160]	; (800aff8 <__lshift+0xd4>)
 800af58:	f000 fb78 	bl	800b64c <__assert_func>
 800af5c:	3101      	adds	r1, #1
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	e7ee      	b.n	800af40 <__lshift+0x1c>
 800af62:	2300      	movs	r3, #0
 800af64:	f100 0114 	add.w	r1, r0, #20
 800af68:	f100 0210 	add.w	r2, r0, #16
 800af6c:	4618      	mov	r0, r3
 800af6e:	4553      	cmp	r3, sl
 800af70:	db33      	blt.n	800afda <__lshift+0xb6>
 800af72:	6920      	ldr	r0, [r4, #16]
 800af74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af78:	f104 0314 	add.w	r3, r4, #20
 800af7c:	f019 091f 	ands.w	r9, r9, #31
 800af80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af88:	d02b      	beq.n	800afe2 <__lshift+0xbe>
 800af8a:	468a      	mov	sl, r1
 800af8c:	2200      	movs	r2, #0
 800af8e:	f1c9 0e20 	rsb	lr, r9, #32
 800af92:	6818      	ldr	r0, [r3, #0]
 800af94:	fa00 f009 	lsl.w	r0, r0, r9
 800af98:	4302      	orrs	r2, r0
 800af9a:	f84a 2b04 	str.w	r2, [sl], #4
 800af9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa2:	459c      	cmp	ip, r3
 800afa4:	fa22 f20e 	lsr.w	r2, r2, lr
 800afa8:	d8f3      	bhi.n	800af92 <__lshift+0x6e>
 800afaa:	ebac 0304 	sub.w	r3, ip, r4
 800afae:	3b15      	subs	r3, #21
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	3304      	adds	r3, #4
 800afb6:	f104 0015 	add.w	r0, r4, #21
 800afba:	4584      	cmp	ip, r0
 800afbc:	bf38      	it	cc
 800afbe:	2304      	movcc	r3, #4
 800afc0:	50ca      	str	r2, [r1, r3]
 800afc2:	b10a      	cbz	r2, 800afc8 <__lshift+0xa4>
 800afc4:	f108 0602 	add.w	r6, r8, #2
 800afc8:	3e01      	subs	r6, #1
 800afca:	4638      	mov	r0, r7
 800afcc:	4621      	mov	r1, r4
 800afce:	612e      	str	r6, [r5, #16]
 800afd0:	f7ff fdda 	bl	800ab88 <_Bfree>
 800afd4:	4628      	mov	r0, r5
 800afd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afda:	f842 0f04 	str.w	r0, [r2, #4]!
 800afde:	3301      	adds	r3, #1
 800afe0:	e7c5      	b.n	800af6e <__lshift+0x4a>
 800afe2:	3904      	subs	r1, #4
 800afe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe8:	459c      	cmp	ip, r3
 800afea:	f841 2f04 	str.w	r2, [r1, #4]!
 800afee:	d8f9      	bhi.n	800afe4 <__lshift+0xc0>
 800aff0:	e7ea      	b.n	800afc8 <__lshift+0xa4>
 800aff2:	bf00      	nop
 800aff4:	0800cd5b 	.word	0x0800cd5b
 800aff8:	0800cd6c 	.word	0x0800cd6c

0800affc <__mcmp>:
 800affc:	4603      	mov	r3, r0
 800affe:	690a      	ldr	r2, [r1, #16]
 800b000:	6900      	ldr	r0, [r0, #16]
 800b002:	b530      	push	{r4, r5, lr}
 800b004:	1a80      	subs	r0, r0, r2
 800b006:	d10d      	bne.n	800b024 <__mcmp+0x28>
 800b008:	3314      	adds	r3, #20
 800b00a:	3114      	adds	r1, #20
 800b00c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b010:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b014:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b018:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b01c:	4295      	cmp	r5, r2
 800b01e:	d002      	beq.n	800b026 <__mcmp+0x2a>
 800b020:	d304      	bcc.n	800b02c <__mcmp+0x30>
 800b022:	2001      	movs	r0, #1
 800b024:	bd30      	pop	{r4, r5, pc}
 800b026:	42a3      	cmp	r3, r4
 800b028:	d3f4      	bcc.n	800b014 <__mcmp+0x18>
 800b02a:	e7fb      	b.n	800b024 <__mcmp+0x28>
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e7f8      	b.n	800b024 <__mcmp+0x28>
	...

0800b034 <__mdiff>:
 800b034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	460c      	mov	r4, r1
 800b03a:	4606      	mov	r6, r0
 800b03c:	4611      	mov	r1, r2
 800b03e:	4620      	mov	r0, r4
 800b040:	4692      	mov	sl, r2
 800b042:	f7ff ffdb 	bl	800affc <__mcmp>
 800b046:	1e05      	subs	r5, r0, #0
 800b048:	d111      	bne.n	800b06e <__mdiff+0x3a>
 800b04a:	4629      	mov	r1, r5
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7ff fd5b 	bl	800ab08 <_Balloc>
 800b052:	4602      	mov	r2, r0
 800b054:	b928      	cbnz	r0, 800b062 <__mdiff+0x2e>
 800b056:	f240 2132 	movw	r1, #562	; 0x232
 800b05a:	4b3c      	ldr	r3, [pc, #240]	; (800b14c <__mdiff+0x118>)
 800b05c:	483c      	ldr	r0, [pc, #240]	; (800b150 <__mdiff+0x11c>)
 800b05e:	f000 faf5 	bl	800b64c <__assert_func>
 800b062:	2301      	movs	r3, #1
 800b064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b068:	4610      	mov	r0, r2
 800b06a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06e:	bfa4      	itt	ge
 800b070:	4653      	movge	r3, sl
 800b072:	46a2      	movge	sl, r4
 800b074:	4630      	mov	r0, r6
 800b076:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b07a:	bfa6      	itte	ge
 800b07c:	461c      	movge	r4, r3
 800b07e:	2500      	movge	r5, #0
 800b080:	2501      	movlt	r5, #1
 800b082:	f7ff fd41 	bl	800ab08 <_Balloc>
 800b086:	4602      	mov	r2, r0
 800b088:	b918      	cbnz	r0, 800b092 <__mdiff+0x5e>
 800b08a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b08e:	4b2f      	ldr	r3, [pc, #188]	; (800b14c <__mdiff+0x118>)
 800b090:	e7e4      	b.n	800b05c <__mdiff+0x28>
 800b092:	f100 0814 	add.w	r8, r0, #20
 800b096:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b09a:	60c5      	str	r5, [r0, #12]
 800b09c:	f04f 0c00 	mov.w	ip, #0
 800b0a0:	f10a 0514 	add.w	r5, sl, #20
 800b0a4:	f10a 0010 	add.w	r0, sl, #16
 800b0a8:	46c2      	mov	sl, r8
 800b0aa:	6926      	ldr	r6, [r4, #16]
 800b0ac:	f104 0914 	add.w	r9, r4, #20
 800b0b0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b0b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0b8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b0bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0c0:	fa1f f18b 	uxth.w	r1, fp
 800b0c4:	4461      	add	r1, ip
 800b0c6:	fa1f fc83 	uxth.w	ip, r3
 800b0ca:	0c1b      	lsrs	r3, r3, #16
 800b0cc:	eba1 010c 	sub.w	r1, r1, ip
 800b0d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b0d8:	b289      	uxth	r1, r1
 800b0da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b0de:	454e      	cmp	r6, r9
 800b0e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b0e4:	f84a 3b04 	str.w	r3, [sl], #4
 800b0e8:	d8e6      	bhi.n	800b0b8 <__mdiff+0x84>
 800b0ea:	1b33      	subs	r3, r6, r4
 800b0ec:	3b15      	subs	r3, #21
 800b0ee:	f023 0303 	bic.w	r3, r3, #3
 800b0f2:	3415      	adds	r4, #21
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	42a6      	cmp	r6, r4
 800b0f8:	bf38      	it	cc
 800b0fa:	2304      	movcc	r3, #4
 800b0fc:	441d      	add	r5, r3
 800b0fe:	4443      	add	r3, r8
 800b100:	461e      	mov	r6, r3
 800b102:	462c      	mov	r4, r5
 800b104:	4574      	cmp	r4, lr
 800b106:	d30e      	bcc.n	800b126 <__mdiff+0xf2>
 800b108:	f10e 0103 	add.w	r1, lr, #3
 800b10c:	1b49      	subs	r1, r1, r5
 800b10e:	f021 0103 	bic.w	r1, r1, #3
 800b112:	3d03      	subs	r5, #3
 800b114:	45ae      	cmp	lr, r5
 800b116:	bf38      	it	cc
 800b118:	2100      	movcc	r1, #0
 800b11a:	4419      	add	r1, r3
 800b11c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b120:	b18b      	cbz	r3, 800b146 <__mdiff+0x112>
 800b122:	6117      	str	r7, [r2, #16]
 800b124:	e7a0      	b.n	800b068 <__mdiff+0x34>
 800b126:	f854 8b04 	ldr.w	r8, [r4], #4
 800b12a:	fa1f f188 	uxth.w	r1, r8
 800b12e:	4461      	add	r1, ip
 800b130:	1408      	asrs	r0, r1, #16
 800b132:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b136:	b289      	uxth	r1, r1
 800b138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b13c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b140:	f846 1b04 	str.w	r1, [r6], #4
 800b144:	e7de      	b.n	800b104 <__mdiff+0xd0>
 800b146:	3f01      	subs	r7, #1
 800b148:	e7e8      	b.n	800b11c <__mdiff+0xe8>
 800b14a:	bf00      	nop
 800b14c:	0800cd5b 	.word	0x0800cd5b
 800b150:	0800cd6c 	.word	0x0800cd6c

0800b154 <__d2b>:
 800b154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b158:	2101      	movs	r1, #1
 800b15a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b15e:	4690      	mov	r8, r2
 800b160:	461d      	mov	r5, r3
 800b162:	f7ff fcd1 	bl	800ab08 <_Balloc>
 800b166:	4604      	mov	r4, r0
 800b168:	b930      	cbnz	r0, 800b178 <__d2b+0x24>
 800b16a:	4602      	mov	r2, r0
 800b16c:	f240 310a 	movw	r1, #778	; 0x30a
 800b170:	4b24      	ldr	r3, [pc, #144]	; (800b204 <__d2b+0xb0>)
 800b172:	4825      	ldr	r0, [pc, #148]	; (800b208 <__d2b+0xb4>)
 800b174:	f000 fa6a 	bl	800b64c <__assert_func>
 800b178:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b17c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b180:	bb2d      	cbnz	r5, 800b1ce <__d2b+0x7a>
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	f1b8 0300 	subs.w	r3, r8, #0
 800b188:	d026      	beq.n	800b1d8 <__d2b+0x84>
 800b18a:	4668      	mov	r0, sp
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	f7ff fd87 	bl	800aca0 <__lo0bits>
 800b192:	9900      	ldr	r1, [sp, #0]
 800b194:	b1f0      	cbz	r0, 800b1d4 <__d2b+0x80>
 800b196:	9a01      	ldr	r2, [sp, #4]
 800b198:	f1c0 0320 	rsb	r3, r0, #32
 800b19c:	fa02 f303 	lsl.w	r3, r2, r3
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	40c2      	lsrs	r2, r0
 800b1a4:	6163      	str	r3, [r4, #20]
 800b1a6:	9201      	str	r2, [sp, #4]
 800b1a8:	9b01      	ldr	r3, [sp, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bf14      	ite	ne
 800b1ae:	2102      	movne	r1, #2
 800b1b0:	2101      	moveq	r1, #1
 800b1b2:	61a3      	str	r3, [r4, #24]
 800b1b4:	6121      	str	r1, [r4, #16]
 800b1b6:	b1c5      	cbz	r5, 800b1ea <__d2b+0x96>
 800b1b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1bc:	4405      	add	r5, r0
 800b1be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1c2:	603d      	str	r5, [r7, #0]
 800b1c4:	6030      	str	r0, [r6, #0]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	b002      	add	sp, #8
 800b1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1d2:	e7d6      	b.n	800b182 <__d2b+0x2e>
 800b1d4:	6161      	str	r1, [r4, #20]
 800b1d6:	e7e7      	b.n	800b1a8 <__d2b+0x54>
 800b1d8:	a801      	add	r0, sp, #4
 800b1da:	f7ff fd61 	bl	800aca0 <__lo0bits>
 800b1de:	2101      	movs	r1, #1
 800b1e0:	9b01      	ldr	r3, [sp, #4]
 800b1e2:	6121      	str	r1, [r4, #16]
 800b1e4:	6163      	str	r3, [r4, #20]
 800b1e6:	3020      	adds	r0, #32
 800b1e8:	e7e5      	b.n	800b1b6 <__d2b+0x62>
 800b1ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b1ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1f2:	6038      	str	r0, [r7, #0]
 800b1f4:	6918      	ldr	r0, [r3, #16]
 800b1f6:	f7ff fd33 	bl	800ac60 <__hi0bits>
 800b1fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b1fe:	6031      	str	r1, [r6, #0]
 800b200:	e7e1      	b.n	800b1c6 <__d2b+0x72>
 800b202:	bf00      	nop
 800b204:	0800cd5b 	.word	0x0800cd5b
 800b208:	0800cd6c 	.word	0x0800cd6c

0800b20c <_calloc_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	fb02 f501 	mul.w	r5, r2, r1
 800b212:	4629      	mov	r1, r5
 800b214:	f000 f854 	bl	800b2c0 <_malloc_r>
 800b218:	4604      	mov	r4, r0
 800b21a:	b118      	cbz	r0, 800b224 <_calloc_r+0x18>
 800b21c:	462a      	mov	r2, r5
 800b21e:	2100      	movs	r1, #0
 800b220:	f7fe f954 	bl	80094cc <memset>
 800b224:	4620      	mov	r0, r4
 800b226:	bd38      	pop	{r3, r4, r5, pc}

0800b228 <_free_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4605      	mov	r5, r0
 800b22c:	2900      	cmp	r1, #0
 800b22e:	d043      	beq.n	800b2b8 <_free_r+0x90>
 800b230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b234:	1f0c      	subs	r4, r1, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	bfb8      	it	lt
 800b23a:	18e4      	addlt	r4, r4, r3
 800b23c:	f000 fa62 	bl	800b704 <__malloc_lock>
 800b240:	4a1e      	ldr	r2, [pc, #120]	; (800b2bc <_free_r+0x94>)
 800b242:	6813      	ldr	r3, [r2, #0]
 800b244:	4610      	mov	r0, r2
 800b246:	b933      	cbnz	r3, 800b256 <_free_r+0x2e>
 800b248:	6063      	str	r3, [r4, #4]
 800b24a:	6014      	str	r4, [r2, #0]
 800b24c:	4628      	mov	r0, r5
 800b24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b252:	f000 ba5d 	b.w	800b710 <__malloc_unlock>
 800b256:	42a3      	cmp	r3, r4
 800b258:	d90a      	bls.n	800b270 <_free_r+0x48>
 800b25a:	6821      	ldr	r1, [r4, #0]
 800b25c:	1862      	adds	r2, r4, r1
 800b25e:	4293      	cmp	r3, r2
 800b260:	bf01      	itttt	eq
 800b262:	681a      	ldreq	r2, [r3, #0]
 800b264:	685b      	ldreq	r3, [r3, #4]
 800b266:	1852      	addeq	r2, r2, r1
 800b268:	6022      	streq	r2, [r4, #0]
 800b26a:	6063      	str	r3, [r4, #4]
 800b26c:	6004      	str	r4, [r0, #0]
 800b26e:	e7ed      	b.n	800b24c <_free_r+0x24>
 800b270:	461a      	mov	r2, r3
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	b10b      	cbz	r3, 800b27a <_free_r+0x52>
 800b276:	42a3      	cmp	r3, r4
 800b278:	d9fa      	bls.n	800b270 <_free_r+0x48>
 800b27a:	6811      	ldr	r1, [r2, #0]
 800b27c:	1850      	adds	r0, r2, r1
 800b27e:	42a0      	cmp	r0, r4
 800b280:	d10b      	bne.n	800b29a <_free_r+0x72>
 800b282:	6820      	ldr	r0, [r4, #0]
 800b284:	4401      	add	r1, r0
 800b286:	1850      	adds	r0, r2, r1
 800b288:	4283      	cmp	r3, r0
 800b28a:	6011      	str	r1, [r2, #0]
 800b28c:	d1de      	bne.n	800b24c <_free_r+0x24>
 800b28e:	6818      	ldr	r0, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	4401      	add	r1, r0
 800b294:	6011      	str	r1, [r2, #0]
 800b296:	6053      	str	r3, [r2, #4]
 800b298:	e7d8      	b.n	800b24c <_free_r+0x24>
 800b29a:	d902      	bls.n	800b2a2 <_free_r+0x7a>
 800b29c:	230c      	movs	r3, #12
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	e7d4      	b.n	800b24c <_free_r+0x24>
 800b2a2:	6820      	ldr	r0, [r4, #0]
 800b2a4:	1821      	adds	r1, r4, r0
 800b2a6:	428b      	cmp	r3, r1
 800b2a8:	bf01      	itttt	eq
 800b2aa:	6819      	ldreq	r1, [r3, #0]
 800b2ac:	685b      	ldreq	r3, [r3, #4]
 800b2ae:	1809      	addeq	r1, r1, r0
 800b2b0:	6021      	streq	r1, [r4, #0]
 800b2b2:	6063      	str	r3, [r4, #4]
 800b2b4:	6054      	str	r4, [r2, #4]
 800b2b6:	e7c9      	b.n	800b24c <_free_r+0x24>
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200002f0 	.word	0x200002f0

0800b2c0 <_malloc_r>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	1ccd      	adds	r5, r1, #3
 800b2c4:	f025 0503 	bic.w	r5, r5, #3
 800b2c8:	3508      	adds	r5, #8
 800b2ca:	2d0c      	cmp	r5, #12
 800b2cc:	bf38      	it	cc
 800b2ce:	250c      	movcc	r5, #12
 800b2d0:	2d00      	cmp	r5, #0
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	db01      	blt.n	800b2da <_malloc_r+0x1a>
 800b2d6:	42a9      	cmp	r1, r5
 800b2d8:	d903      	bls.n	800b2e2 <_malloc_r+0x22>
 800b2da:	230c      	movs	r3, #12
 800b2dc:	6033      	str	r3, [r6, #0]
 800b2de:	2000      	movs	r0, #0
 800b2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e2:	f000 fa0f 	bl	800b704 <__malloc_lock>
 800b2e6:	4921      	ldr	r1, [pc, #132]	; (800b36c <_malloc_r+0xac>)
 800b2e8:	680a      	ldr	r2, [r1, #0]
 800b2ea:	4614      	mov	r4, r2
 800b2ec:	b99c      	cbnz	r4, 800b316 <_malloc_r+0x56>
 800b2ee:	4f20      	ldr	r7, [pc, #128]	; (800b370 <_malloc_r+0xb0>)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	b923      	cbnz	r3, 800b2fe <_malloc_r+0x3e>
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f000 f998 	bl	800b62c <_sbrk_r>
 800b2fc:	6038      	str	r0, [r7, #0]
 800b2fe:	4629      	mov	r1, r5
 800b300:	4630      	mov	r0, r6
 800b302:	f000 f993 	bl	800b62c <_sbrk_r>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	d123      	bne.n	800b352 <_malloc_r+0x92>
 800b30a:	230c      	movs	r3, #12
 800b30c:	4630      	mov	r0, r6
 800b30e:	6033      	str	r3, [r6, #0]
 800b310:	f000 f9fe 	bl	800b710 <__malloc_unlock>
 800b314:	e7e3      	b.n	800b2de <_malloc_r+0x1e>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	1b5b      	subs	r3, r3, r5
 800b31a:	d417      	bmi.n	800b34c <_malloc_r+0x8c>
 800b31c:	2b0b      	cmp	r3, #11
 800b31e:	d903      	bls.n	800b328 <_malloc_r+0x68>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	441c      	add	r4, r3
 800b324:	6025      	str	r5, [r4, #0]
 800b326:	e004      	b.n	800b332 <_malloc_r+0x72>
 800b328:	6863      	ldr	r3, [r4, #4]
 800b32a:	42a2      	cmp	r2, r4
 800b32c:	bf0c      	ite	eq
 800b32e:	600b      	streq	r3, [r1, #0]
 800b330:	6053      	strne	r3, [r2, #4]
 800b332:	4630      	mov	r0, r6
 800b334:	f000 f9ec 	bl	800b710 <__malloc_unlock>
 800b338:	f104 000b 	add.w	r0, r4, #11
 800b33c:	1d23      	adds	r3, r4, #4
 800b33e:	f020 0007 	bic.w	r0, r0, #7
 800b342:	1ac2      	subs	r2, r0, r3
 800b344:	d0cc      	beq.n	800b2e0 <_malloc_r+0x20>
 800b346:	1a1b      	subs	r3, r3, r0
 800b348:	50a3      	str	r3, [r4, r2]
 800b34a:	e7c9      	b.n	800b2e0 <_malloc_r+0x20>
 800b34c:	4622      	mov	r2, r4
 800b34e:	6864      	ldr	r4, [r4, #4]
 800b350:	e7cc      	b.n	800b2ec <_malloc_r+0x2c>
 800b352:	1cc4      	adds	r4, r0, #3
 800b354:	f024 0403 	bic.w	r4, r4, #3
 800b358:	42a0      	cmp	r0, r4
 800b35a:	d0e3      	beq.n	800b324 <_malloc_r+0x64>
 800b35c:	1a21      	subs	r1, r4, r0
 800b35e:	4630      	mov	r0, r6
 800b360:	f000 f964 	bl	800b62c <_sbrk_r>
 800b364:	3001      	adds	r0, #1
 800b366:	d1dd      	bne.n	800b324 <_malloc_r+0x64>
 800b368:	e7cf      	b.n	800b30a <_malloc_r+0x4a>
 800b36a:	bf00      	nop
 800b36c:	200002f0 	.word	0x200002f0
 800b370:	200002f4 	.word	0x200002f4

0800b374 <__ssputs_r>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	688e      	ldr	r6, [r1, #8]
 800b37a:	4682      	mov	sl, r0
 800b37c:	429e      	cmp	r6, r3
 800b37e:	460c      	mov	r4, r1
 800b380:	4690      	mov	r8, r2
 800b382:	461f      	mov	r7, r3
 800b384:	d838      	bhi.n	800b3f8 <__ssputs_r+0x84>
 800b386:	898a      	ldrh	r2, [r1, #12]
 800b388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b38c:	d032      	beq.n	800b3f4 <__ssputs_r+0x80>
 800b38e:	6825      	ldr	r5, [r4, #0]
 800b390:	6909      	ldr	r1, [r1, #16]
 800b392:	3301      	adds	r3, #1
 800b394:	eba5 0901 	sub.w	r9, r5, r1
 800b398:	6965      	ldr	r5, [r4, #20]
 800b39a:	444b      	add	r3, r9
 800b39c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3a4:	106d      	asrs	r5, r5, #1
 800b3a6:	429d      	cmp	r5, r3
 800b3a8:	bf38      	it	cc
 800b3aa:	461d      	movcc	r5, r3
 800b3ac:	0553      	lsls	r3, r2, #21
 800b3ae:	d531      	bpl.n	800b414 <__ssputs_r+0xa0>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7ff ff85 	bl	800b2c0 <_malloc_r>
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	b950      	cbnz	r0, 800b3d0 <__ssputs_r+0x5c>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c0:	f8ca 3000 	str.w	r3, [sl]
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3ca:	81a3      	strh	r3, [r4, #12]
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	464a      	mov	r2, r9
 800b3d2:	6921      	ldr	r1, [r4, #16]
 800b3d4:	f7fe f86c 	bl	80094b0 <memcpy>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	6126      	str	r6, [r4, #16]
 800b3e6:	444e      	add	r6, r9
 800b3e8:	6026      	str	r6, [r4, #0]
 800b3ea:	463e      	mov	r6, r7
 800b3ec:	6165      	str	r5, [r4, #20]
 800b3ee:	eba5 0509 	sub.w	r5, r5, r9
 800b3f2:	60a5      	str	r5, [r4, #8]
 800b3f4:	42be      	cmp	r6, r7
 800b3f6:	d900      	bls.n	800b3fa <__ssputs_r+0x86>
 800b3f8:	463e      	mov	r6, r7
 800b3fa:	4632      	mov	r2, r6
 800b3fc:	4641      	mov	r1, r8
 800b3fe:	6820      	ldr	r0, [r4, #0]
 800b400:	f000 f966 	bl	800b6d0 <memmove>
 800b404:	68a3      	ldr	r3, [r4, #8]
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	1b9b      	subs	r3, r3, r6
 800b40a:	4432      	add	r2, r6
 800b40c:	2000      	movs	r0, #0
 800b40e:	60a3      	str	r3, [r4, #8]
 800b410:	6022      	str	r2, [r4, #0]
 800b412:	e7db      	b.n	800b3cc <__ssputs_r+0x58>
 800b414:	462a      	mov	r2, r5
 800b416:	f000 f981 	bl	800b71c <_realloc_r>
 800b41a:	4606      	mov	r6, r0
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1e1      	bne.n	800b3e4 <__ssputs_r+0x70>
 800b420:	4650      	mov	r0, sl
 800b422:	6921      	ldr	r1, [r4, #16]
 800b424:	f7ff ff00 	bl	800b228 <_free_r>
 800b428:	e7c7      	b.n	800b3ba <__ssputs_r+0x46>
	...

0800b42c <_svfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	4698      	mov	r8, r3
 800b432:	898b      	ldrh	r3, [r1, #12]
 800b434:	4607      	mov	r7, r0
 800b436:	061b      	lsls	r3, r3, #24
 800b438:	460d      	mov	r5, r1
 800b43a:	4614      	mov	r4, r2
 800b43c:	b09d      	sub	sp, #116	; 0x74
 800b43e:	d50e      	bpl.n	800b45e <_svfiprintf_r+0x32>
 800b440:	690b      	ldr	r3, [r1, #16]
 800b442:	b963      	cbnz	r3, 800b45e <_svfiprintf_r+0x32>
 800b444:	2140      	movs	r1, #64	; 0x40
 800b446:	f7ff ff3b 	bl	800b2c0 <_malloc_r>
 800b44a:	6028      	str	r0, [r5, #0]
 800b44c:	6128      	str	r0, [r5, #16]
 800b44e:	b920      	cbnz	r0, 800b45a <_svfiprintf_r+0x2e>
 800b450:	230c      	movs	r3, #12
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	e0d1      	b.n	800b5fe <_svfiprintf_r+0x1d2>
 800b45a:	2340      	movs	r3, #64	; 0x40
 800b45c:	616b      	str	r3, [r5, #20]
 800b45e:	2300      	movs	r3, #0
 800b460:	9309      	str	r3, [sp, #36]	; 0x24
 800b462:	2320      	movs	r3, #32
 800b464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b468:	2330      	movs	r3, #48	; 0x30
 800b46a:	f04f 0901 	mov.w	r9, #1
 800b46e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b472:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b618 <_svfiprintf_r+0x1ec>
 800b476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b47a:	4623      	mov	r3, r4
 800b47c:	469a      	mov	sl, r3
 800b47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b482:	b10a      	cbz	r2, 800b488 <_svfiprintf_r+0x5c>
 800b484:	2a25      	cmp	r2, #37	; 0x25
 800b486:	d1f9      	bne.n	800b47c <_svfiprintf_r+0x50>
 800b488:	ebba 0b04 	subs.w	fp, sl, r4
 800b48c:	d00b      	beq.n	800b4a6 <_svfiprintf_r+0x7a>
 800b48e:	465b      	mov	r3, fp
 800b490:	4622      	mov	r2, r4
 800b492:	4629      	mov	r1, r5
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff ff6d 	bl	800b374 <__ssputs_r>
 800b49a:	3001      	adds	r0, #1
 800b49c:	f000 80aa 	beq.w	800b5f4 <_svfiprintf_r+0x1c8>
 800b4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a2:	445a      	add	r2, fp
 800b4a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 80a2 	beq.w	800b5f4 <_svfiprintf_r+0x1c8>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ba:	f10a 0a01 	add.w	sl, sl, #1
 800b4be:	9304      	str	r3, [sp, #16]
 800b4c0:	9307      	str	r3, [sp, #28]
 800b4c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c8:	4654      	mov	r4, sl
 800b4ca:	2205      	movs	r2, #5
 800b4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d0:	4851      	ldr	r0, [pc, #324]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b4d2:	f7ff fb0b 	bl	800aaec <memchr>
 800b4d6:	9a04      	ldr	r2, [sp, #16]
 800b4d8:	b9d8      	cbnz	r0, 800b512 <_svfiprintf_r+0xe6>
 800b4da:	06d0      	lsls	r0, r2, #27
 800b4dc:	bf44      	itt	mi
 800b4de:	2320      	movmi	r3, #32
 800b4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e4:	0711      	lsls	r1, r2, #28
 800b4e6:	bf44      	itt	mi
 800b4e8:	232b      	movmi	r3, #43	; 0x2b
 800b4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f4:	d015      	beq.n	800b522 <_svfiprintf_r+0xf6>
 800b4f6:	4654      	mov	r4, sl
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	f04f 0c0a 	mov.w	ip, #10
 800b4fe:	9a07      	ldr	r2, [sp, #28]
 800b500:	4621      	mov	r1, r4
 800b502:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b506:	3b30      	subs	r3, #48	; 0x30
 800b508:	2b09      	cmp	r3, #9
 800b50a:	d94e      	bls.n	800b5aa <_svfiprintf_r+0x17e>
 800b50c:	b1b0      	cbz	r0, 800b53c <_svfiprintf_r+0x110>
 800b50e:	9207      	str	r2, [sp, #28]
 800b510:	e014      	b.n	800b53c <_svfiprintf_r+0x110>
 800b512:	eba0 0308 	sub.w	r3, r0, r8
 800b516:	fa09 f303 	lsl.w	r3, r9, r3
 800b51a:	4313      	orrs	r3, r2
 800b51c:	46a2      	mov	sl, r4
 800b51e:	9304      	str	r3, [sp, #16]
 800b520:	e7d2      	b.n	800b4c8 <_svfiprintf_r+0x9c>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	1d19      	adds	r1, r3, #4
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	9103      	str	r1, [sp, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	bfbb      	ittet	lt
 800b52e:	425b      	neglt	r3, r3
 800b530:	f042 0202 	orrlt.w	r2, r2, #2
 800b534:	9307      	strge	r3, [sp, #28]
 800b536:	9307      	strlt	r3, [sp, #28]
 800b538:	bfb8      	it	lt
 800b53a:	9204      	strlt	r2, [sp, #16]
 800b53c:	7823      	ldrb	r3, [r4, #0]
 800b53e:	2b2e      	cmp	r3, #46	; 0x2e
 800b540:	d10c      	bne.n	800b55c <_svfiprintf_r+0x130>
 800b542:	7863      	ldrb	r3, [r4, #1]
 800b544:	2b2a      	cmp	r3, #42	; 0x2a
 800b546:	d135      	bne.n	800b5b4 <_svfiprintf_r+0x188>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	3402      	adds	r4, #2
 800b54c:	1d1a      	adds	r2, r3, #4
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	9203      	str	r2, [sp, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	bfb8      	it	lt
 800b556:	f04f 33ff 	movlt.w	r3, #4294967295
 800b55a:	9305      	str	r3, [sp, #20]
 800b55c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b628 <_svfiprintf_r+0x1fc>
 800b560:	2203      	movs	r2, #3
 800b562:	4650      	mov	r0, sl
 800b564:	7821      	ldrb	r1, [r4, #0]
 800b566:	f7ff fac1 	bl	800aaec <memchr>
 800b56a:	b140      	cbz	r0, 800b57e <_svfiprintf_r+0x152>
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	eba0 000a 	sub.w	r0, r0, sl
 800b572:	fa03 f000 	lsl.w	r0, r3, r0
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	3401      	adds	r4, #1
 800b57a:	4303      	orrs	r3, r0
 800b57c:	9304      	str	r3, [sp, #16]
 800b57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b582:	2206      	movs	r2, #6
 800b584:	4825      	ldr	r0, [pc, #148]	; (800b61c <_svfiprintf_r+0x1f0>)
 800b586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b58a:	f7ff faaf 	bl	800aaec <memchr>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d038      	beq.n	800b604 <_svfiprintf_r+0x1d8>
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <_svfiprintf_r+0x1f4>)
 800b594:	bb1b      	cbnz	r3, 800b5de <_svfiprintf_r+0x1b2>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	3307      	adds	r3, #7
 800b59a:	f023 0307 	bic.w	r3, r3, #7
 800b59e:	3308      	adds	r3, #8
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a4:	4433      	add	r3, r6
 800b5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a8:	e767      	b.n	800b47a <_svfiprintf_r+0x4e>
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5b2:	e7a5      	b.n	800b500 <_svfiprintf_r+0xd4>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f04f 0c0a 	mov.w	ip, #10
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	3401      	adds	r4, #1
 800b5be:	9305      	str	r3, [sp, #20]
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c6:	3a30      	subs	r2, #48	; 0x30
 800b5c8:	2a09      	cmp	r2, #9
 800b5ca:	d903      	bls.n	800b5d4 <_svfiprintf_r+0x1a8>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0c5      	beq.n	800b55c <_svfiprintf_r+0x130>
 800b5d0:	9105      	str	r1, [sp, #20]
 800b5d2:	e7c3      	b.n	800b55c <_svfiprintf_r+0x130>
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5dc:	e7f0      	b.n	800b5c0 <_svfiprintf_r+0x194>
 800b5de:	ab03      	add	r3, sp, #12
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <_svfiprintf_r+0x1f8>)
 800b5e8:	a904      	add	r1, sp, #16
 800b5ea:	f7fe f815 	bl	8009618 <_printf_float>
 800b5ee:	1c42      	adds	r2, r0, #1
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	d1d6      	bne.n	800b5a2 <_svfiprintf_r+0x176>
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	065b      	lsls	r3, r3, #25
 800b5f8:	f53f af2c 	bmi.w	800b454 <_svfiprintf_r+0x28>
 800b5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5fe:	b01d      	add	sp, #116	; 0x74
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	ab03      	add	r3, sp, #12
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	462a      	mov	r2, r5
 800b60a:	4638      	mov	r0, r7
 800b60c:	4b05      	ldr	r3, [pc, #20]	; (800b624 <_svfiprintf_r+0x1f8>)
 800b60e:	a904      	add	r1, sp, #16
 800b610:	f7fe fa9e 	bl	8009b50 <_printf_i>
 800b614:	e7eb      	b.n	800b5ee <_svfiprintf_r+0x1c2>
 800b616:	bf00      	nop
 800b618:	0800cecc 	.word	0x0800cecc
 800b61c:	0800ced6 	.word	0x0800ced6
 800b620:	08009619 	.word	0x08009619
 800b624:	0800b375 	.word	0x0800b375
 800b628:	0800ced2 	.word	0x0800ced2

0800b62c <_sbrk_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	2300      	movs	r3, #0
 800b630:	4d05      	ldr	r5, [pc, #20]	; (800b648 <_sbrk_r+0x1c>)
 800b632:	4604      	mov	r4, r0
 800b634:	4608      	mov	r0, r1
 800b636:	602b      	str	r3, [r5, #0]
 800b638:	f7f9 fa52 	bl	8004ae0 <_sbrk>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_sbrk_r+0x1a>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b103      	cbz	r3, 800b646 <_sbrk_r+0x1a>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	200006b0 	.word	0x200006b0

0800b64c <__assert_func>:
 800b64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b64e:	4614      	mov	r4, r2
 800b650:	461a      	mov	r2, r3
 800b652:	4b09      	ldr	r3, [pc, #36]	; (800b678 <__assert_func+0x2c>)
 800b654:	4605      	mov	r5, r0
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68d8      	ldr	r0, [r3, #12]
 800b65a:	b14c      	cbz	r4, 800b670 <__assert_func+0x24>
 800b65c:	4b07      	ldr	r3, [pc, #28]	; (800b67c <__assert_func+0x30>)
 800b65e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b662:	9100      	str	r1, [sp, #0]
 800b664:	462b      	mov	r3, r5
 800b666:	4906      	ldr	r1, [pc, #24]	; (800b680 <__assert_func+0x34>)
 800b668:	f000 f80e 	bl	800b688 <fiprintf>
 800b66c:	f000 faa2 	bl	800bbb4 <abort>
 800b670:	4b04      	ldr	r3, [pc, #16]	; (800b684 <__assert_func+0x38>)
 800b672:	461c      	mov	r4, r3
 800b674:	e7f3      	b.n	800b65e <__assert_func+0x12>
 800b676:	bf00      	nop
 800b678:	20000044 	.word	0x20000044
 800b67c:	0800cedd 	.word	0x0800cedd
 800b680:	0800ceea 	.word	0x0800ceea
 800b684:	0800cf18 	.word	0x0800cf18

0800b688 <fiprintf>:
 800b688:	b40e      	push	{r1, r2, r3}
 800b68a:	b503      	push	{r0, r1, lr}
 800b68c:	4601      	mov	r1, r0
 800b68e:	ab03      	add	r3, sp, #12
 800b690:	4805      	ldr	r0, [pc, #20]	; (800b6a8 <fiprintf+0x20>)
 800b692:	f853 2b04 	ldr.w	r2, [r3], #4
 800b696:	6800      	ldr	r0, [r0, #0]
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	f000 f88d 	bl	800b7b8 <_vfiprintf_r>
 800b69e:	b002      	add	sp, #8
 800b6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a4:	b003      	add	sp, #12
 800b6a6:	4770      	bx	lr
 800b6a8:	20000044 	.word	0x20000044

0800b6ac <__ascii_mbtowc>:
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	b901      	cbnz	r1, 800b6b2 <__ascii_mbtowc+0x6>
 800b6b0:	a901      	add	r1, sp, #4
 800b6b2:	b142      	cbz	r2, 800b6c6 <__ascii_mbtowc+0x1a>
 800b6b4:	b14b      	cbz	r3, 800b6ca <__ascii_mbtowc+0x1e>
 800b6b6:	7813      	ldrb	r3, [r2, #0]
 800b6b8:	600b      	str	r3, [r1, #0]
 800b6ba:	7812      	ldrb	r2, [r2, #0]
 800b6bc:	1e10      	subs	r0, r2, #0
 800b6be:	bf18      	it	ne
 800b6c0:	2001      	movne	r0, #1
 800b6c2:	b002      	add	sp, #8
 800b6c4:	4770      	bx	lr
 800b6c6:	4610      	mov	r0, r2
 800b6c8:	e7fb      	b.n	800b6c2 <__ascii_mbtowc+0x16>
 800b6ca:	f06f 0001 	mvn.w	r0, #1
 800b6ce:	e7f8      	b.n	800b6c2 <__ascii_mbtowc+0x16>

0800b6d0 <memmove>:
 800b6d0:	4288      	cmp	r0, r1
 800b6d2:	b510      	push	{r4, lr}
 800b6d4:	eb01 0402 	add.w	r4, r1, r2
 800b6d8:	d902      	bls.n	800b6e0 <memmove+0x10>
 800b6da:	4284      	cmp	r4, r0
 800b6dc:	4623      	mov	r3, r4
 800b6de:	d807      	bhi.n	800b6f0 <memmove+0x20>
 800b6e0:	1e43      	subs	r3, r0, #1
 800b6e2:	42a1      	cmp	r1, r4
 800b6e4:	d008      	beq.n	800b6f8 <memmove+0x28>
 800b6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ee:	e7f8      	b.n	800b6e2 <memmove+0x12>
 800b6f0:	4601      	mov	r1, r0
 800b6f2:	4402      	add	r2, r0
 800b6f4:	428a      	cmp	r2, r1
 800b6f6:	d100      	bne.n	800b6fa <memmove+0x2a>
 800b6f8:	bd10      	pop	{r4, pc}
 800b6fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b702:	e7f7      	b.n	800b6f4 <memmove+0x24>

0800b704 <__malloc_lock>:
 800b704:	4801      	ldr	r0, [pc, #4]	; (800b70c <__malloc_lock+0x8>)
 800b706:	f000 bc15 	b.w	800bf34 <__retarget_lock_acquire_recursive>
 800b70a:	bf00      	nop
 800b70c:	200006b8 	.word	0x200006b8

0800b710 <__malloc_unlock>:
 800b710:	4801      	ldr	r0, [pc, #4]	; (800b718 <__malloc_unlock+0x8>)
 800b712:	f000 bc10 	b.w	800bf36 <__retarget_lock_release_recursive>
 800b716:	bf00      	nop
 800b718:	200006b8 	.word	0x200006b8

0800b71c <_realloc_r>:
 800b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71e:	4607      	mov	r7, r0
 800b720:	4614      	mov	r4, r2
 800b722:	460e      	mov	r6, r1
 800b724:	b921      	cbnz	r1, 800b730 <_realloc_r+0x14>
 800b726:	4611      	mov	r1, r2
 800b728:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b72c:	f7ff bdc8 	b.w	800b2c0 <_malloc_r>
 800b730:	b922      	cbnz	r2, 800b73c <_realloc_r+0x20>
 800b732:	f7ff fd79 	bl	800b228 <_free_r>
 800b736:	4625      	mov	r5, r4
 800b738:	4628      	mov	r0, r5
 800b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b73c:	f000 fc60 	bl	800c000 <_malloc_usable_size_r>
 800b740:	42a0      	cmp	r0, r4
 800b742:	d20f      	bcs.n	800b764 <_realloc_r+0x48>
 800b744:	4621      	mov	r1, r4
 800b746:	4638      	mov	r0, r7
 800b748:	f7ff fdba 	bl	800b2c0 <_malloc_r>
 800b74c:	4605      	mov	r5, r0
 800b74e:	2800      	cmp	r0, #0
 800b750:	d0f2      	beq.n	800b738 <_realloc_r+0x1c>
 800b752:	4631      	mov	r1, r6
 800b754:	4622      	mov	r2, r4
 800b756:	f7fd feab 	bl	80094b0 <memcpy>
 800b75a:	4631      	mov	r1, r6
 800b75c:	4638      	mov	r0, r7
 800b75e:	f7ff fd63 	bl	800b228 <_free_r>
 800b762:	e7e9      	b.n	800b738 <_realloc_r+0x1c>
 800b764:	4635      	mov	r5, r6
 800b766:	e7e7      	b.n	800b738 <_realloc_r+0x1c>

0800b768 <__sfputc_r>:
 800b768:	6893      	ldr	r3, [r2, #8]
 800b76a:	b410      	push	{r4}
 800b76c:	3b01      	subs	r3, #1
 800b76e:	2b00      	cmp	r3, #0
 800b770:	6093      	str	r3, [r2, #8]
 800b772:	da07      	bge.n	800b784 <__sfputc_r+0x1c>
 800b774:	6994      	ldr	r4, [r2, #24]
 800b776:	42a3      	cmp	r3, r4
 800b778:	db01      	blt.n	800b77e <__sfputc_r+0x16>
 800b77a:	290a      	cmp	r1, #10
 800b77c:	d102      	bne.n	800b784 <__sfputc_r+0x1c>
 800b77e:	bc10      	pop	{r4}
 800b780:	f000 b94a 	b.w	800ba18 <__swbuf_r>
 800b784:	6813      	ldr	r3, [r2, #0]
 800b786:	1c58      	adds	r0, r3, #1
 800b788:	6010      	str	r0, [r2, #0]
 800b78a:	7019      	strb	r1, [r3, #0]
 800b78c:	4608      	mov	r0, r1
 800b78e:	bc10      	pop	{r4}
 800b790:	4770      	bx	lr

0800b792 <__sfputs_r>:
 800b792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b794:	4606      	mov	r6, r0
 800b796:	460f      	mov	r7, r1
 800b798:	4614      	mov	r4, r2
 800b79a:	18d5      	adds	r5, r2, r3
 800b79c:	42ac      	cmp	r4, r5
 800b79e:	d101      	bne.n	800b7a4 <__sfputs_r+0x12>
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e007      	b.n	800b7b4 <__sfputs_r+0x22>
 800b7a4:	463a      	mov	r2, r7
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ac:	f7ff ffdc 	bl	800b768 <__sfputc_r>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d1f3      	bne.n	800b79c <__sfputs_r+0xa>
 800b7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7b8 <_vfiprintf_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	460d      	mov	r5, r1
 800b7be:	4614      	mov	r4, r2
 800b7c0:	4698      	mov	r8, r3
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	b09d      	sub	sp, #116	; 0x74
 800b7c6:	b118      	cbz	r0, 800b7d0 <_vfiprintf_r+0x18>
 800b7c8:	6983      	ldr	r3, [r0, #24]
 800b7ca:	b90b      	cbnz	r3, 800b7d0 <_vfiprintf_r+0x18>
 800b7cc:	f000 fb14 	bl	800bdf8 <__sinit>
 800b7d0:	4b89      	ldr	r3, [pc, #548]	; (800b9f8 <_vfiprintf_r+0x240>)
 800b7d2:	429d      	cmp	r5, r3
 800b7d4:	d11b      	bne.n	800b80e <_vfiprintf_r+0x56>
 800b7d6:	6875      	ldr	r5, [r6, #4]
 800b7d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7da:	07d9      	lsls	r1, r3, #31
 800b7dc:	d405      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7de:	89ab      	ldrh	r3, [r5, #12]
 800b7e0:	059a      	lsls	r2, r3, #22
 800b7e2:	d402      	bmi.n	800b7ea <_vfiprintf_r+0x32>
 800b7e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7e6:	f000 fba5 	bl	800bf34 <__retarget_lock_acquire_recursive>
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	071b      	lsls	r3, r3, #28
 800b7ee:	d501      	bpl.n	800b7f4 <_vfiprintf_r+0x3c>
 800b7f0:	692b      	ldr	r3, [r5, #16]
 800b7f2:	b9eb      	cbnz	r3, 800b830 <_vfiprintf_r+0x78>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f000 f96e 	bl	800bad8 <__swsetup_r>
 800b7fc:	b1c0      	cbz	r0, 800b830 <_vfiprintf_r+0x78>
 800b7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b800:	07dc      	lsls	r4, r3, #31
 800b802:	d50e      	bpl.n	800b822 <_vfiprintf_r+0x6a>
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	b01d      	add	sp, #116	; 0x74
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	4b7b      	ldr	r3, [pc, #492]	; (800b9fc <_vfiprintf_r+0x244>)
 800b810:	429d      	cmp	r5, r3
 800b812:	d101      	bne.n	800b818 <_vfiprintf_r+0x60>
 800b814:	68b5      	ldr	r5, [r6, #8]
 800b816:	e7df      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b818:	4b79      	ldr	r3, [pc, #484]	; (800ba00 <_vfiprintf_r+0x248>)
 800b81a:	429d      	cmp	r5, r3
 800b81c:	bf08      	it	eq
 800b81e:	68f5      	ldreq	r5, [r6, #12]
 800b820:	e7da      	b.n	800b7d8 <_vfiprintf_r+0x20>
 800b822:	89ab      	ldrh	r3, [r5, #12]
 800b824:	0598      	lsls	r0, r3, #22
 800b826:	d4ed      	bmi.n	800b804 <_vfiprintf_r+0x4c>
 800b828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b82a:	f000 fb84 	bl	800bf36 <__retarget_lock_release_recursive>
 800b82e:	e7e9      	b.n	800b804 <_vfiprintf_r+0x4c>
 800b830:	2300      	movs	r3, #0
 800b832:	9309      	str	r3, [sp, #36]	; 0x24
 800b834:	2320      	movs	r3, #32
 800b836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b83a:	2330      	movs	r3, #48	; 0x30
 800b83c:	f04f 0901 	mov.w	r9, #1
 800b840:	f8cd 800c 	str.w	r8, [sp, #12]
 800b844:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ba04 <_vfiprintf_r+0x24c>
 800b848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b84c:	4623      	mov	r3, r4
 800b84e:	469a      	mov	sl, r3
 800b850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b854:	b10a      	cbz	r2, 800b85a <_vfiprintf_r+0xa2>
 800b856:	2a25      	cmp	r2, #37	; 0x25
 800b858:	d1f9      	bne.n	800b84e <_vfiprintf_r+0x96>
 800b85a:	ebba 0b04 	subs.w	fp, sl, r4
 800b85e:	d00b      	beq.n	800b878 <_vfiprintf_r+0xc0>
 800b860:	465b      	mov	r3, fp
 800b862:	4622      	mov	r2, r4
 800b864:	4629      	mov	r1, r5
 800b866:	4630      	mov	r0, r6
 800b868:	f7ff ff93 	bl	800b792 <__sfputs_r>
 800b86c:	3001      	adds	r0, #1
 800b86e:	f000 80aa 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b874:	445a      	add	r2, fp
 800b876:	9209      	str	r2, [sp, #36]	; 0x24
 800b878:	f89a 3000 	ldrb.w	r3, [sl]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80a2 	beq.w	800b9c6 <_vfiprintf_r+0x20e>
 800b882:	2300      	movs	r3, #0
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88c:	f10a 0a01 	add.w	sl, sl, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	9307      	str	r3, [sp, #28]
 800b894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b898:	931a      	str	r3, [sp, #104]	; 0x68
 800b89a:	4654      	mov	r4, sl
 800b89c:	2205      	movs	r2, #5
 800b89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a2:	4858      	ldr	r0, [pc, #352]	; (800ba04 <_vfiprintf_r+0x24c>)
 800b8a4:	f7ff f922 	bl	800aaec <memchr>
 800b8a8:	9a04      	ldr	r2, [sp, #16]
 800b8aa:	b9d8      	cbnz	r0, 800b8e4 <_vfiprintf_r+0x12c>
 800b8ac:	06d1      	lsls	r1, r2, #27
 800b8ae:	bf44      	itt	mi
 800b8b0:	2320      	movmi	r3, #32
 800b8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b6:	0713      	lsls	r3, r2, #28
 800b8b8:	bf44      	itt	mi
 800b8ba:	232b      	movmi	r3, #43	; 0x2b
 800b8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c6:	d015      	beq.n	800b8f4 <_vfiprintf_r+0x13c>
 800b8c8:	4654      	mov	r4, sl
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	f04f 0c0a 	mov.w	ip, #10
 800b8d0:	9a07      	ldr	r2, [sp, #28]
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d8:	3b30      	subs	r3, #48	; 0x30
 800b8da:	2b09      	cmp	r3, #9
 800b8dc:	d94e      	bls.n	800b97c <_vfiprintf_r+0x1c4>
 800b8de:	b1b0      	cbz	r0, 800b90e <_vfiprintf_r+0x156>
 800b8e0:	9207      	str	r2, [sp, #28]
 800b8e2:	e014      	b.n	800b90e <_vfiprintf_r+0x156>
 800b8e4:	eba0 0308 	sub.w	r3, r0, r8
 800b8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	46a2      	mov	sl, r4
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	e7d2      	b.n	800b89a <_vfiprintf_r+0xe2>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1d19      	adds	r1, r3, #4
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	9103      	str	r1, [sp, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	bfbb      	ittet	lt
 800b900:	425b      	neglt	r3, r3
 800b902:	f042 0202 	orrlt.w	r2, r2, #2
 800b906:	9307      	strge	r3, [sp, #28]
 800b908:	9307      	strlt	r3, [sp, #28]
 800b90a:	bfb8      	it	lt
 800b90c:	9204      	strlt	r2, [sp, #16]
 800b90e:	7823      	ldrb	r3, [r4, #0]
 800b910:	2b2e      	cmp	r3, #46	; 0x2e
 800b912:	d10c      	bne.n	800b92e <_vfiprintf_r+0x176>
 800b914:	7863      	ldrb	r3, [r4, #1]
 800b916:	2b2a      	cmp	r3, #42	; 0x2a
 800b918:	d135      	bne.n	800b986 <_vfiprintf_r+0x1ce>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	3402      	adds	r4, #2
 800b91e:	1d1a      	adds	r2, r3, #4
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	9203      	str	r2, [sp, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	bfb8      	it	lt
 800b928:	f04f 33ff 	movlt.w	r3, #4294967295
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba14 <_vfiprintf_r+0x25c>
 800b932:	2203      	movs	r2, #3
 800b934:	4650      	mov	r0, sl
 800b936:	7821      	ldrb	r1, [r4, #0]
 800b938:	f7ff f8d8 	bl	800aaec <memchr>
 800b93c:	b140      	cbz	r0, 800b950 <_vfiprintf_r+0x198>
 800b93e:	2340      	movs	r3, #64	; 0x40
 800b940:	eba0 000a 	sub.w	r0, r0, sl
 800b944:	fa03 f000 	lsl.w	r0, r3, r0
 800b948:	9b04      	ldr	r3, [sp, #16]
 800b94a:	3401      	adds	r4, #1
 800b94c:	4303      	orrs	r3, r0
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b954:	2206      	movs	r2, #6
 800b956:	482c      	ldr	r0, [pc, #176]	; (800ba08 <_vfiprintf_r+0x250>)
 800b958:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b95c:	f7ff f8c6 	bl	800aaec <memchr>
 800b960:	2800      	cmp	r0, #0
 800b962:	d03f      	beq.n	800b9e4 <_vfiprintf_r+0x22c>
 800b964:	4b29      	ldr	r3, [pc, #164]	; (800ba0c <_vfiprintf_r+0x254>)
 800b966:	bb1b      	cbnz	r3, 800b9b0 <_vfiprintf_r+0x1f8>
 800b968:	9b03      	ldr	r3, [sp, #12]
 800b96a:	3307      	adds	r3, #7
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	9303      	str	r3, [sp, #12]
 800b974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b976:	443b      	add	r3, r7
 800b978:	9309      	str	r3, [sp, #36]	; 0x24
 800b97a:	e767      	b.n	800b84c <_vfiprintf_r+0x94>
 800b97c:	460c      	mov	r4, r1
 800b97e:	2001      	movs	r0, #1
 800b980:	fb0c 3202 	mla	r2, ip, r2, r3
 800b984:	e7a5      	b.n	800b8d2 <_vfiprintf_r+0x11a>
 800b986:	2300      	movs	r3, #0
 800b988:	f04f 0c0a 	mov.w	ip, #10
 800b98c:	4619      	mov	r1, r3
 800b98e:	3401      	adds	r4, #1
 800b990:	9305      	str	r3, [sp, #20]
 800b992:	4620      	mov	r0, r4
 800b994:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b998:	3a30      	subs	r2, #48	; 0x30
 800b99a:	2a09      	cmp	r2, #9
 800b99c:	d903      	bls.n	800b9a6 <_vfiprintf_r+0x1ee>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0c5      	beq.n	800b92e <_vfiprintf_r+0x176>
 800b9a2:	9105      	str	r1, [sp, #20]
 800b9a4:	e7c3      	b.n	800b92e <_vfiprintf_r+0x176>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ae:	e7f0      	b.n	800b992 <_vfiprintf_r+0x1da>
 800b9b0:	ab03      	add	r3, sp, #12
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	462a      	mov	r2, r5
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	4b15      	ldr	r3, [pc, #84]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9ba:	a904      	add	r1, sp, #16
 800b9bc:	f7fd fe2c 	bl	8009618 <_printf_float>
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	1c78      	adds	r0, r7, #1
 800b9c4:	d1d6      	bne.n	800b974 <_vfiprintf_r+0x1bc>
 800b9c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c8:	07d9      	lsls	r1, r3, #31
 800b9ca:	d405      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9cc:	89ab      	ldrh	r3, [r5, #12]
 800b9ce:	059a      	lsls	r2, r3, #22
 800b9d0:	d402      	bmi.n	800b9d8 <_vfiprintf_r+0x220>
 800b9d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9d4:	f000 faaf 	bl	800bf36 <__retarget_lock_release_recursive>
 800b9d8:	89ab      	ldrh	r3, [r5, #12]
 800b9da:	065b      	lsls	r3, r3, #25
 800b9dc:	f53f af12 	bmi.w	800b804 <_vfiprintf_r+0x4c>
 800b9e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9e2:	e711      	b.n	800b808 <_vfiprintf_r+0x50>
 800b9e4:	ab03      	add	r3, sp, #12
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	4b08      	ldr	r3, [pc, #32]	; (800ba10 <_vfiprintf_r+0x258>)
 800b9ee:	a904      	add	r1, sp, #16
 800b9f0:	f7fe f8ae 	bl	8009b50 <_printf_i>
 800b9f4:	e7e4      	b.n	800b9c0 <_vfiprintf_r+0x208>
 800b9f6:	bf00      	nop
 800b9f8:	0800d044 	.word	0x0800d044
 800b9fc:	0800d064 	.word	0x0800d064
 800ba00:	0800d024 	.word	0x0800d024
 800ba04:	0800cecc 	.word	0x0800cecc
 800ba08:	0800ced6 	.word	0x0800ced6
 800ba0c:	08009619 	.word	0x08009619
 800ba10:	0800b793 	.word	0x0800b793
 800ba14:	0800ced2 	.word	0x0800ced2

0800ba18 <__swbuf_r>:
 800ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1a:	460e      	mov	r6, r1
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	4605      	mov	r5, r0
 800ba20:	b118      	cbz	r0, 800ba2a <__swbuf_r+0x12>
 800ba22:	6983      	ldr	r3, [r0, #24]
 800ba24:	b90b      	cbnz	r3, 800ba2a <__swbuf_r+0x12>
 800ba26:	f000 f9e7 	bl	800bdf8 <__sinit>
 800ba2a:	4b21      	ldr	r3, [pc, #132]	; (800bab0 <__swbuf_r+0x98>)
 800ba2c:	429c      	cmp	r4, r3
 800ba2e:	d12b      	bne.n	800ba88 <__swbuf_r+0x70>
 800ba30:	686c      	ldr	r4, [r5, #4]
 800ba32:	69a3      	ldr	r3, [r4, #24]
 800ba34:	60a3      	str	r3, [r4, #8]
 800ba36:	89a3      	ldrh	r3, [r4, #12]
 800ba38:	071a      	lsls	r2, r3, #28
 800ba3a:	d52f      	bpl.n	800ba9c <__swbuf_r+0x84>
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	b36b      	cbz	r3, 800ba9c <__swbuf_r+0x84>
 800ba40:	6923      	ldr	r3, [r4, #16]
 800ba42:	6820      	ldr	r0, [r4, #0]
 800ba44:	b2f6      	uxtb	r6, r6
 800ba46:	1ac0      	subs	r0, r0, r3
 800ba48:	6963      	ldr	r3, [r4, #20]
 800ba4a:	4637      	mov	r7, r6
 800ba4c:	4283      	cmp	r3, r0
 800ba4e:	dc04      	bgt.n	800ba5a <__swbuf_r+0x42>
 800ba50:	4621      	mov	r1, r4
 800ba52:	4628      	mov	r0, r5
 800ba54:	f000 f93c 	bl	800bcd0 <_fflush_r>
 800ba58:	bb30      	cbnz	r0, 800baa8 <__swbuf_r+0x90>
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	60a3      	str	r3, [r4, #8]
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	6022      	str	r2, [r4, #0]
 800ba68:	701e      	strb	r6, [r3, #0]
 800ba6a:	6963      	ldr	r3, [r4, #20]
 800ba6c:	4283      	cmp	r3, r0
 800ba6e:	d004      	beq.n	800ba7a <__swbuf_r+0x62>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	07db      	lsls	r3, r3, #31
 800ba74:	d506      	bpl.n	800ba84 <__swbuf_r+0x6c>
 800ba76:	2e0a      	cmp	r6, #10
 800ba78:	d104      	bne.n	800ba84 <__swbuf_r+0x6c>
 800ba7a:	4621      	mov	r1, r4
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	f000 f927 	bl	800bcd0 <_fflush_r>
 800ba82:	b988      	cbnz	r0, 800baa8 <__swbuf_r+0x90>
 800ba84:	4638      	mov	r0, r7
 800ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <__swbuf_r+0x9c>)
 800ba8a:	429c      	cmp	r4, r3
 800ba8c:	d101      	bne.n	800ba92 <__swbuf_r+0x7a>
 800ba8e:	68ac      	ldr	r4, [r5, #8]
 800ba90:	e7cf      	b.n	800ba32 <__swbuf_r+0x1a>
 800ba92:	4b09      	ldr	r3, [pc, #36]	; (800bab8 <__swbuf_r+0xa0>)
 800ba94:	429c      	cmp	r4, r3
 800ba96:	bf08      	it	eq
 800ba98:	68ec      	ldreq	r4, [r5, #12]
 800ba9a:	e7ca      	b.n	800ba32 <__swbuf_r+0x1a>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f81a 	bl	800bad8 <__swsetup_r>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d0cb      	beq.n	800ba40 <__swbuf_r+0x28>
 800baa8:	f04f 37ff 	mov.w	r7, #4294967295
 800baac:	e7ea      	b.n	800ba84 <__swbuf_r+0x6c>
 800baae:	bf00      	nop
 800bab0:	0800d044 	.word	0x0800d044
 800bab4:	0800d064 	.word	0x0800d064
 800bab8:	0800d024 	.word	0x0800d024

0800babc <__ascii_wctomb>:
 800babc:	4603      	mov	r3, r0
 800babe:	4608      	mov	r0, r1
 800bac0:	b141      	cbz	r1, 800bad4 <__ascii_wctomb+0x18>
 800bac2:	2aff      	cmp	r2, #255	; 0xff
 800bac4:	d904      	bls.n	800bad0 <__ascii_wctomb+0x14>
 800bac6:	228a      	movs	r2, #138	; 0x8a
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	4770      	bx	lr
 800bad0:	2001      	movs	r0, #1
 800bad2:	700a      	strb	r2, [r1, #0]
 800bad4:	4770      	bx	lr
	...

0800bad8 <__swsetup_r>:
 800bad8:	4b32      	ldr	r3, [pc, #200]	; (800bba4 <__swsetup_r+0xcc>)
 800bada:	b570      	push	{r4, r5, r6, lr}
 800badc:	681d      	ldr	r5, [r3, #0]
 800bade:	4606      	mov	r6, r0
 800bae0:	460c      	mov	r4, r1
 800bae2:	b125      	cbz	r5, 800baee <__swsetup_r+0x16>
 800bae4:	69ab      	ldr	r3, [r5, #24]
 800bae6:	b913      	cbnz	r3, 800baee <__swsetup_r+0x16>
 800bae8:	4628      	mov	r0, r5
 800baea:	f000 f985 	bl	800bdf8 <__sinit>
 800baee:	4b2e      	ldr	r3, [pc, #184]	; (800bba8 <__swsetup_r+0xd0>)
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d10f      	bne.n	800bb14 <__swsetup_r+0x3c>
 800baf4:	686c      	ldr	r4, [r5, #4]
 800baf6:	89a3      	ldrh	r3, [r4, #12]
 800baf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bafc:	0719      	lsls	r1, r3, #28
 800bafe:	d42c      	bmi.n	800bb5a <__swsetup_r+0x82>
 800bb00:	06dd      	lsls	r5, r3, #27
 800bb02:	d411      	bmi.n	800bb28 <__swsetup_r+0x50>
 800bb04:	2309      	movs	r3, #9
 800bb06:	6033      	str	r3, [r6, #0]
 800bb08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb10:	81a3      	strh	r3, [r4, #12]
 800bb12:	e03e      	b.n	800bb92 <__swsetup_r+0xba>
 800bb14:	4b25      	ldr	r3, [pc, #148]	; (800bbac <__swsetup_r+0xd4>)
 800bb16:	429c      	cmp	r4, r3
 800bb18:	d101      	bne.n	800bb1e <__swsetup_r+0x46>
 800bb1a:	68ac      	ldr	r4, [r5, #8]
 800bb1c:	e7eb      	b.n	800baf6 <__swsetup_r+0x1e>
 800bb1e:	4b24      	ldr	r3, [pc, #144]	; (800bbb0 <__swsetup_r+0xd8>)
 800bb20:	429c      	cmp	r4, r3
 800bb22:	bf08      	it	eq
 800bb24:	68ec      	ldreq	r4, [r5, #12]
 800bb26:	e7e6      	b.n	800baf6 <__swsetup_r+0x1e>
 800bb28:	0758      	lsls	r0, r3, #29
 800bb2a:	d512      	bpl.n	800bb52 <__swsetup_r+0x7a>
 800bb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb2e:	b141      	cbz	r1, 800bb42 <__swsetup_r+0x6a>
 800bb30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb34:	4299      	cmp	r1, r3
 800bb36:	d002      	beq.n	800bb3e <__swsetup_r+0x66>
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7ff fb75 	bl	800b228 <_free_r>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	6363      	str	r3, [r4, #52]	; 0x34
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb48:	81a3      	strh	r3, [r4, #12]
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	6063      	str	r3, [r4, #4]
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	f043 0308 	orr.w	r3, r3, #8
 800bb58:	81a3      	strh	r3, [r4, #12]
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	b94b      	cbnz	r3, 800bb72 <__swsetup_r+0x9a>
 800bb5e:	89a3      	ldrh	r3, [r4, #12]
 800bb60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb68:	d003      	beq.n	800bb72 <__swsetup_r+0x9a>
 800bb6a:	4621      	mov	r1, r4
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f000 fa07 	bl	800bf80 <__smakebuf_r>
 800bb72:	89a0      	ldrh	r0, [r4, #12]
 800bb74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb78:	f010 0301 	ands.w	r3, r0, #1
 800bb7c:	d00a      	beq.n	800bb94 <__swsetup_r+0xbc>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60a3      	str	r3, [r4, #8]
 800bb82:	6963      	ldr	r3, [r4, #20]
 800bb84:	425b      	negs	r3, r3
 800bb86:	61a3      	str	r3, [r4, #24]
 800bb88:	6923      	ldr	r3, [r4, #16]
 800bb8a:	b943      	cbnz	r3, 800bb9e <__swsetup_r+0xc6>
 800bb8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb90:	d1ba      	bne.n	800bb08 <__swsetup_r+0x30>
 800bb92:	bd70      	pop	{r4, r5, r6, pc}
 800bb94:	0781      	lsls	r1, r0, #30
 800bb96:	bf58      	it	pl
 800bb98:	6963      	ldrpl	r3, [r4, #20]
 800bb9a:	60a3      	str	r3, [r4, #8]
 800bb9c:	e7f4      	b.n	800bb88 <__swsetup_r+0xb0>
 800bb9e:	2000      	movs	r0, #0
 800bba0:	e7f7      	b.n	800bb92 <__swsetup_r+0xba>
 800bba2:	bf00      	nop
 800bba4:	20000044 	.word	0x20000044
 800bba8:	0800d044 	.word	0x0800d044
 800bbac:	0800d064 	.word	0x0800d064
 800bbb0:	0800d024 	.word	0x0800d024

0800bbb4 <abort>:
 800bbb4:	2006      	movs	r0, #6
 800bbb6:	b508      	push	{r3, lr}
 800bbb8:	f000 fa52 	bl	800c060 <raise>
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	f7f8 ff1c 	bl	80049fa <_exit>
	...

0800bbc4 <__sflush_r>:
 800bbc4:	898a      	ldrh	r2, [r1, #12]
 800bbc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbca:	4605      	mov	r5, r0
 800bbcc:	0710      	lsls	r0, r2, #28
 800bbce:	460c      	mov	r4, r1
 800bbd0:	d458      	bmi.n	800bc84 <__sflush_r+0xc0>
 800bbd2:	684b      	ldr	r3, [r1, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	dc05      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	dc02      	bgt.n	800bbe4 <__sflush_r+0x20>
 800bbde:	2000      	movs	r0, #0
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe6:	2e00      	cmp	r6, #0
 800bbe8:	d0f9      	beq.n	800bbde <__sflush_r+0x1a>
 800bbea:	2300      	movs	r3, #0
 800bbec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbf0:	682f      	ldr	r7, [r5, #0]
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	d032      	beq.n	800bc5c <__sflush_r+0x98>
 800bbf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	075a      	lsls	r2, r3, #29
 800bbfc:	d505      	bpl.n	800bc0a <__sflush_r+0x46>
 800bbfe:	6863      	ldr	r3, [r4, #4]
 800bc00:	1ac0      	subs	r0, r0, r3
 800bc02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc04:	b10b      	cbz	r3, 800bc0a <__sflush_r+0x46>
 800bc06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc08:	1ac0      	subs	r0, r0, r3
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc10:	4628      	mov	r0, r5
 800bc12:	6a21      	ldr	r1, [r4, #32]
 800bc14:	47b0      	blx	r6
 800bc16:	1c43      	adds	r3, r0, #1
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	d106      	bne.n	800bc2a <__sflush_r+0x66>
 800bc1c:	6829      	ldr	r1, [r5, #0]
 800bc1e:	291d      	cmp	r1, #29
 800bc20:	d82c      	bhi.n	800bc7c <__sflush_r+0xb8>
 800bc22:	4a2a      	ldr	r2, [pc, #168]	; (800bccc <__sflush_r+0x108>)
 800bc24:	40ca      	lsrs	r2, r1
 800bc26:	07d6      	lsls	r6, r2, #31
 800bc28:	d528      	bpl.n	800bc7c <__sflush_r+0xb8>
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	6062      	str	r2, [r4, #4]
 800bc2e:	6922      	ldr	r2, [r4, #16]
 800bc30:	04d9      	lsls	r1, r3, #19
 800bc32:	6022      	str	r2, [r4, #0]
 800bc34:	d504      	bpl.n	800bc40 <__sflush_r+0x7c>
 800bc36:	1c42      	adds	r2, r0, #1
 800bc38:	d101      	bne.n	800bc3e <__sflush_r+0x7a>
 800bc3a:	682b      	ldr	r3, [r5, #0]
 800bc3c:	b903      	cbnz	r3, 800bc40 <__sflush_r+0x7c>
 800bc3e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc42:	602f      	str	r7, [r5, #0]
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d0ca      	beq.n	800bbde <__sflush_r+0x1a>
 800bc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc4c:	4299      	cmp	r1, r3
 800bc4e:	d002      	beq.n	800bc56 <__sflush_r+0x92>
 800bc50:	4628      	mov	r0, r5
 800bc52:	f7ff fae9 	bl	800b228 <_free_r>
 800bc56:	2000      	movs	r0, #0
 800bc58:	6360      	str	r0, [r4, #52]	; 0x34
 800bc5a:	e7c1      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc5c:	6a21      	ldr	r1, [r4, #32]
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b0      	blx	r6
 800bc64:	1c41      	adds	r1, r0, #1
 800bc66:	d1c7      	bne.n	800bbf8 <__sflush_r+0x34>
 800bc68:	682b      	ldr	r3, [r5, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0c4      	beq.n	800bbf8 <__sflush_r+0x34>
 800bc6e:	2b1d      	cmp	r3, #29
 800bc70:	d001      	beq.n	800bc76 <__sflush_r+0xb2>
 800bc72:	2b16      	cmp	r3, #22
 800bc74:	d101      	bne.n	800bc7a <__sflush_r+0xb6>
 800bc76:	602f      	str	r7, [r5, #0]
 800bc78:	e7b1      	b.n	800bbde <__sflush_r+0x1a>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	e7ad      	b.n	800bbe0 <__sflush_r+0x1c>
 800bc84:	690f      	ldr	r7, [r1, #16]
 800bc86:	2f00      	cmp	r7, #0
 800bc88:	d0a9      	beq.n	800bbde <__sflush_r+0x1a>
 800bc8a:	0793      	lsls	r3, r2, #30
 800bc8c:	bf18      	it	ne
 800bc8e:	2300      	movne	r3, #0
 800bc90:	680e      	ldr	r6, [r1, #0]
 800bc92:	bf08      	it	eq
 800bc94:	694b      	ldreq	r3, [r1, #20]
 800bc96:	eba6 0807 	sub.w	r8, r6, r7
 800bc9a:	600f      	str	r7, [r1, #0]
 800bc9c:	608b      	str	r3, [r1, #8]
 800bc9e:	f1b8 0f00 	cmp.w	r8, #0
 800bca2:	dd9c      	ble.n	800bbde <__sflush_r+0x1a>
 800bca4:	4643      	mov	r3, r8
 800bca6:	463a      	mov	r2, r7
 800bca8:	4628      	mov	r0, r5
 800bcaa:	6a21      	ldr	r1, [r4, #32]
 800bcac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcae:	47b0      	blx	r6
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	dc06      	bgt.n	800bcc2 <__sflush_r+0xfe>
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcbe:	81a3      	strh	r3, [r4, #12]
 800bcc0:	e78e      	b.n	800bbe0 <__sflush_r+0x1c>
 800bcc2:	4407      	add	r7, r0
 800bcc4:	eba8 0800 	sub.w	r8, r8, r0
 800bcc8:	e7e9      	b.n	800bc9e <__sflush_r+0xda>
 800bcca:	bf00      	nop
 800bccc:	20400001 	.word	0x20400001

0800bcd0 <_fflush_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	690b      	ldr	r3, [r1, #16]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	b913      	cbnz	r3, 800bce0 <_fflush_r+0x10>
 800bcda:	2500      	movs	r5, #0
 800bcdc:	4628      	mov	r0, r5
 800bcde:	bd38      	pop	{r3, r4, r5, pc}
 800bce0:	b118      	cbz	r0, 800bcea <_fflush_r+0x1a>
 800bce2:	6983      	ldr	r3, [r0, #24]
 800bce4:	b90b      	cbnz	r3, 800bcea <_fflush_r+0x1a>
 800bce6:	f000 f887 	bl	800bdf8 <__sinit>
 800bcea:	4b14      	ldr	r3, [pc, #80]	; (800bd3c <_fflush_r+0x6c>)
 800bcec:	429c      	cmp	r4, r3
 800bcee:	d11b      	bne.n	800bd28 <_fflush_r+0x58>
 800bcf0:	686c      	ldr	r4, [r5, #4]
 800bcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0ef      	beq.n	800bcda <_fflush_r+0xa>
 800bcfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcfc:	07d0      	lsls	r0, r2, #31
 800bcfe:	d404      	bmi.n	800bd0a <_fflush_r+0x3a>
 800bd00:	0599      	lsls	r1, r3, #22
 800bd02:	d402      	bmi.n	800bd0a <_fflush_r+0x3a>
 800bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd06:	f000 f915 	bl	800bf34 <__retarget_lock_acquire_recursive>
 800bd0a:	4628      	mov	r0, r5
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	f7ff ff59 	bl	800bbc4 <__sflush_r>
 800bd12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd14:	4605      	mov	r5, r0
 800bd16:	07da      	lsls	r2, r3, #31
 800bd18:	d4e0      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	059b      	lsls	r3, r3, #22
 800bd1e:	d4dd      	bmi.n	800bcdc <_fflush_r+0xc>
 800bd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd22:	f000 f908 	bl	800bf36 <__retarget_lock_release_recursive>
 800bd26:	e7d9      	b.n	800bcdc <_fflush_r+0xc>
 800bd28:	4b05      	ldr	r3, [pc, #20]	; (800bd40 <_fflush_r+0x70>)
 800bd2a:	429c      	cmp	r4, r3
 800bd2c:	d101      	bne.n	800bd32 <_fflush_r+0x62>
 800bd2e:	68ac      	ldr	r4, [r5, #8]
 800bd30:	e7df      	b.n	800bcf2 <_fflush_r+0x22>
 800bd32:	4b04      	ldr	r3, [pc, #16]	; (800bd44 <_fflush_r+0x74>)
 800bd34:	429c      	cmp	r4, r3
 800bd36:	bf08      	it	eq
 800bd38:	68ec      	ldreq	r4, [r5, #12]
 800bd3a:	e7da      	b.n	800bcf2 <_fflush_r+0x22>
 800bd3c:	0800d044 	.word	0x0800d044
 800bd40:	0800d064 	.word	0x0800d064
 800bd44:	0800d024 	.word	0x0800d024

0800bd48 <std>:
 800bd48:	2300      	movs	r3, #0
 800bd4a:	b510      	push	{r4, lr}
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd56:	6083      	str	r3, [r0, #8]
 800bd58:	8181      	strh	r1, [r0, #12]
 800bd5a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd5c:	81c2      	strh	r2, [r0, #14]
 800bd5e:	6183      	str	r3, [r0, #24]
 800bd60:	4619      	mov	r1, r3
 800bd62:	2208      	movs	r2, #8
 800bd64:	305c      	adds	r0, #92	; 0x5c
 800bd66:	f7fd fbb1 	bl	80094cc <memset>
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <std+0x38>)
 800bd6c:	6224      	str	r4, [r4, #32]
 800bd6e:	6263      	str	r3, [r4, #36]	; 0x24
 800bd70:	4b04      	ldr	r3, [pc, #16]	; (800bd84 <std+0x3c>)
 800bd72:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd74:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <std+0x40>)
 800bd76:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd78:	4b04      	ldr	r3, [pc, #16]	; (800bd8c <std+0x44>)
 800bd7a:	6323      	str	r3, [r4, #48]	; 0x30
 800bd7c:	bd10      	pop	{r4, pc}
 800bd7e:	bf00      	nop
 800bd80:	0800c099 	.word	0x0800c099
 800bd84:	0800c0bb 	.word	0x0800c0bb
 800bd88:	0800c0f3 	.word	0x0800c0f3
 800bd8c:	0800c117 	.word	0x0800c117

0800bd90 <_cleanup_r>:
 800bd90:	4901      	ldr	r1, [pc, #4]	; (800bd98 <_cleanup_r+0x8>)
 800bd92:	f000 b8af 	b.w	800bef4 <_fwalk_reent>
 800bd96:	bf00      	nop
 800bd98:	0800bcd1 	.word	0x0800bcd1

0800bd9c <__sfmoreglue>:
 800bd9c:	b570      	push	{r4, r5, r6, lr}
 800bd9e:	2568      	movs	r5, #104	; 0x68
 800bda0:	1e4a      	subs	r2, r1, #1
 800bda2:	4355      	muls	r5, r2
 800bda4:	460e      	mov	r6, r1
 800bda6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdaa:	f7ff fa89 	bl	800b2c0 <_malloc_r>
 800bdae:	4604      	mov	r4, r0
 800bdb0:	b140      	cbz	r0, 800bdc4 <__sfmoreglue+0x28>
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	e9c0 1600 	strd	r1, r6, [r0]
 800bdb8:	300c      	adds	r0, #12
 800bdba:	60a0      	str	r0, [r4, #8]
 800bdbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdc0:	f7fd fb84 	bl	80094cc <memset>
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	bd70      	pop	{r4, r5, r6, pc}

0800bdc8 <__sfp_lock_acquire>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__sfp_lock_acquire+0x8>)
 800bdca:	f000 b8b3 	b.w	800bf34 <__retarget_lock_acquire_recursive>
 800bdce:	bf00      	nop
 800bdd0:	200006bc 	.word	0x200006bc

0800bdd4 <__sfp_lock_release>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	; (800bddc <__sfp_lock_release+0x8>)
 800bdd6:	f000 b8ae 	b.w	800bf36 <__retarget_lock_release_recursive>
 800bdda:	bf00      	nop
 800bddc:	200006bc 	.word	0x200006bc

0800bde0 <__sinit_lock_acquire>:
 800bde0:	4801      	ldr	r0, [pc, #4]	; (800bde8 <__sinit_lock_acquire+0x8>)
 800bde2:	f000 b8a7 	b.w	800bf34 <__retarget_lock_acquire_recursive>
 800bde6:	bf00      	nop
 800bde8:	200006b7 	.word	0x200006b7

0800bdec <__sinit_lock_release>:
 800bdec:	4801      	ldr	r0, [pc, #4]	; (800bdf4 <__sinit_lock_release+0x8>)
 800bdee:	f000 b8a2 	b.w	800bf36 <__retarget_lock_release_recursive>
 800bdf2:	bf00      	nop
 800bdf4:	200006b7 	.word	0x200006b7

0800bdf8 <__sinit>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	f7ff fff0 	bl	800bde0 <__sinit_lock_acquire>
 800be00:	69a3      	ldr	r3, [r4, #24]
 800be02:	b11b      	cbz	r3, 800be0c <__sinit+0x14>
 800be04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be08:	f7ff bff0 	b.w	800bdec <__sinit_lock_release>
 800be0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be10:	6523      	str	r3, [r4, #80]	; 0x50
 800be12:	4b13      	ldr	r3, [pc, #76]	; (800be60 <__sinit+0x68>)
 800be14:	4a13      	ldr	r2, [pc, #76]	; (800be64 <__sinit+0x6c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	62a2      	str	r2, [r4, #40]	; 0x28
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	bf08      	it	eq
 800be1e:	2301      	moveq	r3, #1
 800be20:	4620      	mov	r0, r4
 800be22:	bf08      	it	eq
 800be24:	61a3      	streq	r3, [r4, #24]
 800be26:	f000 f81f 	bl	800be68 <__sfp>
 800be2a:	6060      	str	r0, [r4, #4]
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 f81b 	bl	800be68 <__sfp>
 800be32:	60a0      	str	r0, [r4, #8]
 800be34:	4620      	mov	r0, r4
 800be36:	f000 f817 	bl	800be68 <__sfp>
 800be3a:	2200      	movs	r2, #0
 800be3c:	2104      	movs	r1, #4
 800be3e:	60e0      	str	r0, [r4, #12]
 800be40:	6860      	ldr	r0, [r4, #4]
 800be42:	f7ff ff81 	bl	800bd48 <std>
 800be46:	2201      	movs	r2, #1
 800be48:	2109      	movs	r1, #9
 800be4a:	68a0      	ldr	r0, [r4, #8]
 800be4c:	f7ff ff7c 	bl	800bd48 <std>
 800be50:	2202      	movs	r2, #2
 800be52:	2112      	movs	r1, #18
 800be54:	68e0      	ldr	r0, [r4, #12]
 800be56:	f7ff ff77 	bl	800bd48 <std>
 800be5a:	2301      	movs	r3, #1
 800be5c:	61a3      	str	r3, [r4, #24]
 800be5e:	e7d1      	b.n	800be04 <__sinit+0xc>
 800be60:	0800cca0 	.word	0x0800cca0
 800be64:	0800bd91 	.word	0x0800bd91

0800be68 <__sfp>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	4607      	mov	r7, r0
 800be6c:	f7ff ffac 	bl	800bdc8 <__sfp_lock_acquire>
 800be70:	4b1e      	ldr	r3, [pc, #120]	; (800beec <__sfp+0x84>)
 800be72:	681e      	ldr	r6, [r3, #0]
 800be74:	69b3      	ldr	r3, [r6, #24]
 800be76:	b913      	cbnz	r3, 800be7e <__sfp+0x16>
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff ffbd 	bl	800bdf8 <__sinit>
 800be7e:	3648      	adds	r6, #72	; 0x48
 800be80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be84:	3b01      	subs	r3, #1
 800be86:	d503      	bpl.n	800be90 <__sfp+0x28>
 800be88:	6833      	ldr	r3, [r6, #0]
 800be8a:	b30b      	cbz	r3, 800bed0 <__sfp+0x68>
 800be8c:	6836      	ldr	r6, [r6, #0]
 800be8e:	e7f7      	b.n	800be80 <__sfp+0x18>
 800be90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be94:	b9d5      	cbnz	r5, 800becc <__sfp+0x64>
 800be96:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <__sfp+0x88>)
 800be98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be9c:	60e3      	str	r3, [r4, #12]
 800be9e:	6665      	str	r5, [r4, #100]	; 0x64
 800bea0:	f000 f847 	bl	800bf32 <__retarget_lock_init_recursive>
 800bea4:	f7ff ff96 	bl	800bdd4 <__sfp_lock_release>
 800bea8:	2208      	movs	r2, #8
 800beaa:	4629      	mov	r1, r5
 800beac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800beb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800beb4:	6025      	str	r5, [r4, #0]
 800beb6:	61a5      	str	r5, [r4, #24]
 800beb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bebc:	f7fd fb06 	bl	80094cc <memset>
 800bec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bec8:	4620      	mov	r0, r4
 800beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800becc:	3468      	adds	r4, #104	; 0x68
 800bece:	e7d9      	b.n	800be84 <__sfp+0x1c>
 800bed0:	2104      	movs	r1, #4
 800bed2:	4638      	mov	r0, r7
 800bed4:	f7ff ff62 	bl	800bd9c <__sfmoreglue>
 800bed8:	4604      	mov	r4, r0
 800beda:	6030      	str	r0, [r6, #0]
 800bedc:	2800      	cmp	r0, #0
 800bede:	d1d5      	bne.n	800be8c <__sfp+0x24>
 800bee0:	f7ff ff78 	bl	800bdd4 <__sfp_lock_release>
 800bee4:	230c      	movs	r3, #12
 800bee6:	603b      	str	r3, [r7, #0]
 800bee8:	e7ee      	b.n	800bec8 <__sfp+0x60>
 800beea:	bf00      	nop
 800beec:	0800cca0 	.word	0x0800cca0
 800bef0:	ffff0001 	.word	0xffff0001

0800bef4 <_fwalk_reent>:
 800bef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bef8:	4606      	mov	r6, r0
 800befa:	4688      	mov	r8, r1
 800befc:	2700      	movs	r7, #0
 800befe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf06:	f1b9 0901 	subs.w	r9, r9, #1
 800bf0a:	d505      	bpl.n	800bf18 <_fwalk_reent+0x24>
 800bf0c:	6824      	ldr	r4, [r4, #0]
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	d1f7      	bne.n	800bf02 <_fwalk_reent+0xe>
 800bf12:	4638      	mov	r0, r7
 800bf14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf18:	89ab      	ldrh	r3, [r5, #12]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d907      	bls.n	800bf2e <_fwalk_reent+0x3a>
 800bf1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf22:	3301      	adds	r3, #1
 800bf24:	d003      	beq.n	800bf2e <_fwalk_reent+0x3a>
 800bf26:	4629      	mov	r1, r5
 800bf28:	4630      	mov	r0, r6
 800bf2a:	47c0      	blx	r8
 800bf2c:	4307      	orrs	r7, r0
 800bf2e:	3568      	adds	r5, #104	; 0x68
 800bf30:	e7e9      	b.n	800bf06 <_fwalk_reent+0x12>

0800bf32 <__retarget_lock_init_recursive>:
 800bf32:	4770      	bx	lr

0800bf34 <__retarget_lock_acquire_recursive>:
 800bf34:	4770      	bx	lr

0800bf36 <__retarget_lock_release_recursive>:
 800bf36:	4770      	bx	lr

0800bf38 <__swhatbuf_r>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	460e      	mov	r6, r1
 800bf3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf40:	4614      	mov	r4, r2
 800bf42:	2900      	cmp	r1, #0
 800bf44:	461d      	mov	r5, r3
 800bf46:	b096      	sub	sp, #88	; 0x58
 800bf48:	da07      	bge.n	800bf5a <__swhatbuf_r+0x22>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	602b      	str	r3, [r5, #0]
 800bf4e:	89b3      	ldrh	r3, [r6, #12]
 800bf50:	061a      	lsls	r2, r3, #24
 800bf52:	d410      	bmi.n	800bf76 <__swhatbuf_r+0x3e>
 800bf54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf58:	e00e      	b.n	800bf78 <__swhatbuf_r+0x40>
 800bf5a:	466a      	mov	r2, sp
 800bf5c:	f000 f902 	bl	800c164 <_fstat_r>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	dbf2      	blt.n	800bf4a <__swhatbuf_r+0x12>
 800bf64:	9a01      	ldr	r2, [sp, #4]
 800bf66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf6e:	425a      	negs	r2, r3
 800bf70:	415a      	adcs	r2, r3
 800bf72:	602a      	str	r2, [r5, #0]
 800bf74:	e7ee      	b.n	800bf54 <__swhatbuf_r+0x1c>
 800bf76:	2340      	movs	r3, #64	; 0x40
 800bf78:	2000      	movs	r0, #0
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	b016      	add	sp, #88	; 0x58
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}

0800bf80 <__smakebuf_r>:
 800bf80:	898b      	ldrh	r3, [r1, #12]
 800bf82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf84:	079d      	lsls	r5, r3, #30
 800bf86:	4606      	mov	r6, r0
 800bf88:	460c      	mov	r4, r1
 800bf8a:	d507      	bpl.n	800bf9c <__smakebuf_r+0x1c>
 800bf8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	6123      	str	r3, [r4, #16]
 800bf94:	2301      	movs	r3, #1
 800bf96:	6163      	str	r3, [r4, #20]
 800bf98:	b002      	add	sp, #8
 800bf9a:	bd70      	pop	{r4, r5, r6, pc}
 800bf9c:	466a      	mov	r2, sp
 800bf9e:	ab01      	add	r3, sp, #4
 800bfa0:	f7ff ffca 	bl	800bf38 <__swhatbuf_r>
 800bfa4:	9900      	ldr	r1, [sp, #0]
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f7ff f989 	bl	800b2c0 <_malloc_r>
 800bfae:	b948      	cbnz	r0, 800bfc4 <__smakebuf_r+0x44>
 800bfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb4:	059a      	lsls	r2, r3, #22
 800bfb6:	d4ef      	bmi.n	800bf98 <__smakebuf_r+0x18>
 800bfb8:	f023 0303 	bic.w	r3, r3, #3
 800bfbc:	f043 0302 	orr.w	r3, r3, #2
 800bfc0:	81a3      	strh	r3, [r4, #12]
 800bfc2:	e7e3      	b.n	800bf8c <__smakebuf_r+0xc>
 800bfc4:	4b0d      	ldr	r3, [pc, #52]	; (800bffc <__smakebuf_r+0x7c>)
 800bfc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	6020      	str	r0, [r4, #0]
 800bfcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfd0:	81a3      	strh	r3, [r4, #12]
 800bfd2:	9b00      	ldr	r3, [sp, #0]
 800bfd4:	6120      	str	r0, [r4, #16]
 800bfd6:	6163      	str	r3, [r4, #20]
 800bfd8:	9b01      	ldr	r3, [sp, #4]
 800bfda:	b15b      	cbz	r3, 800bff4 <__smakebuf_r+0x74>
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfe2:	f000 f8d1 	bl	800c188 <_isatty_r>
 800bfe6:	b128      	cbz	r0, 800bff4 <__smakebuf_r+0x74>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	f023 0303 	bic.w	r3, r3, #3
 800bfee:	f043 0301 	orr.w	r3, r3, #1
 800bff2:	81a3      	strh	r3, [r4, #12]
 800bff4:	89a0      	ldrh	r0, [r4, #12]
 800bff6:	4305      	orrs	r5, r0
 800bff8:	81a5      	strh	r5, [r4, #12]
 800bffa:	e7cd      	b.n	800bf98 <__smakebuf_r+0x18>
 800bffc:	0800bd91 	.word	0x0800bd91

0800c000 <_malloc_usable_size_r>:
 800c000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c004:	1f18      	subs	r0, r3, #4
 800c006:	2b00      	cmp	r3, #0
 800c008:	bfbc      	itt	lt
 800c00a:	580b      	ldrlt	r3, [r1, r0]
 800c00c:	18c0      	addlt	r0, r0, r3
 800c00e:	4770      	bx	lr

0800c010 <_raise_r>:
 800c010:	291f      	cmp	r1, #31
 800c012:	b538      	push	{r3, r4, r5, lr}
 800c014:	4604      	mov	r4, r0
 800c016:	460d      	mov	r5, r1
 800c018:	d904      	bls.n	800c024 <_raise_r+0x14>
 800c01a:	2316      	movs	r3, #22
 800c01c:	6003      	str	r3, [r0, #0]
 800c01e:	f04f 30ff 	mov.w	r0, #4294967295
 800c022:	bd38      	pop	{r3, r4, r5, pc}
 800c024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c026:	b112      	cbz	r2, 800c02e <_raise_r+0x1e>
 800c028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c02c:	b94b      	cbnz	r3, 800c042 <_raise_r+0x32>
 800c02e:	4620      	mov	r0, r4
 800c030:	f000 f830 	bl	800c094 <_getpid_r>
 800c034:	462a      	mov	r2, r5
 800c036:	4601      	mov	r1, r0
 800c038:	4620      	mov	r0, r4
 800c03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c03e:	f000 b817 	b.w	800c070 <_kill_r>
 800c042:	2b01      	cmp	r3, #1
 800c044:	d00a      	beq.n	800c05c <_raise_r+0x4c>
 800c046:	1c59      	adds	r1, r3, #1
 800c048:	d103      	bne.n	800c052 <_raise_r+0x42>
 800c04a:	2316      	movs	r3, #22
 800c04c:	6003      	str	r3, [r0, #0]
 800c04e:	2001      	movs	r0, #1
 800c050:	e7e7      	b.n	800c022 <_raise_r+0x12>
 800c052:	2400      	movs	r4, #0
 800c054:	4628      	mov	r0, r5
 800c056:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c05a:	4798      	blx	r3
 800c05c:	2000      	movs	r0, #0
 800c05e:	e7e0      	b.n	800c022 <_raise_r+0x12>

0800c060 <raise>:
 800c060:	4b02      	ldr	r3, [pc, #8]	; (800c06c <raise+0xc>)
 800c062:	4601      	mov	r1, r0
 800c064:	6818      	ldr	r0, [r3, #0]
 800c066:	f7ff bfd3 	b.w	800c010 <_raise_r>
 800c06a:	bf00      	nop
 800c06c:	20000044 	.word	0x20000044

0800c070 <_kill_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	2300      	movs	r3, #0
 800c074:	4d06      	ldr	r5, [pc, #24]	; (800c090 <_kill_r+0x20>)
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	4611      	mov	r1, r2
 800c07c:	602b      	str	r3, [r5, #0]
 800c07e:	f7f8 fcac 	bl	80049da <_kill>
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	d102      	bne.n	800c08c <_kill_r+0x1c>
 800c086:	682b      	ldr	r3, [r5, #0]
 800c088:	b103      	cbz	r3, 800c08c <_kill_r+0x1c>
 800c08a:	6023      	str	r3, [r4, #0]
 800c08c:	bd38      	pop	{r3, r4, r5, pc}
 800c08e:	bf00      	nop
 800c090:	200006b0 	.word	0x200006b0

0800c094 <_getpid_r>:
 800c094:	f7f8 bc9a 	b.w	80049cc <_getpid>

0800c098 <__sread>:
 800c098:	b510      	push	{r4, lr}
 800c09a:	460c      	mov	r4, r1
 800c09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a0:	f000 f894 	bl	800c1cc <_read_r>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	bfab      	itete	ge
 800c0a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c0ac:	181b      	addge	r3, r3, r0
 800c0ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0b2:	bfac      	ite	ge
 800c0b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0b6:	81a3      	strhlt	r3, [r4, #12]
 800c0b8:	bd10      	pop	{r4, pc}

0800c0ba <__swrite>:
 800c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0be:	461f      	mov	r7, r3
 800c0c0:	898b      	ldrh	r3, [r1, #12]
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	05db      	lsls	r3, r3, #23
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	d505      	bpl.n	800c0d8 <__swrite+0x1e>
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d4:	f000 f868 	bl	800c1a8 <_lseek_r>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	4632      	mov	r2, r6
 800c0dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	463b      	mov	r3, r7
 800c0e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ee:	f000 b817 	b.w	800c120 <_write_r>

0800c0f2 <__sseek>:
 800c0f2:	b510      	push	{r4, lr}
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fa:	f000 f855 	bl	800c1a8 <_lseek_r>
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	bf15      	itete	ne
 800c104:	6560      	strne	r0, [r4, #84]	; 0x54
 800c106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c10a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c10e:	81a3      	strheq	r3, [r4, #12]
 800c110:	bf18      	it	ne
 800c112:	81a3      	strhne	r3, [r4, #12]
 800c114:	bd10      	pop	{r4, pc}

0800c116 <__sclose>:
 800c116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11a:	f000 b813 	b.w	800c144 <_close_r>
	...

0800c120 <_write_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	4611      	mov	r1, r2
 800c128:	2200      	movs	r2, #0
 800c12a:	4d05      	ldr	r5, [pc, #20]	; (800c140 <_write_r+0x20>)
 800c12c:	602a      	str	r2, [r5, #0]
 800c12e:	461a      	mov	r2, r3
 800c130:	f7f8 fc8a 	bl	8004a48 <_write>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	d102      	bne.n	800c13e <_write_r+0x1e>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b103      	cbz	r3, 800c13e <_write_r+0x1e>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	200006b0 	.word	0x200006b0

0800c144 <_close_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	2300      	movs	r3, #0
 800c148:	4d05      	ldr	r5, [pc, #20]	; (800c160 <_close_r+0x1c>)
 800c14a:	4604      	mov	r4, r0
 800c14c:	4608      	mov	r0, r1
 800c14e:	602b      	str	r3, [r5, #0]
 800c150:	f7f8 fc96 	bl	8004a80 <_close>
 800c154:	1c43      	adds	r3, r0, #1
 800c156:	d102      	bne.n	800c15e <_close_r+0x1a>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	b103      	cbz	r3, 800c15e <_close_r+0x1a>
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	200006b0 	.word	0x200006b0

0800c164 <_fstat_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	2300      	movs	r3, #0
 800c168:	4d06      	ldr	r5, [pc, #24]	; (800c184 <_fstat_r+0x20>)
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	4611      	mov	r1, r2
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	f7f8 fc90 	bl	8004a96 <_fstat>
 800c176:	1c43      	adds	r3, r0, #1
 800c178:	d102      	bne.n	800c180 <_fstat_r+0x1c>
 800c17a:	682b      	ldr	r3, [r5, #0]
 800c17c:	b103      	cbz	r3, 800c180 <_fstat_r+0x1c>
 800c17e:	6023      	str	r3, [r4, #0]
 800c180:	bd38      	pop	{r3, r4, r5, pc}
 800c182:	bf00      	nop
 800c184:	200006b0 	.word	0x200006b0

0800c188 <_isatty_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	2300      	movs	r3, #0
 800c18c:	4d05      	ldr	r5, [pc, #20]	; (800c1a4 <_isatty_r+0x1c>)
 800c18e:	4604      	mov	r4, r0
 800c190:	4608      	mov	r0, r1
 800c192:	602b      	str	r3, [r5, #0]
 800c194:	f7f8 fc8e 	bl	8004ab4 <_isatty>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_isatty_r+0x1a>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_isatty_r+0x1a>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	200006b0 	.word	0x200006b0

0800c1a8 <_lseek_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	4d05      	ldr	r5, [pc, #20]	; (800c1c8 <_lseek_r+0x20>)
 800c1b4:	602a      	str	r2, [r5, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f7f8 fc86 	bl	8004ac8 <_lseek>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d102      	bne.n	800c1c6 <_lseek_r+0x1e>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	b103      	cbz	r3, 800c1c6 <_lseek_r+0x1e>
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	200006b0 	.word	0x200006b0

0800c1cc <_read_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	4d05      	ldr	r5, [pc, #20]	; (800c1ec <_read_r+0x20>)
 800c1d8:	602a      	str	r2, [r5, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	f7f8 fc17 	bl	8004a0e <_read>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_read_r+0x1e>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_read_r+0x1e>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	200006b0 	.word	0x200006b0

0800c1f0 <sqrt>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460f      	mov	r7, r1
 800c1f6:	f000 f829 	bl	800c24c <__ieee754_sqrt>
 800c1fa:	4b12      	ldr	r3, [pc, #72]	; (800c244 <sqrt+0x54>)
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	f993 3000 	ldrsb.w	r3, [r3]
 800c202:	460d      	mov	r5, r1
 800c204:	3301      	adds	r3, #1
 800c206:	d019      	beq.n	800c23c <sqrt+0x4c>
 800c208:	4632      	mov	r2, r6
 800c20a:	463b      	mov	r3, r7
 800c20c:	4630      	mov	r0, r6
 800c20e:	4639      	mov	r1, r7
 800c210:	f7f4 fbfc 	bl	8000a0c <__aeabi_dcmpun>
 800c214:	b990      	cbnz	r0, 800c23c <sqrt+0x4c>
 800c216:	2200      	movs	r2, #0
 800c218:	2300      	movs	r3, #0
 800c21a:	4630      	mov	r0, r6
 800c21c:	4639      	mov	r1, r7
 800c21e:	f7f4 fbcd 	bl	80009bc <__aeabi_dcmplt>
 800c222:	b158      	cbz	r0, 800c23c <sqrt+0x4c>
 800c224:	f7fd f91a 	bl	800945c <__errno>
 800c228:	2321      	movs	r3, #33	; 0x21
 800c22a:	2200      	movs	r2, #0
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	2300      	movs	r3, #0
 800c230:	4610      	mov	r0, r2
 800c232:	4619      	mov	r1, r3
 800c234:	f7f4 fa7a 	bl	800072c <__aeabi_ddiv>
 800c238:	4604      	mov	r4, r0
 800c23a:	460d      	mov	r5, r1
 800c23c:	4620      	mov	r0, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c242:	bf00      	nop
 800c244:	20000214 	.word	0x20000214

0800c248 <atan2f>:
 800c248:	f000 b8ac 	b.w	800c3a4 <__ieee754_atan2f>

0800c24c <__ieee754_sqrt>:
 800c24c:	f8df c150 	ldr.w	ip, [pc, #336]	; 800c3a0 <__ieee754_sqrt+0x154>
 800c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c254:	ea3c 0c01 	bics.w	ip, ip, r1
 800c258:	460b      	mov	r3, r1
 800c25a:	4606      	mov	r6, r0
 800c25c:	460d      	mov	r5, r1
 800c25e:	460a      	mov	r2, r1
 800c260:	4607      	mov	r7, r0
 800c262:	4604      	mov	r4, r0
 800c264:	d10e      	bne.n	800c284 <__ieee754_sqrt+0x38>
 800c266:	4602      	mov	r2, r0
 800c268:	f7f4 f936 	bl	80004d8 <__aeabi_dmul>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4630      	mov	r0, r6
 800c272:	4629      	mov	r1, r5
 800c274:	f7f3 ff7a 	bl	800016c <__adddf3>
 800c278:	4606      	mov	r6, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	4630      	mov	r0, r6
 800c27e:	4629      	mov	r1, r5
 800c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c284:	2900      	cmp	r1, #0
 800c286:	dc0d      	bgt.n	800c2a4 <__ieee754_sqrt+0x58>
 800c288:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c28c:	ea5c 0707 	orrs.w	r7, ip, r7
 800c290:	d0f4      	beq.n	800c27c <__ieee754_sqrt+0x30>
 800c292:	b139      	cbz	r1, 800c2a4 <__ieee754_sqrt+0x58>
 800c294:	4602      	mov	r2, r0
 800c296:	f7f3 ff67 	bl	8000168 <__aeabi_dsub>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	f7f4 fa45 	bl	800072c <__aeabi_ddiv>
 800c2a2:	e7e9      	b.n	800c278 <__ieee754_sqrt+0x2c>
 800c2a4:	1512      	asrs	r2, r2, #20
 800c2a6:	d074      	beq.n	800c392 <__ieee754_sqrt+0x146>
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	07d5      	lsls	r5, r2, #31
 800c2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2b0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800c2b4:	bf5e      	ittt	pl
 800c2b6:	0fe3      	lsrpl	r3, r4, #31
 800c2b8:	0064      	lslpl	r4, r4, #1
 800c2ba:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800c2be:	0fe3      	lsrs	r3, r4, #31
 800c2c0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c2c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800c2c8:	2516      	movs	r5, #22
 800c2ca:	4601      	mov	r1, r0
 800c2cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c2d0:	1076      	asrs	r6, r6, #1
 800c2d2:	0064      	lsls	r4, r4, #1
 800c2d4:	188f      	adds	r7, r1, r2
 800c2d6:	429f      	cmp	r7, r3
 800c2d8:	bfde      	ittt	le
 800c2da:	1bdb      	suble	r3, r3, r7
 800c2dc:	18b9      	addle	r1, r7, r2
 800c2de:	1880      	addle	r0, r0, r2
 800c2e0:	005b      	lsls	r3, r3, #1
 800c2e2:	3d01      	subs	r5, #1
 800c2e4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c2e8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c2ec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c2f0:	d1f0      	bne.n	800c2d4 <__ieee754_sqrt+0x88>
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	f04f 0e20 	mov.w	lr, #32
 800c2f8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800c2fc:	428b      	cmp	r3, r1
 800c2fe:	eb07 0c05 	add.w	ip, r7, r5
 800c302:	dc02      	bgt.n	800c30a <__ieee754_sqrt+0xbe>
 800c304:	d113      	bne.n	800c32e <__ieee754_sqrt+0xe2>
 800c306:	45a4      	cmp	ip, r4
 800c308:	d811      	bhi.n	800c32e <__ieee754_sqrt+0xe2>
 800c30a:	f1bc 0f00 	cmp.w	ip, #0
 800c30e:	eb0c 0507 	add.w	r5, ip, r7
 800c312:	da43      	bge.n	800c39c <__ieee754_sqrt+0x150>
 800c314:	2d00      	cmp	r5, #0
 800c316:	db41      	blt.n	800c39c <__ieee754_sqrt+0x150>
 800c318:	f101 0801 	add.w	r8, r1, #1
 800c31c:	1a5b      	subs	r3, r3, r1
 800c31e:	4641      	mov	r1, r8
 800c320:	45a4      	cmp	ip, r4
 800c322:	bf88      	it	hi
 800c324:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c328:	eba4 040c 	sub.w	r4, r4, ip
 800c32c:	443a      	add	r2, r7
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	f1be 0e01 	subs.w	lr, lr, #1
 800c334:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c338:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800c33c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c340:	d1dc      	bne.n	800c2fc <__ieee754_sqrt+0xb0>
 800c342:	4323      	orrs	r3, r4
 800c344:	d006      	beq.n	800c354 <__ieee754_sqrt+0x108>
 800c346:	1c54      	adds	r4, r2, #1
 800c348:	bf0b      	itete	eq
 800c34a:	4672      	moveq	r2, lr
 800c34c:	3201      	addne	r2, #1
 800c34e:	3001      	addeq	r0, #1
 800c350:	f022 0201 	bicne.w	r2, r2, #1
 800c354:	1043      	asrs	r3, r0, #1
 800c356:	07c1      	lsls	r1, r0, #31
 800c358:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c35c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c360:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c364:	bf48      	it	mi
 800c366:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c36a:	4610      	mov	r0, r2
 800c36c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800c370:	e782      	b.n	800c278 <__ieee754_sqrt+0x2c>
 800c372:	0ae3      	lsrs	r3, r4, #11
 800c374:	3915      	subs	r1, #21
 800c376:	0564      	lsls	r4, r4, #21
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d0fa      	beq.n	800c372 <__ieee754_sqrt+0x126>
 800c37c:	02de      	lsls	r6, r3, #11
 800c37e:	d50a      	bpl.n	800c396 <__ieee754_sqrt+0x14a>
 800c380:	f1c2 0020 	rsb	r0, r2, #32
 800c384:	fa24 f000 	lsr.w	r0, r4, r0
 800c388:	1e55      	subs	r5, r2, #1
 800c38a:	4094      	lsls	r4, r2
 800c38c:	4303      	orrs	r3, r0
 800c38e:	1b4a      	subs	r2, r1, r5
 800c390:	e78a      	b.n	800c2a8 <__ieee754_sqrt+0x5c>
 800c392:	4611      	mov	r1, r2
 800c394:	e7f0      	b.n	800c378 <__ieee754_sqrt+0x12c>
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	3201      	adds	r2, #1
 800c39a:	e7ef      	b.n	800c37c <__ieee754_sqrt+0x130>
 800c39c:	4688      	mov	r8, r1
 800c39e:	e7bd      	b.n	800c31c <__ieee754_sqrt+0xd0>
 800c3a0:	7ff00000 	.word	0x7ff00000

0800c3a4 <__ieee754_atan2f>:
 800c3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c3aa:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	dc05      	bgt.n	800c3be <__ieee754_atan2f+0x1a>
 800c3b2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c3b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c3ba:	4607      	mov	r7, r0
 800c3bc:	dd04      	ble.n	800c3c8 <__ieee754_atan2f+0x24>
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f4 fbb8 	bl	8000b34 <__addsf3>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	e011      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c3c8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c3cc:	d103      	bne.n	800c3d6 <__ieee754_atan2f+0x32>
 800c3ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3d2:	f000 b86d 	b.w	800c4b0 <atanf>
 800c3d6:	178c      	asrs	r4, r1, #30
 800c3d8:	f004 0402 	and.w	r4, r4, #2
 800c3dc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c3e0:	b932      	cbnz	r2, 800c3f0 <__ieee754_atan2f+0x4c>
 800c3e2:	2c02      	cmp	r4, #2
 800c3e4:	d04c      	beq.n	800c480 <__ieee754_atan2f+0xdc>
 800c3e6:	2c03      	cmp	r4, #3
 800c3e8:	d100      	bne.n	800c3ec <__ieee754_atan2f+0x48>
 800c3ea:	4b29      	ldr	r3, [pc, #164]	; (800c490 <__ieee754_atan2f+0xec>)
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3f0:	b91e      	cbnz	r6, 800c3fa <__ieee754_atan2f+0x56>
 800c3f2:	2f00      	cmp	r7, #0
 800c3f4:	da4a      	bge.n	800c48c <__ieee754_atan2f+0xe8>
 800c3f6:	4b27      	ldr	r3, [pc, #156]	; (800c494 <__ieee754_atan2f+0xf0>)
 800c3f8:	e7f8      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c3fa:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c3fe:	d10e      	bne.n	800c41e <__ieee754_atan2f+0x7a>
 800c400:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c404:	f104 34ff 	add.w	r4, r4, #4294967295
 800c408:	d105      	bne.n	800c416 <__ieee754_atan2f+0x72>
 800c40a:	2c02      	cmp	r4, #2
 800c40c:	d83a      	bhi.n	800c484 <__ieee754_atan2f+0xe0>
 800c40e:	4b22      	ldr	r3, [pc, #136]	; (800c498 <__ieee754_atan2f+0xf4>)
 800c410:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c414:	e7ea      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c416:	2c02      	cmp	r4, #2
 800c418:	d836      	bhi.n	800c488 <__ieee754_atan2f+0xe4>
 800c41a:	4b20      	ldr	r3, [pc, #128]	; (800c49c <__ieee754_atan2f+0xf8>)
 800c41c:	e7f8      	b.n	800c410 <__ieee754_atan2f+0x6c>
 800c41e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c422:	d0e6      	beq.n	800c3f2 <__ieee754_atan2f+0x4e>
 800c424:	1b92      	subs	r2, r2, r6
 800c426:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800c42a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800c42e:	da17      	bge.n	800c460 <__ieee754_atan2f+0xbc>
 800c430:	2900      	cmp	r1, #0
 800c432:	da01      	bge.n	800c438 <__ieee754_atan2f+0x94>
 800c434:	303c      	adds	r0, #60	; 0x3c
 800c436:	db15      	blt.n	800c464 <__ieee754_atan2f+0xc0>
 800c438:	4618      	mov	r0, r3
 800c43a:	f7f4 fd37 	bl	8000eac <__aeabi_fdiv>
 800c43e:	f000 f943 	bl	800c6c8 <fabsf>
 800c442:	f000 f835 	bl	800c4b0 <atanf>
 800c446:	4603      	mov	r3, r0
 800c448:	2c01      	cmp	r4, #1
 800c44a:	d00d      	beq.n	800c468 <__ieee754_atan2f+0xc4>
 800c44c:	2c02      	cmp	r4, #2
 800c44e:	d00e      	beq.n	800c46e <__ieee754_atan2f+0xca>
 800c450:	2c00      	cmp	r4, #0
 800c452:	d0cb      	beq.n	800c3ec <__ieee754_atan2f+0x48>
 800c454:	4912      	ldr	r1, [pc, #72]	; (800c4a0 <__ieee754_atan2f+0xfc>)
 800c456:	4618      	mov	r0, r3
 800c458:	f7f4 fb6c 	bl	8000b34 <__addsf3>
 800c45c:	4911      	ldr	r1, [pc, #68]	; (800c4a4 <__ieee754_atan2f+0x100>)
 800c45e:	e00c      	b.n	800c47a <__ieee754_atan2f+0xd6>
 800c460:	4b11      	ldr	r3, [pc, #68]	; (800c4a8 <__ieee754_atan2f+0x104>)
 800c462:	e7f1      	b.n	800c448 <__ieee754_atan2f+0xa4>
 800c464:	2300      	movs	r3, #0
 800c466:	e7ef      	b.n	800c448 <__ieee754_atan2f+0xa4>
 800c468:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c46c:	e7be      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c46e:	490c      	ldr	r1, [pc, #48]	; (800c4a0 <__ieee754_atan2f+0xfc>)
 800c470:	4618      	mov	r0, r3
 800c472:	f7f4 fb5f 	bl	8000b34 <__addsf3>
 800c476:	4601      	mov	r1, r0
 800c478:	480a      	ldr	r0, [pc, #40]	; (800c4a4 <__ieee754_atan2f+0x100>)
 800c47a:	f7f4 fb59 	bl	8000b30 <__aeabi_fsub>
 800c47e:	e7a1      	b.n	800c3c4 <__ieee754_atan2f+0x20>
 800c480:	4b08      	ldr	r3, [pc, #32]	; (800c4a4 <__ieee754_atan2f+0x100>)
 800c482:	e7b3      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c484:	4b09      	ldr	r3, [pc, #36]	; (800c4ac <__ieee754_atan2f+0x108>)
 800c486:	e7b1      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c488:	2300      	movs	r3, #0
 800c48a:	e7af      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c48c:	4b06      	ldr	r3, [pc, #24]	; (800c4a8 <__ieee754_atan2f+0x104>)
 800c48e:	e7ad      	b.n	800c3ec <__ieee754_atan2f+0x48>
 800c490:	c0490fdb 	.word	0xc0490fdb
 800c494:	bfc90fdb 	.word	0xbfc90fdb
 800c498:	0800d084 	.word	0x0800d084
 800c49c:	0800d090 	.word	0x0800d090
 800c4a0:	33bbbd2e 	.word	0x33bbbd2e
 800c4a4:	40490fdb 	.word	0x40490fdb
 800c4a8:	3fc90fdb 	.word	0x3fc90fdb
 800c4ac:	3f490fdb 	.word	0x3f490fdb

0800c4b0 <atanf>:
 800c4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c4b8:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4680      	mov	r8, r0
 800c4c0:	db0e      	blt.n	800c4e0 <atanf+0x30>
 800c4c2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c4c6:	dd04      	ble.n	800c4d2 <atanf+0x22>
 800c4c8:	4601      	mov	r1, r0
 800c4ca:	f7f4 fb33 	bl	8000b34 <__addsf3>
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	e003      	b.n	800c4da <atanf+0x2a>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f300 80ce 	bgt.w	800c674 <atanf+0x1c4>
 800c4d8:	4c67      	ldr	r4, [pc, #412]	; (800c678 <atanf+0x1c8>)
 800c4da:	4620      	mov	r0, r4
 800c4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e0:	4b66      	ldr	r3, [pc, #408]	; (800c67c <atanf+0x1cc>)
 800c4e2:	429d      	cmp	r5, r3
 800c4e4:	dc0e      	bgt.n	800c504 <atanf+0x54>
 800c4e6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c4ea:	da08      	bge.n	800c4fe <atanf+0x4e>
 800c4ec:	4964      	ldr	r1, [pc, #400]	; (800c680 <atanf+0x1d0>)
 800c4ee:	f7f4 fb21 	bl	8000b34 <__addsf3>
 800c4f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c4f6:	f7f4 fde1 	bl	80010bc <__aeabi_fcmpgt>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d1ed      	bne.n	800c4da <atanf+0x2a>
 800c4fe:	f04f 36ff 	mov.w	r6, #4294967295
 800c502:	e01c      	b.n	800c53e <atanf+0x8e>
 800c504:	f000 f8e0 	bl	800c6c8 <fabsf>
 800c508:	4b5e      	ldr	r3, [pc, #376]	; (800c684 <atanf+0x1d4>)
 800c50a:	4604      	mov	r4, r0
 800c50c:	429d      	cmp	r5, r3
 800c50e:	dc7c      	bgt.n	800c60a <atanf+0x15a>
 800c510:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c514:	429d      	cmp	r5, r3
 800c516:	dc67      	bgt.n	800c5e8 <atanf+0x138>
 800c518:	4601      	mov	r1, r0
 800c51a:	f7f4 fb0b 	bl	8000b34 <__addsf3>
 800c51e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c522:	f7f4 fb05 	bl	8000b30 <__aeabi_fsub>
 800c526:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c52a:	4605      	mov	r5, r0
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7f4 fb01 	bl	8000b34 <__addsf3>
 800c532:	4601      	mov	r1, r0
 800c534:	4628      	mov	r0, r5
 800c536:	f7f4 fcb9 	bl	8000eac <__aeabi_fdiv>
 800c53a:	2600      	movs	r6, #0
 800c53c:	4604      	mov	r4, r0
 800c53e:	4621      	mov	r1, r4
 800c540:	4620      	mov	r0, r4
 800c542:	f7f4 fbff 	bl	8000d44 <__aeabi_fmul>
 800c546:	4601      	mov	r1, r0
 800c548:	4607      	mov	r7, r0
 800c54a:	f7f4 fbfb 	bl	8000d44 <__aeabi_fmul>
 800c54e:	4605      	mov	r5, r0
 800c550:	494d      	ldr	r1, [pc, #308]	; (800c688 <atanf+0x1d8>)
 800c552:	f7f4 fbf7 	bl	8000d44 <__aeabi_fmul>
 800c556:	494d      	ldr	r1, [pc, #308]	; (800c68c <atanf+0x1dc>)
 800c558:	f7f4 faec 	bl	8000b34 <__addsf3>
 800c55c:	4629      	mov	r1, r5
 800c55e:	f7f4 fbf1 	bl	8000d44 <__aeabi_fmul>
 800c562:	494b      	ldr	r1, [pc, #300]	; (800c690 <atanf+0x1e0>)
 800c564:	f7f4 fae6 	bl	8000b34 <__addsf3>
 800c568:	4629      	mov	r1, r5
 800c56a:	f7f4 fbeb 	bl	8000d44 <__aeabi_fmul>
 800c56e:	4949      	ldr	r1, [pc, #292]	; (800c694 <atanf+0x1e4>)
 800c570:	f7f4 fae0 	bl	8000b34 <__addsf3>
 800c574:	4629      	mov	r1, r5
 800c576:	f7f4 fbe5 	bl	8000d44 <__aeabi_fmul>
 800c57a:	4947      	ldr	r1, [pc, #284]	; (800c698 <atanf+0x1e8>)
 800c57c:	f7f4 fada 	bl	8000b34 <__addsf3>
 800c580:	4629      	mov	r1, r5
 800c582:	f7f4 fbdf 	bl	8000d44 <__aeabi_fmul>
 800c586:	4945      	ldr	r1, [pc, #276]	; (800c69c <atanf+0x1ec>)
 800c588:	f7f4 fad4 	bl	8000b34 <__addsf3>
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f4 fbd9 	bl	8000d44 <__aeabi_fmul>
 800c592:	4943      	ldr	r1, [pc, #268]	; (800c6a0 <atanf+0x1f0>)
 800c594:	4607      	mov	r7, r0
 800c596:	4628      	mov	r0, r5
 800c598:	f7f4 fbd4 	bl	8000d44 <__aeabi_fmul>
 800c59c:	4941      	ldr	r1, [pc, #260]	; (800c6a4 <atanf+0x1f4>)
 800c59e:	f7f4 fac7 	bl	8000b30 <__aeabi_fsub>
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	f7f4 fbce 	bl	8000d44 <__aeabi_fmul>
 800c5a8:	493f      	ldr	r1, [pc, #252]	; (800c6a8 <atanf+0x1f8>)
 800c5aa:	f7f4 fac1 	bl	8000b30 <__aeabi_fsub>
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f7f4 fbc8 	bl	8000d44 <__aeabi_fmul>
 800c5b4:	493d      	ldr	r1, [pc, #244]	; (800c6ac <atanf+0x1fc>)
 800c5b6:	f7f4 fabb 	bl	8000b30 <__aeabi_fsub>
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	f7f4 fbc2 	bl	8000d44 <__aeabi_fmul>
 800c5c0:	493b      	ldr	r1, [pc, #236]	; (800c6b0 <atanf+0x200>)
 800c5c2:	f7f4 fab5 	bl	8000b30 <__aeabi_fsub>
 800c5c6:	4629      	mov	r1, r5
 800c5c8:	f7f4 fbbc 	bl	8000d44 <__aeabi_fmul>
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	4638      	mov	r0, r7
 800c5d0:	f7f4 fab0 	bl	8000b34 <__addsf3>
 800c5d4:	4621      	mov	r1, r4
 800c5d6:	f7f4 fbb5 	bl	8000d44 <__aeabi_fmul>
 800c5da:	1c73      	adds	r3, r6, #1
 800c5dc:	4601      	mov	r1, r0
 800c5de:	d133      	bne.n	800c648 <atanf+0x198>
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f7f4 faa5 	bl	8000b30 <__aeabi_fsub>
 800c5e6:	e772      	b.n	800c4ce <atanf+0x1e>
 800c5e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5ec:	f7f4 faa0 	bl	8000b30 <__aeabi_fsub>
 800c5f0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f7f4 fa9c 	bl	8000b34 <__addsf3>
 800c5fc:	4601      	mov	r1, r0
 800c5fe:	4628      	mov	r0, r5
 800c600:	f7f4 fc54 	bl	8000eac <__aeabi_fdiv>
 800c604:	2601      	movs	r6, #1
 800c606:	4604      	mov	r4, r0
 800c608:	e799      	b.n	800c53e <atanf+0x8e>
 800c60a:	4b2a      	ldr	r3, [pc, #168]	; (800c6b4 <atanf+0x204>)
 800c60c:	429d      	cmp	r5, r3
 800c60e:	dc14      	bgt.n	800c63a <atanf+0x18a>
 800c610:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c614:	f7f4 fa8c 	bl	8000b30 <__aeabi_fsub>
 800c618:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c61c:	4605      	mov	r5, r0
 800c61e:	4620      	mov	r0, r4
 800c620:	f7f4 fb90 	bl	8000d44 <__aeabi_fmul>
 800c624:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c628:	f7f4 fa84 	bl	8000b34 <__addsf3>
 800c62c:	4601      	mov	r1, r0
 800c62e:	4628      	mov	r0, r5
 800c630:	f7f4 fc3c 	bl	8000eac <__aeabi_fdiv>
 800c634:	2602      	movs	r6, #2
 800c636:	4604      	mov	r4, r0
 800c638:	e781      	b.n	800c53e <atanf+0x8e>
 800c63a:	4601      	mov	r1, r0
 800c63c:	481e      	ldr	r0, [pc, #120]	; (800c6b8 <atanf+0x208>)
 800c63e:	f7f4 fc35 	bl	8000eac <__aeabi_fdiv>
 800c642:	2603      	movs	r6, #3
 800c644:	4604      	mov	r4, r0
 800c646:	e77a      	b.n	800c53e <atanf+0x8e>
 800c648:	4b1c      	ldr	r3, [pc, #112]	; (800c6bc <atanf+0x20c>)
 800c64a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c64e:	f7f4 fa6f 	bl	8000b30 <__aeabi_fsub>
 800c652:	4621      	mov	r1, r4
 800c654:	f7f4 fa6c 	bl	8000b30 <__aeabi_fsub>
 800c658:	4b19      	ldr	r3, [pc, #100]	; (800c6c0 <atanf+0x210>)
 800c65a:	4601      	mov	r1, r0
 800c65c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c660:	f7f4 fa66 	bl	8000b30 <__aeabi_fsub>
 800c664:	f1b8 0f00 	cmp.w	r8, #0
 800c668:	4604      	mov	r4, r0
 800c66a:	f6bf af36 	bge.w	800c4da <atanf+0x2a>
 800c66e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c672:	e72c      	b.n	800c4ce <atanf+0x1e>
 800c674:	4c13      	ldr	r4, [pc, #76]	; (800c6c4 <atanf+0x214>)
 800c676:	e730      	b.n	800c4da <atanf+0x2a>
 800c678:	bfc90fdb 	.word	0xbfc90fdb
 800c67c:	3edfffff 	.word	0x3edfffff
 800c680:	7149f2ca 	.word	0x7149f2ca
 800c684:	3f97ffff 	.word	0x3f97ffff
 800c688:	3c8569d7 	.word	0x3c8569d7
 800c68c:	3d4bda59 	.word	0x3d4bda59
 800c690:	3d886b35 	.word	0x3d886b35
 800c694:	3dba2e6e 	.word	0x3dba2e6e
 800c698:	3e124925 	.word	0x3e124925
 800c69c:	3eaaaaab 	.word	0x3eaaaaab
 800c6a0:	bd15a221 	.word	0xbd15a221
 800c6a4:	3d6ef16b 	.word	0x3d6ef16b
 800c6a8:	3d9d8795 	.word	0x3d9d8795
 800c6ac:	3de38e38 	.word	0x3de38e38
 800c6b0:	3e4ccccd 	.word	0x3e4ccccd
 800c6b4:	401bffff 	.word	0x401bffff
 800c6b8:	bf800000 	.word	0xbf800000
 800c6bc:	0800d0ac 	.word	0x0800d0ac
 800c6c0:	0800d09c 	.word	0x0800d09c
 800c6c4:	3fc90fdb 	.word	0x3fc90fdb

0800c6c8 <fabsf>:
 800c6c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c6cc:	4770      	bx	lr
	...

0800c6d0 <_init>:
 800c6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d2:	bf00      	nop
 800c6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6d6:	bc08      	pop	{r3}
 800c6d8:	469e      	mov	lr, r3
 800c6da:	4770      	bx	lr

0800c6dc <_fini>:
 800c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6de:	bf00      	nop
 800c6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6e2:	bc08      	pop	{r3}
 800c6e4:	469e      	mov	lr, r3
 800c6e6:	4770      	bx	lr
