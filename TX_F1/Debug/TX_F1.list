
TX_F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a4  08009e58  08009e58  00019e58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7fc  0800a7fc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7fc  0800a7fc  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7fc  0800a7fc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7fc  0800a7fc  0001a7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a800  0800a800  0001a800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a804  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  200001f0  0800a9f4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  0800a9f4  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001231a  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289c  00000000  00000000  00032533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00035fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e57  00000000  00000000  00037060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d36  00000000  00000000  00050eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093262  00000000  00000000  00062bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5e4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  000f5ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e40 	.word	0x08009e40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08009e40 	.word	0x08009e40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <NRF24_DelayMicroSeconds+0x38>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <NRF24_DelayMicroSeconds+0x3c>)
 8001042:	fba2 2303 	umull	r2, r3, r2, r3
 8001046:	0c9a      	lsrs	r2, r3, #18
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001050:	bf00      	nop
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	1e5a      	subs	r2, r3, #1
 8001056:	60fa      	str	r2, [r7, #12]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1fa      	bne.n	8001052 <NRF24_DelayMicroSeconds+0x22>
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	20000014 	.word	0x20000014
 800106c:	165e9f81 	.word	0x165e9f81

08001070 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf_CSN_PORT, nrf_CSN_PIN, GPIO_PIN_SET);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <NRF24_csn+0x1c>
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <NRF24_csn+0x30>)
 8001086:	f003 fc93 	bl	80049b0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf_CSN_PORT, nrf_CSN_PIN, GPIO_PIN_RESET);
}
 800108a:	e005      	b.n	8001098 <NRF24_csn+0x28>
	else HAL_GPIO_WritePin(nrf_CSN_PORT, nrf_CSN_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <NRF24_csn+0x30>)
 8001094:	f003 fc8c 	bl	80049b0 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40010800 	.word	0x40010800

080010a4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf_CE_PORT, nrf_CE_PIN, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <NRF24_ce+0x1c>
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b8:	4806      	ldr	r0, [pc, #24]	; (80010d4 <NRF24_ce+0x30>)
 80010ba:	f003 fc79 	bl	80049b0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf_CE_PORT, nrf_CE_PIN, GPIO_PIN_RESET);
}
 80010be:	e005      	b.n	80010cc <NRF24_ce+0x28>
	else HAL_GPIO_WritePin(nrf_CE_PORT, nrf_CE_PIN, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <NRF24_ce+0x30>)
 80010c8:	f003 fc72 	bl	80049b0 <HAL_GPIO_WritePin>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40010c00 	.word	0x40010c00

080010d8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ffc4 	bl	8001070 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010f2:	f107 010c 	add.w	r1, r7, #12
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	2201      	movs	r2, #1
 80010fa:	480a      	ldr	r0, [pc, #40]	; (8001124 <NRF24_read_register+0x4c>)
 80010fc:	f004 f9de 	bl	80054bc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	1c59      	adds	r1, r3, #1
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	2201      	movs	r2, #1
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <NRF24_read_register+0x4c>)
 800110c:	f004 fb12 	bl	8005734 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff ffab 	bl	8001070 <NRF24_csn>
	return retData;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000228 	.word	0x20000228

08001128 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001138:	2000      	movs	r0, #0
 800113a:	f7ff ff99 	bl	8001070 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	b2db      	uxtb	r3, r3
 8001146:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	2364      	movs	r3, #100	; 0x64
 800114e:	2201      	movs	r2, #1
 8001150:	4808      	ldr	r0, [pc, #32]	; (8001174 <NRF24_read_registerN+0x4c>)
 8001152:	f004 f9b3 	bl	80054bc <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	b29a      	uxth	r2, r3
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <NRF24_read_registerN+0x4c>)
 8001160:	f004 fae8 	bl	8005734 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff ff83 	bl	8001070 <NRF24_csn>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000228 	.word	0x20000228

08001178 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff ff71 	bl	8001070 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f043 0320 	orr.w	r3, r3, #32
 8001194:	b2db      	uxtb	r3, r3
 8001196:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800119c:	f107 010c 	add.w	r1, r7, #12
 80011a0:	2364      	movs	r3, #100	; 0x64
 80011a2:	2202      	movs	r2, #2
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <NRF24_write_register+0x40>)
 80011a6:	f004 f989 	bl	80054bc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff ff60 	bl	8001070 <NRF24_csn>
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	20000228 	.word	0x20000228

080011bc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff4f 	bl	8001070 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f043 0320 	orr.w	r3, r3, #32
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011dc:	f107 010c 	add.w	r1, r7, #12
 80011e0:	2364      	movs	r3, #100	; 0x64
 80011e2:	2201      	movs	r2, #1
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <NRF24_write_registerN+0x4c>)
 80011e6:	f004 f969 	bl	80054bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	2364      	movs	r3, #100	; 0x64
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <NRF24_write_registerN+0x4c>)
 80011f4:	f004 f962 	bl	80054bc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff ff39 	bl	8001070 <NRF24_csn>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000228 	.word	0x20000228

0800120c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff ff29 	bl	8001070 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800121e:	23a0      	movs	r3, #160	; 0xa0
 8001220:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001222:	f107 010f 	add.w	r1, r7, #15
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	2201      	movs	r2, #1
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <NRF24_write_payload+0x40>)
 800122c:	f004 f946 	bl	80054bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	b29a      	uxth	r2, r3
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <NRF24_write_payload+0x40>)
 800123a:	f004 f93f 	bl	80054bc <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff ff16 	bl	8001070 <NRF24_csn>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000228 	.word	0x20000228

08001250 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800125c:	f000 fa4e 	bl	80016fc <NRF24_getPayloadSize>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	4293      	cmp	r3, r2
 8001268:	d303      	bcc.n	8001272 <NRF24_read_payload+0x22>
 800126a:	f000 fa47 	bl	80016fc <NRF24_getPayloadSize>
 800126e:	4603      	mov	r3, r0
 8001270:	e000      	b.n	8001274 <NRF24_read_payload+0x24>
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fefa 	bl	8001070 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800127c:	2361      	movs	r3, #97	; 0x61
 800127e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001280:	f107 010e 	add.w	r1, r7, #14
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	2201      	movs	r2, #1
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <NRF24_read_payload+0x5c>)
 800128a:	f004 f917 	bl	80054bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	b29a      	uxth	r2, r3
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <NRF24_read_payload+0x5c>)
 8001298:	f004 fa4c 	bl	8005734 <HAL_SPI_Receive>
	NRF24_csn(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fee7 	bl	8001070 <NRF24_csn>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000228 	.word	0x20000228

080012b0 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80012b4:	21ff      	movs	r1, #255	; 0xff
 80012b6:	20e1      	movs	r0, #225	; 0xe1
 80012b8:	f7ff ff5e 	bl	8001178 <NRF24_write_register>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80012c4:	21ff      	movs	r1, #255	; 0xff
 80012c6:	20e2      	movs	r0, #226	; 0xe2
 80012c8:	f7ff ff56 	bl	8001178 <NRF24_write_register>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80012d6:	2007      	movs	r0, #7
 80012d8:	f7ff fefe 	bl	80010d8 <NRF24_read_register>
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80012e0:	79fb      	ldrb	r3, [r7, #7]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80012ec:	b082      	sub	sp, #8
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
 80012fc:	4613      	mov	r3, r2
 80012fe:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001300:	4b66      	ldr	r3, [pc, #408]	; (800149c <NRF24_begin+0x1b0>)
 8001302:	4618      	mov	r0, r3
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	2258      	movs	r2, #88	; 0x58
 800130a:	4619      	mov	r1, r3
 800130c:	f005 fef8 	bl	8007100 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001310:	4a63      	ldr	r2, [pc, #396]	; (80014a0 <NRF24_begin+0x1b4>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001316:	4a63      	ldr	r2, [pc, #396]	; (80014a4 <NRF24_begin+0x1b8>)
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 800131c:	4a62      	ldr	r2, [pc, #392]	; (80014a8 <NRF24_begin+0x1bc>)
 800131e:	883b      	ldrh	r3, [r7, #0]
 8001320:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fea4 	bl	8001070 <NRF24_csn>
	NRF24_ce(0);
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff febb 	bl	80010a4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800132e:	2005      	movs	r0, #5
 8001330:	f002 fa68 	bl	8003804 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001334:	2108      	movs	r1, #8
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff ff1e 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 800133c:	213f      	movs	r1, #63	; 0x3f
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff ff1a 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001344:	2103      	movs	r1, #3
 8001346:	2002      	movs	r0, #2
 8001348:	f7ff ff16 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 800134c:	2103      	movs	r1, #3
 800134e:	2003      	movs	r0, #3
 8001350:	f7ff ff12 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001354:	2103      	movs	r1, #3
 8001356:	2004      	movs	r0, #4
 8001358:	f7ff ff0e 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 800135c:	2102      	movs	r1, #2
 800135e:	2005      	movs	r0, #5
 8001360:	f7ff ff0a 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001364:	210f      	movs	r1, #15
 8001366:	2006      	movs	r0, #6
 8001368:	f7ff ff06 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 800136c:	210e      	movs	r1, #14
 800136e:	2007      	movs	r0, #7
 8001370:	f7ff ff02 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001374:	2100      	movs	r1, #0
 8001376:	2008      	movs	r0, #8
 8001378:	f7ff fefe 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 800137c:	2100      	movs	r1, #0
 800137e:	2009      	movs	r0, #9
 8001380:	f7ff fefa 	bl	8001178 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001384:	23e7      	movs	r3, #231	; 0xe7
 8001386:	733b      	strb	r3, [r7, #12]
 8001388:	23e7      	movs	r3, #231	; 0xe7
 800138a:	72fb      	strb	r3, [r7, #11]
 800138c:	23e7      	movs	r3, #231	; 0xe7
 800138e:	72bb      	strb	r3, [r7, #10]
 8001390:	23e7      	movs	r3, #231	; 0xe7
 8001392:	727b      	strb	r3, [r7, #9]
 8001394:	23e7      	movs	r3, #231	; 0xe7
 8001396:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	2205      	movs	r2, #5
 800139e:	4619      	mov	r1, r3
 80013a0:	200a      	movs	r0, #10
 80013a2:	f7ff ff0b 	bl	80011bc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80013a6:	23c2      	movs	r3, #194	; 0xc2
 80013a8:	733b      	strb	r3, [r7, #12]
 80013aa:	23c2      	movs	r3, #194	; 0xc2
 80013ac:	72fb      	strb	r3, [r7, #11]
 80013ae:	23c2      	movs	r3, #194	; 0xc2
 80013b0:	72bb      	strb	r3, [r7, #10]
 80013b2:	23c2      	movs	r3, #194	; 0xc2
 80013b4:	727b      	strb	r3, [r7, #9]
 80013b6:	23c2      	movs	r3, #194	; 0xc2
 80013b8:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2205      	movs	r2, #5
 80013c0:	4619      	mov	r1, r3
 80013c2:	200b      	movs	r0, #11
 80013c4:	f7ff fefa 	bl	80011bc <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80013c8:	21c3      	movs	r1, #195	; 0xc3
 80013ca:	200c      	movs	r0, #12
 80013cc:	f7ff fed4 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80013d0:	21c4      	movs	r1, #196	; 0xc4
 80013d2:	200d      	movs	r0, #13
 80013d4:	f7ff fed0 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80013d8:	21c5      	movs	r1, #197	; 0xc5
 80013da:	200e      	movs	r0, #14
 80013dc:	f7ff fecc 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80013e0:	21c6      	movs	r1, #198	; 0xc6
 80013e2:	200f      	movs	r0, #15
 80013e4:	f7ff fec8 	bl	8001178 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80013e8:	23e7      	movs	r3, #231	; 0xe7
 80013ea:	733b      	strb	r3, [r7, #12]
 80013ec:	23e7      	movs	r3, #231	; 0xe7
 80013ee:	72fb      	strb	r3, [r7, #11]
 80013f0:	23e7      	movs	r3, #231	; 0xe7
 80013f2:	72bb      	strb	r3, [r7, #10]
 80013f4:	23e7      	movs	r3, #231	; 0xe7
 80013f6:	727b      	strb	r3, [r7, #9]
 80013f8:	23e7      	movs	r3, #231	; 0xe7
 80013fa:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2205      	movs	r2, #5
 8001402:	4619      	mov	r1, r3
 8001404:	2010      	movs	r0, #16
 8001406:	f7ff fed9 	bl	80011bc <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800140a:	2100      	movs	r1, #0
 800140c:	2011      	movs	r0, #17
 800140e:	f7ff feb3 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001412:	2100      	movs	r1, #0
 8001414:	2012      	movs	r0, #18
 8001416:	f7ff feaf 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800141a:	2100      	movs	r1, #0
 800141c:	2013      	movs	r0, #19
 800141e:	f7ff feab 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001422:	2100      	movs	r1, #0
 8001424:	2014      	movs	r0, #20
 8001426:	f7ff fea7 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800142a:	2100      	movs	r1, #0
 800142c:	2015      	movs	r0, #21
 800142e:	f7ff fea3 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001432:	2100      	movs	r1, #0
 8001434:	2016      	movs	r0, #22
 8001436:	f7ff fe9f 	bl	8001178 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800143a:	f000 fb4f 	bl	8001adc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800143e:	2100      	movs	r1, #0
 8001440:	201c      	movs	r0, #28
 8001442:	f7ff fe99 	bl	8001178 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001446:	2100      	movs	r1, #0
 8001448:	201d      	movs	r0, #29
 800144a:	f7ff fe95 	bl	8001178 <NRF24_write_register>
	printRadioSettings();
 800144e:	f000 fb5f 	bl	8001b10 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001452:	210f      	movs	r1, #15
 8001454:	200f      	movs	r0, #15
 8001456:	f000 f90b 	bl	8001670 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800145a:	2003      	movs	r0, #3
 800145c:	f000 f9ed 	bl	800183a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001460:	2001      	movs	r0, #1
 8001462:	f000 fa23 	bl	80018ac <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001466:	2002      	movs	r0, #2
 8001468:	f000 fa66 	bl	8001938 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800146c:	f000 f9b8 	bl	80017e0 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001470:	2020      	movs	r0, #32
 8001472:	f000 f92d 	bl	80016d0 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8001476:	f000 fb28 	bl	8001aca <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800147a:	204c      	movs	r0, #76	; 0x4c
 800147c:	f000 f913 	bl	80016a6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001480:	f7ff ff16 	bl	80012b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001484:	f7ff ff1c 	bl	80012c0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001488:	f000 fa7e 	bl	8001988 <NRF24_powerDown>
	
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001496:	b002      	add	sp, #8
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000228 	.word	0x20000228
 80014a0:	20000220 	.word	0x20000220
 80014a4:	20000224 	.word	0x20000224
 80014a8:	20000226 	.word	0x20000226

080014ac <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fdf7 	bl	80010a4 <NRF24_ce>
	NRF24_flush_tx();
 80014b6:	f7ff fefb 	bl	80012b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014ba:	f7ff ff01 	bl	80012c0 <NRF24_flush_rx>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80014d0:	f000 fafb 	bl	8001aca <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	4619      	mov	r1, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fa94 	bl	8001a06 <NRF24_startWrite>
////	 && ( HAL_GetTick() - sent_at < timeout )
//
////	printConfigReg();
//	printStatusReg();
	uint32_t i;
	for(i = 0; i<360000; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	e003      	b.n	80014ec <NRF24_write+0x28>
	{
		asm("NOP");
 80014e4:	bf00      	nop
	for(i = 0; i<360000; i++)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a10      	ldr	r2, [pc, #64]	; (8001530 <NRF24_write+0x6c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d9f7      	bls.n	80014e4 <NRF24_write+0x20>
	}
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80014f4:	f107 0109 	add.w	r1, r7, #9
 80014f8:	f107 030a 	add.w	r3, r7, #10
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <NRF24_write+0x70>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fab0 	bl	8001a64 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001504:	7abb      	ldrb	r3, [r7, #10]
 8001506:	72fb      	strb	r3, [r7, #11]
	if ( ack_payload_available )
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <NRF24_write+0x70>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <NRF24_write+0x58>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001510:	f000 f8fe 	bl	8001710 <NRF24_getDynamicPayloadSize>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <NRF24_write+0x74>)
 800151a:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 800151c:	f000 f80e 	bl	800153c <NRF24_available>
	NRF24_flush_tx();
 8001520:	f7ff fec6 	bl	80012b0 <NRF24_flush_tx>
	return retStatus;
 8001524:	7afb      	ldrb	r3, [r7, #11]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00057e3f 	.word	0x00057e3f
 8001534:	20000218 	.word	0x20000218
 8001538:	20000219 	.word	0x20000219

0800153c <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001540:	2000      	movs	r0, #0
 8001542:	f000 fa30 	bl	80019a6 <NRF24_availablePipe>
 8001546:	4603      	mov	r3, r0
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}

0800154c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe77 	bl	8001250 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001562:	2017      	movs	r0, #23
 8001564:	f7ff fdb8 	bl	80010d8 <NRF24_read_register>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001570:	f7ff fea6 	bl	80012c0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001574:	f000 f8cc 	bl	8001710 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001596:	463b      	mov	r3, r7
 8001598:	2205      	movs	r2, #5
 800159a:	4619      	mov	r1, r3
 800159c:	200a      	movs	r0, #10
 800159e:	f7ff fe0d 	bl	80011bc <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80015a2:	463b      	mov	r3, r7
 80015a4:	2205      	movs	r2, #5
 80015a6:	4619      	mov	r1, r3
 80015a8:	2010      	movs	r0, #16
 80015aa:	f7ff fe07 	bl	80011bc <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80015ae:	2320      	movs	r3, #32
 80015b0:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <NRF24_openWritingPipe+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	bf28      	it	cs
 80015bc:	4613      	movcs	r3, r2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4619      	mov	r1, r3
 80015c2:	2011      	movs	r0, #17
 80015c4:	f7ff fdd8 	bl	8001178 <NRF24_write_register>
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000021a 	.word	0x2000021a

080015d4 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4601      	mov	r1, r0
 80015dc:	e9c7 2300 	strd	r2, r3, [r7]
 80015e0:	460b      	mov	r3, r1
 80015e2:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 80015ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015ee:	491c      	ldr	r1, [pc, #112]	; (8001660 <NRF24_openReadingPipe+0x8c>)
 80015f0:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d82d      	bhi.n	8001656 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d808      	bhi.n	8001612 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <NRF24_openReadingPipe+0x90>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	4639      	mov	r1, r7
 8001608:	2205      	movs	r2, #5
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fdd6 	bl	80011bc <NRF24_write_registerN>
 8001610:	e007      	b.n	8001622 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	4a13      	ldr	r2, [pc, #76]	; (8001664 <NRF24_openReadingPipe+0x90>)
 8001616:	5cd3      	ldrb	r3, [r2, r3]
 8001618:	4639      	mov	r1, r7
 800161a:	2201      	movs	r2, #1
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fdcd 	bl	80011bc <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <NRF24_openReadingPipe+0x94>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <NRF24_openReadingPipe+0x98>)
 800162a:	7812      	ldrb	r2, [r2, #0]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fda2 	bl	8001178 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001634:	2002      	movs	r0, #2
 8001636:	f7ff fd4f 	bl	80010d8 <NRF24_read_register>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2101      	movs	r1, #1
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	b25b      	sxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4619      	mov	r1, r3
 8001650:	2002      	movs	r0, #2
 8001652:	f7ff fd91 	bl	8001178 <NRF24_write_register>
	}
	
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000210 	.word	0x20000210
 8001664:	0800a3f0 	.word	0x0800a3f0
 8001668:	0800a3f8 	.word	0x0800a3f8
 800166c:	2000021a 	.word	0x2000021a

08001670 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	4613      	mov	r3, r2
 800167e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	b25a      	sxtb	r2, r3
 8001686:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b25b      	sxtb	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	2004      	movs	r0, #4
 800169a:	f7ff fd6d 	bl	8001178 <NRF24_write_register>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80016b0:	237f      	movs	r3, #127	; 0x7f
 80016b2:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	4293      	cmp	r3, r2
 80016ba:	bf28      	it	cs
 80016bc:	4613      	movcs	r3, r2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	2005      	movs	r0, #5
 80016c4:	f7ff fd58 	bl	8001178 <NRF24_write_register>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80016da:	2320      	movs	r3, #32
 80016dc:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	4293      	cmp	r3, r2
 80016e4:	bf28      	it	cs
 80016e6:	4613      	movcs	r3, r2
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <NRF24_setPayloadSize+0x28>)
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	2000021a 	.word	0x2000021a

080016fc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return payload_size;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <NRF24_getPayloadSize+0x10>)
 8001702:	781b      	ldrb	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	2000021a 	.word	0x2000021a

08001710 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001714:	2060      	movs	r0, #96	; 0x60
 8001716:	f7ff fcdf 	bl	80010d8 <NRF24_read_register>
 800171a:	4603      	mov	r3, r0
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}

08001720 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001724:	201d      	movs	r0, #29
 8001726:	f7ff fcd7 	bl	80010d8 <NRF24_read_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f043 0306 	orr.w	r3, r3, #6
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4619      	mov	r1, r3
 8001734:	201d      	movs	r0, #29
 8001736:	f7ff fd1f 	bl	8001178 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800173a:	201d      	movs	r0, #29
 800173c:	f7ff fccc 	bl	80010d8 <NRF24_read_register>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001746:	f000 f9c9 	bl	8001adc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800174a:	201d      	movs	r0, #29
 800174c:	f7ff fcc4 	bl	80010d8 <NRF24_read_register>
 8001750:	4603      	mov	r3, r0
 8001752:	f043 0306 	orr.w	r3, r3, #6
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	201d      	movs	r0, #29
 800175c:	f7ff fd0c 	bl	8001178 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001760:	201c      	movs	r0, #28
 8001762:	f7ff fcb9 	bl	80010d8 <NRF24_read_register>
 8001766:	4603      	mov	r3, r0
 8001768:	f043 0303 	orr.w	r3, r3, #3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4619      	mov	r1, r3
 8001770:	201c      	movs	r0, #28
 8001772:	f7ff fd01 	bl	8001178 <NRF24_write_register>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001780:	201d      	movs	r0, #29
 8001782:	f7ff fca9 	bl	80010d8 <NRF24_read_register>
 8001786:	4603      	mov	r3, r0
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4619      	mov	r1, r3
 8001790:	201d      	movs	r0, #29
 8001792:	f7ff fcf1 	bl	8001178 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001796:	201d      	movs	r0, #29
 8001798:	f7ff fc9e 	bl	80010d8 <NRF24_read_register>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10c      	bne.n	80017bc <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80017a2:	f000 f99b 	bl	8001adc <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80017a6:	201d      	movs	r0, #29
 80017a8:	f7ff fc96 	bl	80010d8 <NRF24_read_register>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f043 0304 	orr.w	r3, r3, #4
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	4619      	mov	r1, r3
 80017b6:	201d      	movs	r0, #29
 80017b8:	f7ff fcde 	bl	8001178 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80017bc:	201c      	movs	r0, #28
 80017be:	f7ff fc8b 	bl	80010d8 <NRF24_read_register>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4619      	mov	r1, r3
 80017cc:	201c      	movs	r0, #28
 80017ce:	f7ff fcd3 	bl	8001178 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80017d2:	4b02      	ldr	r3, [pc, #8]	; (80017dc <NRF24_enableDynamicPayloads+0x60>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	701a      	strb	r2, [r3, #0]
	
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000021b 	.word	0x2000021b

080017e0 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80017e4:	201d      	movs	r0, #29
 80017e6:	f7ff fc77 	bl	80010d8 <NRF24_read_register>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	201d      	movs	r0, #29
 80017f6:	f7ff fcbf 	bl	8001178 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80017fa:	2100      	movs	r1, #0
 80017fc:	201c      	movs	r0, #28
 80017fe:	f7ff fcbb 	bl	8001178 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001802:	4b02      	ldr	r3, [pc, #8]	; (800180c <NRF24_disableDynamicPayloads+0x2c>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000021b 	.word	0x2000021b

08001810 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001820:	213f      	movs	r1, #63	; 0x3f
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff fca8 	bl	8001178 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001828:	e003      	b.n	8001832 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800182a:	2100      	movs	r1, #0
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fca3 	bl	8001178 <NRF24_write_register>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b084      	sub	sp, #16
 800183e:	af00      	add	r7, sp, #0
 8001840:	4603      	mov	r3, r0
 8001842:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001844:	2006      	movs	r0, #6
 8001846:	f7ff fc47 	bl	80010d8 <NRF24_read_register>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
 8001850:	f023 0306 	bic.w	r3, r3, #6
 8001854:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d104      	bne.n	8001866 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	f043 0306 	orr.w	r3, r3, #6
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e019      	b.n	800189a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d104      	bne.n	8001876 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	f043 0304 	orr.w	r3, r3, #4
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	e011      	b.n	800189a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d104      	bne.n	8001886 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	f043 0302 	orr.w	r3, r3, #2
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e009      	b.n	800189a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	2b04      	cmp	r3, #4
 8001890:	d103      	bne.n	800189a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f043 0306 	orr.w	r3, r3, #6
 8001898:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	4619      	mov	r1, r3
 800189e:	2006      	movs	r0, #6
 80018a0:	f7ff fc6a 	bl	8001178 <NRF24_write_register>
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80018ba:	2006      	movs	r0, #6
 80018bc:	f7ff fc0c 	bl	80010d8 <NRF24_read_register>
 80018c0:	4603      	mov	r3, r0
 80018c2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <NRF24_setDataRate+0x88>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80018d0:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d107      	bne.n	80018e8 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <NRF24_setDataRate+0x88>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	73bb      	strb	r3, [r7, #14]
 80018e6:	e00d      	b.n	8001904 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <NRF24_setDataRate+0x88>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	73bb      	strb	r3, [r7, #14]
 80018fc:	e002      	b.n	8001904 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <NRF24_setDataRate+0x88>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	4619      	mov	r1, r3
 8001908:	2006      	movs	r0, #6
 800190a:	f7ff fc35 	bl	8001178 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800190e:	2006      	movs	r0, #6
 8001910:	f7ff fbe2 	bl	80010d8 <NRF24_read_register>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	4293      	cmp	r3, r2
 800191c:	d102      	bne.n	8001924 <NRF24_setDataRate+0x78>
  {
    result = true;
 800191e:	2301      	movs	r3, #1
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e002      	b.n	800192a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <NRF24_setDataRate+0x88>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000021c 	.word	0x2000021c

08001938 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fbc8 	bl	80010d8 <NRF24_read_register>
 8001948:	4603      	mov	r3, r0
 800194a:	f023 030c 	bic.w	r3, r3, #12
 800194e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00f      	beq.n	8001976 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d104      	bne.n	8001966 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e007      	b.n	8001976 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4619      	mov	r1, r3
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fbfc 	bl	8001178 <NRF24_write_register>
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800198c:	2000      	movs	r0, #0
 800198e:	f7ff fba3 	bl	80010d8 <NRF24_read_register>
 8001992:	4603      	mov	r3, r0
 8001994:	f023 0302 	bic.w	r3, r3, #2
 8001998:	b2db      	uxtb	r3, r3
 800199a:	4619      	mov	r1, r3
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fbeb 	bl	8001178 <NRF24_write_register>
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80019ae:	f7ff fc8f 	bl	80012d0 <NRF24_get_status>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	73bb      	strb	r3, [r7, #14]

  if (result)
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d017      	beq.n	80019fc <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80019e2:	2140      	movs	r1, #64	; 0x40
 80019e4:	2007      	movs	r0, #7
 80019e6:	f7ff fbc7 	bl	8001178 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80019f4:	2120      	movs	r1, #32
 80019f6:	2007      	movs	r0, #7
 80019f8:	f7ff fbbe 	bl	8001178 <NRF24_write_register>
    }
  }
  return result;
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fb46 	bl	80010a4 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff fb5d 	bl	80010d8 <NRF24_read_register>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fba2 	bl	8001178 <NRF24_write_register>
  NRF24_ce(1);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fb35 	bl	80010a4 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001a3a:	2096      	movs	r0, #150	; 0x96
 8001a3c:	f7ff faf8 	bl	8001030 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	4619      	mov	r1, r3
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fbe1 	bl	800120c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff fb2a 	bl	80010a4 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001a50:	200f      	movs	r0, #15
 8001a52:	f7ff faed 	bl	8001030 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fb24 	bl	80010a4 <NRF24_ce>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001a70:	f7ff fc2e 	bl	80012d0 <NRF24_get_status>
 8001a74:	4603      	mov	r3, r0
 8001a76:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001a7e:	2170      	movs	r1, #112	; 0x70
 8001a80:	2007      	movs	r0, #7
 8001a82:	f7ff fb79 	bl	8001178 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	f003 0310 	and.w	r3, r3, #16
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
 8001ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	bf14      	ite	ne
 8001ab8:	2301      	movne	r3, #1
 8001aba:	2300      	moveq	r3, #0
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	701a      	strb	r2, [r3, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001ace:	2170      	movs	r1, #112	; 0x70
 8001ad0:	2007      	movs	r0, #7
 8001ad2:	f7ff fb51 	bl	8001178 <NRF24_write_register>
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fac4 	bl	8001070 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001ae8:	2350      	movs	r3, #80	; 0x50
 8001aea:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001aec:	2373      	movs	r3, #115	; 0x73
 8001aee:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001af0:	1d39      	adds	r1, r7, #4
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	2202      	movs	r2, #2
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <NRF24_ACTIVATE_cmd+0x30>)
 8001af8:	f003 fce0 	bl	80054bc <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff fab7 	bl	8001070 <NRF24_csn>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000228 	.word	0x20000228

08001b10 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b0a1      	sub	sp, #132	; 0x84
 8001b14:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	49c3      	ldr	r1, [pc, #780]	; (8001e28 <printRadioSettings+0x318>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 ff65 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fb12 	bl	8000150 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f107 0108 	add.w	r1, r7, #8
 8001b34:	230a      	movs	r3, #10
 8001b36:	48bd      	ldr	r0, [pc, #756]	; (8001e2c <printRadioSettings+0x31c>)
 8001b38:	f004 fdef 	bl	800671a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff facb 	bl	80010d8 <NRF24_read_register>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001b48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001b54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <printRadioSettings+0x5e>
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	49b2      	ldr	r1, [pc, #712]	; (8001e30 <printRadioSettings+0x320>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f005 ff40 	bl	80079ec <siprintf>
 8001b6c:	e00c      	b.n	8001b88 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	49b0      	ldr	r1, [pc, #704]	; (8001e34 <printRadioSettings+0x324>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f005 ff39 	bl	80079ec <siprintf>
 8001b7a:	e005      	b.n	8001b88 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	49ad      	ldr	r1, [pc, #692]	; (8001e38 <printRadioSettings+0x328>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 ff32 	bl	80079ec <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fadf 	bl	8000150 <strlen>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f107 0108 	add.w	r1, r7, #8
 8001b9a:	230a      	movs	r3, #10
 8001b9c:	48a3      	ldr	r0, [pc, #652]	; (8001e2c <printRadioSettings+0x31c>)
 8001b9e:	f004 fdbc 	bl	800671a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7ff fa98 	bl	80010d8 <NRF24_read_register>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bb2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bfcc      	ite	gt
 8001bba:	2301      	movgt	r3, #1
 8001bbc:	2300      	movle	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bc6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bfcc      	ite	gt
 8001bce:	2301      	movgt	r3, #1
 8001bd0:	2300      	movle	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bda:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bfcc      	ite	gt
 8001be2:	2301      	movgt	r3, #1
 8001be4:	2300      	movle	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bee:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	bfcc      	ite	gt
 8001bf6:	2301      	movgt	r3, #1
 8001bf8:	2300      	movle	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c02:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bfcc      	ite	gt
 8001c0a:	2301      	movgt	r3, #1
 8001c0c:	2300      	movle	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c16:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bfcc      	ite	gt
 8001c1e:	2301      	movgt	r3, #1
 8001c20:	2300      	movle	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f107 0008 	add.w	r0, r7, #8
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	9402      	str	r4, [sp, #8]
 8001c2c:	9101      	str	r1, [sp, #4]
 8001c2e:	9200      	str	r2, [sp, #0]
 8001c30:	4633      	mov	r3, r6
 8001c32:	462a      	mov	r2, r5
 8001c34:	4981      	ldr	r1, [pc, #516]	; (8001e3c <printRadioSettings+0x32c>)
 8001c36:	f005 fed9 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fa86 	bl	8000150 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f107 0108 	add.w	r1, r7, #8
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	4877      	ldr	r0, [pc, #476]	; (8001e2c <printRadioSettings+0x31c>)
 8001c50:	f004 fd63 	bl	800671a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff fa3f 	bl	80010d8 <NRF24_read_register>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c64:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bfcc      	ite	gt
 8001c6c:	2301      	movgt	r3, #1
 8001c6e:	2300      	movle	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c78:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bfcc      	ite	gt
 8001c80:	2301      	movgt	r3, #1
 8001c82:	2300      	movle	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c8c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bfcc      	ite	gt
 8001c94:	2301      	movgt	r3, #1
 8001c96:	2300      	movle	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ca0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bfcc      	ite	gt
 8001ca8:	2301      	movgt	r3, #1
 8001caa:	2300      	movle	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001cb0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cb4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bfcc      	ite	gt
 8001cbc:	2301      	movgt	r3, #1
 8001cbe:	2300      	movle	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001cc4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bfcc      	ite	gt
 8001cd0:	2301      	movgt	r3, #1
 8001cd2:	2300      	movle	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f107 0008 	add.w	r0, r7, #8
 8001cda:	9303      	str	r3, [sp, #12]
 8001cdc:	9402      	str	r4, [sp, #8]
 8001cde:	9101      	str	r1, [sp, #4]
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	4633      	mov	r3, r6
 8001ce4:	462a      	mov	r2, r5
 8001ce6:	4956      	ldr	r1, [pc, #344]	; (8001e40 <printRadioSettings+0x330>)
 8001ce8:	f005 fe80 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cec:	f107 0308 	add.w	r3, r7, #8
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fa2d 	bl	8000150 <strlen>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	f107 0108 	add.w	r1, r7, #8
 8001cfe:	230a      	movs	r3, #10
 8001d00:	484a      	ldr	r0, [pc, #296]	; (8001e2c <printRadioSettings+0x31c>)
 8001d02:	f004 fd0a 	bl	800671a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001d06:	2003      	movs	r0, #3
 8001d08:	f7ff f9e6 	bl	80010d8 <NRF24_read_register>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001d16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001d20:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	4946      	ldr	r1, [pc, #280]	; (8001e44 <printRadioSettings+0x334>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f005 fe5e 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fa0b 	bl	8000150 <strlen>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f107 0108 	add.w	r1, r7, #8
 8001d42:	230a      	movs	r3, #10
 8001d44:	4839      	ldr	r0, [pc, #228]	; (8001e2c <printRadioSettings+0x31c>)
 8001d46:	f004 fce8 	bl	800671a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001d4a:	2005      	movs	r0, #5
 8001d4c:	f7ff f9c4 	bl	80010d8 <NRF24_read_register>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001d56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4939      	ldr	r1, [pc, #228]	; (8001e48 <printRadioSettings+0x338>)
 8001d64:	4618      	mov	r0, r3
 8001d66:	f005 fe41 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe f9ee 	bl	8000150 <strlen>
 8001d74:	4603      	mov	r3, r0
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	482b      	ldr	r0, [pc, #172]	; (8001e2c <printRadioSettings+0x31c>)
 8001d80:	f004 fccb 	bl	800671a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001d84:	2006      	movs	r0, #6
 8001d86:	f7ff f9a7 	bl	80010d8 <NRF24_read_register>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001d90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d006      	beq.n	8001daa <printRadioSettings+0x29a>
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	492a      	ldr	r1, [pc, #168]	; (8001e4c <printRadioSettings+0x33c>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f005 fe22 	bl	80079ec <siprintf>
 8001da8:	e005      	b.n	8001db6 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4928      	ldr	r1, [pc, #160]	; (8001e50 <printRadioSettings+0x340>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f005 fe1b 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe f9c8 	bl	8000150 <strlen>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	f107 0108 	add.w	r1, r7, #8
 8001dc8:	230a      	movs	r3, #10
 8001dca:	4818      	ldr	r0, [pc, #96]	; (8001e2c <printRadioSettings+0x31c>)
 8001dcc:	f004 fca5 	bl	800671a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001dd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dd4:	f003 0306 	and.w	r3, r3, #6
 8001dd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001ddc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001de6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <printRadioSettings+0x2ec>
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4918      	ldr	r1, [pc, #96]	; (8001e54 <printRadioSettings+0x344>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 fdf9 	bl	80079ec <siprintf>
 8001dfa:	e03b      	b.n	8001e74 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001dfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <printRadioSettings+0x302>
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	4913      	ldr	r1, [pc, #76]	; (8001e58 <printRadioSettings+0x348>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f005 fdee 	bl	80079ec <siprintf>
 8001e10:	e030      	b.n	8001e74 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001e12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d122      	bne.n	8001e60 <printRadioSettings+0x350>
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	490f      	ldr	r1, [pc, #60]	; (8001e5c <printRadioSettings+0x34c>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 fde3 	bl	80079ec <siprintf>
 8001e26:	e025      	b.n	8001e74 <printRadioSettings+0x364>
 8001e28:	08009e58 	.word	0x08009e58
 8001e2c:	20000280 	.word	0x20000280
 8001e30:	08009e8c 	.word	0x08009e8c
 8001e34:	08009ea8 	.word	0x08009ea8
 8001e38:	08009ec4 	.word	0x08009ec4
 8001e3c:	08009ed8 	.word	0x08009ed8
 8001e40:	08009f1c 	.word	0x08009f1c
 8001e44:	08009f68 	.word	0x08009f68
 8001e48:	08009f84 	.word	0x08009f84
 8001e4c:	08009f98 	.word	0x08009f98
 8001e50:	08009fb0 	.word	0x08009fb0
 8001e54:	08009fc8 	.word	0x08009fc8
 8001e58:	08009fdc 	.word	0x08009fdc
 8001e5c:	08009ff0 	.word	0x08009ff0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001e60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d105      	bne.n	8001e74 <printRadioSettings+0x364>
 8001e68:	f107 0308 	add.w	r3, r7, #8
 8001e6c:	49d7      	ldr	r1, [pc, #860]	; (80021cc <printRadioSettings+0x6bc>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 fdbc 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe f969 	bl	8000150 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f107 0108 	add.w	r1, r7, #8
 8001e86:	230a      	movs	r3, #10
 8001e88:	48d1      	ldr	r0, [pc, #836]	; (80021d0 <printRadioSettings+0x6c0>)
 8001e8a:	f004 fc46 	bl	800671a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2205      	movs	r2, #5
 8001e92:	4619      	mov	r1, r3
 8001e94:	200a      	movs	r0, #10
 8001e96:	f7ff f947 	bl	8001128 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001e9a:	793b      	ldrb	r3, [r7, #4]
 8001e9c:	461c      	mov	r4, r3
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	78bb      	ldrb	r3, [r7, #2]
 8001ea4:	787a      	ldrb	r2, [r7, #1]
 8001ea6:	7839      	ldrb	r1, [r7, #0]
 8001ea8:	f107 0008 	add.w	r0, r7, #8
 8001eac:	9102      	str	r1, [sp, #8]
 8001eae:	9201      	str	r2, [sp, #4]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	49c7      	ldr	r1, [pc, #796]	; (80021d4 <printRadioSettings+0x6c4>)
 8001eb8:	f005 fd98 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe f945 	bl	8000150 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f107 0108 	add.w	r1, r7, #8
 8001ece:	230a      	movs	r3, #10
 8001ed0:	48bf      	ldr	r0, [pc, #764]	; (80021d0 <printRadioSettings+0x6c0>)
 8001ed2:	f004 fc22 	bl	800671a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2205      	movs	r2, #5
 8001eda:	4619      	mov	r1, r3
 8001edc:	200b      	movs	r0, #11
 8001ede:	f7ff f923 	bl	8001128 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001ee2:	793b      	ldrb	r3, [r7, #4]
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	461d      	mov	r5, r3
 8001eea:	78bb      	ldrb	r3, [r7, #2]
 8001eec:	787a      	ldrb	r2, [r7, #1]
 8001eee:	7839      	ldrb	r1, [r7, #0]
 8001ef0:	f107 0008 	add.w	r0, r7, #8
 8001ef4:	9102      	str	r1, [sp, #8]
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	462b      	mov	r3, r5
 8001efc:	4622      	mov	r2, r4
 8001efe:	49b6      	ldr	r1, [pc, #728]	; (80021d8 <printRadioSettings+0x6c8>)
 8001f00:	f005 fd74 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe f921 	bl	8000150 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f107 0108 	add.w	r1, r7, #8
 8001f16:	230a      	movs	r3, #10
 8001f18:	48ad      	ldr	r0, [pc, #692]	; (80021d0 <printRadioSettings+0x6c0>)
 8001f1a:	f004 fbfe 	bl	800671a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	200c      	movs	r0, #12
 8001f26:	f7ff f8ff 	bl	8001128 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f2a:	783b      	ldrb	r3, [r7, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	49aa      	ldr	r1, [pc, #680]	; (80021dc <printRadioSettings+0x6cc>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f005 fd59 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f906 	bl	8000150 <strlen>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	f107 0108 	add.w	r1, r7, #8
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	48a0      	ldr	r0, [pc, #640]	; (80021d0 <printRadioSettings+0x6c0>)
 8001f50:	f004 fbe3 	bl	800671a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001f54:	463b      	mov	r3, r7
 8001f56:	2201      	movs	r2, #1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	200d      	movs	r0, #13
 8001f5c:	f7ff f8e4 	bl	8001128 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f60:	783b      	ldrb	r3, [r7, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	499d      	ldr	r1, [pc, #628]	; (80021e0 <printRadioSettings+0x6d0>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 fd3e 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe f8eb 	bl	8000150 <strlen>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f107 0108 	add.w	r1, r7, #8
 8001f82:	230a      	movs	r3, #10
 8001f84:	4892      	ldr	r0, [pc, #584]	; (80021d0 <printRadioSettings+0x6c0>)
 8001f86:	f004 fbc8 	bl	800671a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4619      	mov	r1, r3
 8001f90:	200e      	movs	r0, #14
 8001f92:	f7ff f8c9 	bl	8001128 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f96:	783b      	ldrb	r3, [r7, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	4991      	ldr	r1, [pc, #580]	; (80021e4 <printRadioSettings+0x6d4>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f005 fd23 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f8d0 	bl	8000150 <strlen>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f107 0108 	add.w	r1, r7, #8
 8001fb8:	230a      	movs	r3, #10
 8001fba:	4885      	ldr	r0, [pc, #532]	; (80021d0 <printRadioSettings+0x6c0>)
 8001fbc:	f004 fbad 	bl	800671a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f7ff f8ae 	bl	8001128 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001fcc:	783b      	ldrb	r3, [r7, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	4984      	ldr	r1, [pc, #528]	; (80021e8 <printRadioSettings+0x6d8>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fd08 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fdc:	f107 0308 	add.w	r3, r7, #8
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe f8b5 	bl	8000150 <strlen>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	f107 0108 	add.w	r1, r7, #8
 8001fee:	230a      	movs	r3, #10
 8001ff0:	4877      	ldr	r0, [pc, #476]	; (80021d0 <printRadioSettings+0x6c0>)
 8001ff2:	f004 fb92 	bl	800671a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f7ff f893 	bl	8001128 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002002:	793b      	ldrb	r3, [r7, #4]
 8002004:	461c      	mov	r4, r3
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	461d      	mov	r5, r3
 800200a:	78bb      	ldrb	r3, [r7, #2]
 800200c:	787a      	ldrb	r2, [r7, #1]
 800200e:	7839      	ldrb	r1, [r7, #0]
 8002010:	f107 0008 	add.w	r0, r7, #8
 8002014:	9102      	str	r1, [sp, #8]
 8002016:	9201      	str	r2, [sp, #4]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	462b      	mov	r3, r5
 800201c:	4622      	mov	r2, r4
 800201e:	4973      	ldr	r1, [pc, #460]	; (80021ec <printRadioSettings+0x6dc>)
 8002020:	f005 fce4 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f891 	bl	8000150 <strlen>
 800202e:	4603      	mov	r3, r0
 8002030:	b29a      	uxth	r2, r3
 8002032:	f107 0108 	add.w	r1, r7, #8
 8002036:	230a      	movs	r3, #10
 8002038:	4865      	ldr	r0, [pc, #404]	; (80021d0 <printRadioSettings+0x6c0>)
 800203a:	f004 fb6e 	bl	800671a <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800203e:	2011      	movs	r0, #17
 8002040:	f7ff f84a 	bl	80010d8 <NRF24_read_register>
 8002044:	4603      	mov	r3, r0
 8002046:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800204a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800204e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	4966      	ldr	r1, [pc, #408]	; (80021f0 <printRadioSettings+0x6e0>)
 8002058:	4618      	mov	r0, r3
 800205a:	f005 fcc7 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f874 	bl	8000150 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	b29a      	uxth	r2, r3
 800206c:	f107 0108 	add.w	r1, r7, #8
 8002070:	230a      	movs	r3, #10
 8002072:	4857      	ldr	r0, [pc, #348]	; (80021d0 <printRadioSettings+0x6c0>)
 8002074:	f004 fb51 	bl	800671a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8002078:	2012      	movs	r0, #18
 800207a:	f7ff f82d 	bl	80010d8 <NRF24_read_register>
 800207e:	4603      	mov	r3, r0
 8002080:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002084:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800208c:	f107 0308 	add.w	r3, r7, #8
 8002090:	4958      	ldr	r1, [pc, #352]	; (80021f4 <printRadioSettings+0x6e4>)
 8002092:	4618      	mov	r0, r3
 8002094:	f005 fcaa 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe f857 	bl	8000150 <strlen>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	f107 0108 	add.w	r1, r7, #8
 80020aa:	230a      	movs	r3, #10
 80020ac:	4848      	ldr	r0, [pc, #288]	; (80021d0 <printRadioSettings+0x6c0>)
 80020ae:	f004 fb34 	bl	800671a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80020b2:	2013      	movs	r0, #19
 80020b4:	f7ff f810 	bl	80010d8 <NRF24_read_register>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80020be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	494b      	ldr	r1, [pc, #300]	; (80021f8 <printRadioSettings+0x6e8>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f005 fc8d 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f83a 	bl	8000150 <strlen>
 80020dc:	4603      	mov	r3, r0
 80020de:	b29a      	uxth	r2, r3
 80020e0:	f107 0108 	add.w	r1, r7, #8
 80020e4:	230a      	movs	r3, #10
 80020e6:	483a      	ldr	r0, [pc, #232]	; (80021d0 <printRadioSettings+0x6c0>)
 80020e8:	f004 fb17 	bl	800671a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80020ec:	2014      	movs	r0, #20
 80020ee:	f7fe fff3 	bl	80010d8 <NRF24_read_register>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80020f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	493d      	ldr	r1, [pc, #244]	; (80021fc <printRadioSettings+0x6ec>)
 8002106:	4618      	mov	r0, r3
 8002108:	f005 fc70 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f81d 	bl	8000150 <strlen>
 8002116:	4603      	mov	r3, r0
 8002118:	b29a      	uxth	r2, r3
 800211a:	f107 0108 	add.w	r1, r7, #8
 800211e:	230a      	movs	r3, #10
 8002120:	482b      	ldr	r0, [pc, #172]	; (80021d0 <printRadioSettings+0x6c0>)
 8002122:	f004 fafa 	bl	800671a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8002126:	2015      	movs	r0, #21
 8002128:	f7fe ffd6 	bl	80010d8 <NRF24_read_register>
 800212c:	4603      	mov	r3, r0
 800212e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002132:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800213a:	f107 0308 	add.w	r3, r7, #8
 800213e:	4930      	ldr	r1, [pc, #192]	; (8002200 <printRadioSettings+0x6f0>)
 8002140:	4618      	mov	r0, r3
 8002142:	f005 fc53 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f800 	bl	8000150 <strlen>
 8002150:	4603      	mov	r3, r0
 8002152:	b29a      	uxth	r2, r3
 8002154:	f107 0108 	add.w	r1, r7, #8
 8002158:	230a      	movs	r3, #10
 800215a:	481d      	ldr	r0, [pc, #116]	; (80021d0 <printRadioSettings+0x6c0>)
 800215c:	f004 fadd 	bl	800671a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8002160:	2016      	movs	r0, #22
 8002162:	f7fe ffb9 	bl	80010d8 <NRF24_read_register>
 8002166:	4603      	mov	r3, r0
 8002168:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800216c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002174:	f107 0308 	add.w	r3, r7, #8
 8002178:	4922      	ldr	r1, [pc, #136]	; (8002204 <printRadioSettings+0x6f4>)
 800217a:	4618      	mov	r0, r3
 800217c:	f005 fc36 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	4618      	mov	r0, r3
 8002186:	f7fd ffe3 	bl	8000150 <strlen>
 800218a:	4603      	mov	r3, r0
 800218c:	b29a      	uxth	r2, r3
 800218e:	f107 0108 	add.w	r1, r7, #8
 8002192:	230a      	movs	r3, #10
 8002194:	480e      	ldr	r0, [pc, #56]	; (80021d0 <printRadioSettings+0x6c0>)
 8002196:	f004 fac0 	bl	800671a <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800219a:	201c      	movs	r0, #28
 800219c:	f7fe ff9c 	bl	80010d8 <NRF24_read_register>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021aa:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bfcc      	ite	gt
 80021b2:	2301      	movgt	r3, #1
 80021b4:	2300      	movle	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021be:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bfcc      	ite	gt
 80021c6:	2301      	movgt	r3, #1
 80021c8:	2300      	movle	r3, #0
 80021ca:	e01d      	b.n	8002208 <printRadioSettings+0x6f8>
 80021cc:	0800a004 	.word	0x0800a004
 80021d0:	20000280 	.word	0x20000280
 80021d4:	0800a018 	.word	0x0800a018
 80021d8:	0800a048 	.word	0x0800a048
 80021dc:	0800a078 	.word	0x0800a078
 80021e0:	0800a0a0 	.word	0x0800a0a0
 80021e4:	0800a0c8 	.word	0x0800a0c8
 80021e8:	0800a0f0 	.word	0x0800a0f0
 80021ec:	0800a118 	.word	0x0800a118
 80021f0:	0800a144 	.word	0x0800a144
 80021f4:	0800a160 	.word	0x0800a160
 80021f8:	0800a17c 	.word	0x0800a17c
 80021fc:	0800a198 	.word	0x0800a198
 8002200:	0800a1b4 	.word	0x0800a1b4
 8002204:	0800a1d0 	.word	0x0800a1d0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800220c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002210:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002214:	2b00      	cmp	r3, #0
 8002216:	bfcc      	ite	gt
 8002218:	2301      	movgt	r3, #1
 800221a:	2300      	movle	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002220:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002224:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002228:	2b00      	cmp	r3, #0
 800222a:	bfcc      	ite	gt
 800222c:	2301      	movgt	r3, #1
 800222e:	2300      	movle	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002234:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002238:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800223c:	2b00      	cmp	r3, #0
 800223e:	bfcc      	ite	gt
 8002240:	2301      	movgt	r3, #1
 8002242:	2300      	movle	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800224c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002250:	2b00      	cmp	r3, #0
 8002252:	bfcc      	ite	gt
 8002254:	2301      	movgt	r3, #1
 8002256:	2300      	movle	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f107 0008 	add.w	r0, r7, #8
 800225e:	9303      	str	r3, [sp, #12]
 8002260:	9402      	str	r4, [sp, #8]
 8002262:	9101      	str	r1, [sp, #4]
 8002264:	9200      	str	r2, [sp, #0]
 8002266:	4633      	mov	r3, r6
 8002268:	462a      	mov	r2, r5
 800226a:	4936      	ldr	r1, [pc, #216]	; (8002344 <printRadioSettings+0x834>)
 800226c:	f005 fbbe 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ff6b 	bl	8000150 <strlen>
 800227a:	4603      	mov	r3, r0
 800227c:	b29a      	uxth	r2, r3
 800227e:	f107 0108 	add.w	r1, r7, #8
 8002282:	230a      	movs	r3, #10
 8002284:	4830      	ldr	r0, [pc, #192]	; (8002348 <printRadioSettings+0x838>)
 8002286:	f004 fa48 	bl	800671a <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800228a:	201d      	movs	r0, #29
 800228c:	f7fe ff24 	bl	80010d8 <NRF24_read_register>
 8002290:	4603      	mov	r3, r0
 8002292:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002296:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <printRadioSettings+0x7a0>
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	4929      	ldr	r1, [pc, #164]	; (800234c <printRadioSettings+0x83c>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 fb9f 	bl	80079ec <siprintf>
 80022ae:	e005      	b.n	80022bc <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	4926      	ldr	r1, [pc, #152]	; (8002350 <printRadioSettings+0x840>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f005 fb98 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fd ff45 	bl	8000150 <strlen>
 80022c6:	4603      	mov	r3, r0
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	f107 0108 	add.w	r1, r7, #8
 80022ce:	230a      	movs	r3, #10
 80022d0:	481d      	ldr	r0, [pc, #116]	; (8002348 <printRadioSettings+0x838>)
 80022d2:	f004 fa22 	bl	800671a <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80022d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <printRadioSettings+0x7e0>
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	491b      	ldr	r1, [pc, #108]	; (8002354 <printRadioSettings+0x844>)
 80022e8:	4618      	mov	r0, r3
 80022ea:	f005 fb7f 	bl	80079ec <siprintf>
 80022ee:	e005      	b.n	80022fc <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	4918      	ldr	r1, [pc, #96]	; (8002358 <printRadioSettings+0x848>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f005 fb78 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	4618      	mov	r0, r3
 8002302:	f7fd ff25 	bl	8000150 <strlen>
 8002306:	4603      	mov	r3, r0
 8002308:	b29a      	uxth	r2, r3
 800230a:	f107 0108 	add.w	r1, r7, #8
 800230e:	230a      	movs	r3, #10
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <printRadioSettings+0x838>)
 8002312:	f004 fa02 	bl	800671a <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4910      	ldr	r1, [pc, #64]	; (800235c <printRadioSettings+0x84c>)
 800231c:	4618      	mov	r0, r3
 800231e:	f005 fb65 	bl	80079ec <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4618      	mov	r0, r3
 8002328:	f7fd ff12 	bl	8000150 <strlen>
 800232c:	4603      	mov	r3, r0
 800232e:	b29a      	uxth	r2, r3
 8002330:	f107 0108 	add.w	r1, r7, #8
 8002334:	230a      	movs	r3, #10
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <printRadioSettings+0x838>)
 8002338:	f004 f9ef 	bl	800671a <HAL_UART_Transmit>
}
 800233c:	bf00      	nop
 800233e:	3774      	adds	r7, #116	; 0x74
 8002340:	46bd      	mov	sp, r7
 8002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002344:	0800a1ec 	.word	0x0800a1ec
 8002348:	20000280 	.word	0x20000280
 800234c:	0800a238 	.word	0x0800a238
 8002350:	0800a250 	.word	0x0800a250
 8002354:	0800a268 	.word	0x0800a268
 8002358:	0800a284 	.word	0x0800a284
 800235c:	08009e58 	.word	0x08009e58

08002360 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002360:	b084      	sub	sp, #16
 8002362:	b4b0      	push	{r4, r5, r7}
 8002364:	af00      	add	r7, sp, #0
 8002366:	f107 040c 	add.w	r4, r7, #12
 800236a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <nrf24_DebugUART_Init+0x34>)
 8002370:	461d      	mov	r5, r3
 8002372:	f107 040c 	add.w	r4, r7, #12
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002382:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002386:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	bcb0      	pop	{r4, r5, r7}
 8002390:	b004      	add	sp, #16
 8002392:	4770      	bx	lr
 8002394:	20000280 	.word	0x20000280

08002398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	b097      	sub	sp, #92	; 0x5c
 800239c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239e:	f001 f9cf 	bl	8003740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a2:	f000 f883 	bl	80024ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a6:	f000 fab7 	bl	8002918 <MX_GPIO_Init>
  MX_DMA_Init();
 80023aa:	f000 fa8f 	bl	80028cc <MX_DMA_Init>
  MX_ADC1_Init();
 80023ae:	f000 f8d9 	bl	8002564 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80023b2:	f000 fa61 	bl	8002878 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80023b6:	f000 f975 	bl	80026a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80023ba:	f000 f9c3 	bl	8002744 <MX_TIM2_Init>
  MX_SPI2_Init();
 80023be:	f000 f93b 	bl	8002638 <MX_SPI2_Init>
  MX_TIM3_Init();
 80023c2:	f000 fa0b 	bl	80027dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	NRF24_begin(GPIOA, CSN_Pin, CE_Pin, hspi2);
 80023c6:	4c2e      	ldr	r4, [pc, #184]	; (8002480 <main+0xe8>)
 80023c8:	4668      	mov	r0, sp
 80023ca:	1d23      	adds	r3, r4, #4
 80023cc:	2254      	movs	r2, #84	; 0x54
 80023ce:	4619      	mov	r1, r3
 80023d0:	f004 fe96 	bl	8007100 <memcpy>
 80023d4:	6823      	ldr	r3, [r4, #0]
 80023d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023de:	4829      	ldr	r0, [pc, #164]	; (8002484 <main+0xec>)
 80023e0:	f7fe ff84 	bl	80012ec <NRF24_begin>
	nrf24_DebugUART_Init(huart1);
 80023e4:	4e28      	ldr	r6, [pc, #160]	; (8002488 <main+0xf0>)
 80023e6:	466d      	mov	r5, sp
 80023e8:	f106 0410 	add.w	r4, r6, #16
 80023ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80023f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80023fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002400:	f7ff ffae 	bl	8002360 <nrf24_DebugUART_Init>
	NRF24_stopListening();
 8002404:	f7ff f852 	bl	80014ac <NRF24_stopListening>
	NRF24_openReadingPipe(0, RxpipeAddrs);
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <main+0xf4>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff f8e0 	bl	80015d4 <NRF24_openReadingPipe>
	NRF24_openWritingPipe(RxpipeAddrs);
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <main+0xf4>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	4610      	mov	r0, r2
 800241c:	4619      	mov	r1, r3
 800241e:	f7ff f8b5 	bl	800158c <NRF24_openWritingPipe>
	NRF24_setAutoAck(true);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff f9f4 	bl	8001810 <NRF24_setAutoAck>
	NRF24_setChannel(11);
 8002428:	200b      	movs	r0, #11
 800242a:	f7ff f93c 	bl	80016a6 <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800242e:	2020      	movs	r0, #32
 8002430:	f7ff f94e 	bl	80016d0 <NRF24_setPayloadSize>
	NRF24_setPALevel(RF24_PA_m6dB);
 8002434:	2002      	movs	r0, #2
 8002436:	f7ff fa00 	bl	800183a <NRF24_setPALevel>
	NRF24_enableDynamicPayloads();
 800243a:	f7ff f99f 	bl	800177c <NRF24_enableDynamicPayloads>
	NRF24_enableAckPayload();
 800243e:	f7ff f96f 	bl	8001720 <NRF24_enableAckPayload>
//	printRadioSettings();



	//Adc setup
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ui16AdcVal, 4);
 8002442:	2204      	movs	r2, #4
 8002444:	4912      	ldr	r1, [pc, #72]	; (8002490 <main+0xf8>)
 8002446:	4813      	ldr	r0, [pc, #76]	; (8002494 <main+0xfc>)
 8002448:	f001 fad8 	bl	80039fc <HAL_ADC_Start_DMA>
	HAL_UART_Receive_DMA(&huart1, ui8UartBuff, 25);
 800244c:	2219      	movs	r2, #25
 800244e:	4912      	ldr	r1, [pc, #72]	; (8002498 <main+0x100>)
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <main+0xf0>)
 8002452:	f004 f9f5 	bl	8006840 <HAL_UART_Receive_DMA>
	Varires_Calib(&VrOffset, ui16AdcVal, 100);
 8002456:	2264      	movs	r2, #100	; 0x64
 8002458:	490d      	ldr	r1, [pc, #52]	; (8002490 <main+0xf8>)
 800245a:	4810      	ldr	r0, [pc, #64]	; (800249c <main+0x104>)
 800245c:	f000 fc98 	bl	8002d90 <Varires_Calib>

	HAL_Delay(5);
 8002460:	2005      	movs	r0, #5
 8002462:	f001 f9cf 	bl	8003804 <HAL_Delay>
	//Timer Initialise

	HAL_TIM_Base_Start_IT(&htim1);
 8002466:	480e      	ldr	r0, [pc, #56]	; (80024a0 <main+0x108>)
 8002468:	f003 fd60 	bl	8005f2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);			//Buzzer Control Timer
 800246c:	480d      	ldr	r0, [pc, #52]	; (80024a4 <main+0x10c>)
 800246e:	f003 fd5d 	bl	8005f2c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002472:	2201      	movs	r2, #1
 8002474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002478:	480b      	ldr	r0, [pc, #44]	; (80024a8 <main+0x110>)
 800247a:	f002 fa99 	bl	80049b0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800247e:	e7fe      	b.n	800247e <main+0xe6>
 8002480:	200002f8 	.word	0x200002f8
 8002484:	40010800 	.word	0x40010800
 8002488:	20000460 	.word	0x20000460
 800248c:	20000008 	.word	0x20000008
 8002490:	20000350 	.word	0x20000350
 8002494:	200003e8 	.word	0x200003e8
 8002498:	20000380 	.word	0x20000380
 800249c:	200004cc 	.word	0x200004cc
 80024a0:	2000051c 	.word	0x2000051c
 80024a4:	200003a0 	.word	0x200003a0
 80024a8:	40011000 	.word	0x40011000

080024ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b094      	sub	sp, #80	; 0x50
 80024b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b6:	2228      	movs	r2, #40	; 0x28
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 fe2e 	bl	800711c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024dc:	2301      	movs	r3, #1
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024ea:	2301      	movs	r3, #1
 80024ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ee:	2302      	movs	r3, #2
 80024f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fa86 	bl	8004a14 <HAL_RCC_OscConfig>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800250e:	f000 fdcb 	bl	80030a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002512:	230f      	movs	r3, #15
 8002514:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002516:	2302      	movs	r3, #2
 8002518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800251e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002522:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2102      	movs	r1, #2
 800252e:	4618      	mov	r0, r3
 8002530:	f002 fcf0 	bl	8004f14 <HAL_RCC_ClockConfig>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800253a:	f000 fdb5 	bl	80030a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800253e:	2302      	movs	r3, #2
 8002540:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002546:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fe7c 	bl	8005248 <HAL_RCCEx_PeriphCLKConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002556:	f000 fda7 	bl	80030a8 <Error_Handler>
  }
}
 800255a:	bf00      	nop
 800255c:	3750      	adds	r7, #80	; 0x50
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <MX_ADC1_Init+0xcc>)
 8002576:	4a2f      	ldr	r2, [pc, #188]	; (8002634 <MX_ADC1_Init+0xd0>)
 8002578:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <MX_ADC1_Init+0xcc>)
 800257c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002580:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <MX_ADC1_Init+0xcc>)
 8002584:	2201      	movs	r2, #1
 8002586:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <MX_ADC1_Init+0xcc>)
 800258a:	2200      	movs	r2, #0
 800258c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800258e:	4b28      	ldr	r3, [pc, #160]	; (8002630 <MX_ADC1_Init+0xcc>)
 8002590:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002594:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <MX_ADC1_Init+0xcc>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <MX_ADC1_Init+0xcc>)
 800259e:	2204      	movs	r2, #4
 80025a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025a2:	4823      	ldr	r0, [pc, #140]	; (8002630 <MX_ADC1_Init+0xcc>)
 80025a4:	f001 f952 	bl	800384c <HAL_ADC_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80025ae:	f000 fd7b 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025b6:	2301      	movs	r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80025ba:	2304      	movs	r3, #4
 80025bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	481b      	ldr	r0, [pc, #108]	; (8002630 <MX_ADC1_Init+0xcc>)
 80025c4:	f001 fb14 	bl	8003bf0 <HAL_ADC_ConfigChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80025ce:	f000 fd6b 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025d6:	2302      	movs	r3, #2
 80025d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4814      	ldr	r0, [pc, #80]	; (8002630 <MX_ADC1_Init+0xcc>)
 80025e0:	f001 fb06 	bl	8003bf0 <HAL_ADC_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80025ea:	f000 fd5d 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80025ee:	2302      	movs	r3, #2
 80025f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80025f2:	2303      	movs	r3, #3
 80025f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	4619      	mov	r1, r3
 80025fa:	480d      	ldr	r0, [pc, #52]	; (8002630 <MX_ADC1_Init+0xcc>)
 80025fc:	f001 faf8 	bl	8003bf0 <HAL_ADC_ConfigChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002606:	f000 fd4f 	bl	80030a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800260a:	2303      	movs	r3, #3
 800260c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800260e:	2304      	movs	r3, #4
 8002610:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	; (8002630 <MX_ADC1_Init+0xcc>)
 8002618:	f001 faea 	bl	8003bf0 <HAL_ADC_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002622:	f000 fd41 	bl	80030a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200003e8 	.word	0x200003e8
 8002634:	40012400 	.word	0x40012400

08002638 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800263c:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_SPI2_Init+0x64>)
 800263e:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <MX_SPI2_Init+0x68>)
 8002640:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <MX_SPI2_Init+0x64>)
 8002644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002648:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_SPI2_Init+0x64>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_SPI2_Init+0x64>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_SPI2_Init+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_SPI2_Init+0x64>)
 800265e:	2200      	movs	r2, #0
 8002660:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_SPI2_Init+0x64>)
 8002664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002668:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_SPI2_Init+0x64>)
 800266c:	2220      	movs	r2, #32
 800266e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MX_SPI2_Init+0x64>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_SPI2_Init+0x64>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <MX_SPI2_Init+0x64>)
 800267e:	2200      	movs	r2, #0
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_SPI2_Init+0x64>)
 8002684:	220a      	movs	r2, #10
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_SPI2_Init+0x64>)
 800268a:	f002 fe93 	bl	80053b4 <HAL_SPI_Init>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002694:	f000 fd08 	bl	80030a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200002f8 	.word	0x200002f8
 80026a0:	40003800 	.word	0x40003800

080026a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b8:	463b      	mov	r3, r7
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <MX_TIM1_Init+0x98>)
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <MX_TIM1_Init+0x9c>)
 80026c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <MX_TIM1_Init+0x98>)
 80026c8:	2247      	movs	r2, #71	; 0x47
 80026ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <MX_TIM1_Init+0x98>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <MX_TIM1_Init+0x98>)
 80026d4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80026d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <MX_TIM1_Init+0x98>)
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026e0:	4b16      	ldr	r3, [pc, #88]	; (800273c <MX_TIM1_Init+0x98>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <MX_TIM1_Init+0x98>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026ec:	4813      	ldr	r0, [pc, #76]	; (800273c <MX_TIM1_Init+0x98>)
 80026ee:	f003 fbcd 	bl	8005e8c <HAL_TIM_Base_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80026f8:	f000 fcd6 	bl	80030a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002702:	f107 0308 	add.w	r3, r7, #8
 8002706:	4619      	mov	r1, r3
 8002708:	480c      	ldr	r0, [pc, #48]	; (800273c <MX_TIM1_Init+0x98>)
 800270a:	f003 fd69 	bl	80061e0 <HAL_TIM_ConfigClockSource>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002714:	f000 fcc8 	bl	80030a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002718:	2300      	movs	r3, #0
 800271a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_TIM1_Init+0x98>)
 8002726:	f003 ff3b 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002730:	f000 fcba 	bl	80030a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	2000051c 	.word	0x2000051c
 8002740:	40012c00 	.word	0x40012c00

08002744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274a:	f107 0308 	add.w	r3, r7, #8
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002758:	463b      	mov	r3, r7
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <MX_TIM2_Init+0x94>)
 8002762:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002766:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <MX_TIM2_Init+0x94>)
 800276a:	2247      	movs	r2, #71	; 0x47
 800276c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <MX_TIM2_Init+0x94>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000-1;
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <MX_TIM2_Init+0x94>)
 8002776:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800277a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <MX_TIM2_Init+0x94>)
 800277e:	2200      	movs	r2, #0
 8002780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <MX_TIM2_Init+0x94>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002788:	4813      	ldr	r0, [pc, #76]	; (80027d8 <MX_TIM2_Init+0x94>)
 800278a:	f003 fb7f 	bl	8005e8c <HAL_TIM_Base_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002794:	f000 fc88 	bl	80030a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4619      	mov	r1, r3
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <MX_TIM2_Init+0x94>)
 80027a6:	f003 fd1b 	bl	80061e0 <HAL_TIM_ConfigClockSource>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027b0:	f000 fc7a 	bl	80030a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b4:	2300      	movs	r3, #0
 80027b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027bc:	463b      	mov	r3, r7
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_TIM2_Init+0x94>)
 80027c2:	f003 feed 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027cc:	f000 fc6c 	bl	80030a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000588 	.word	0x20000588

080027dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e2:	f107 0308 	add.w	r3, r7, #8
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f0:	463b      	mov	r3, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027f8:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <MX_TIM3_Init+0x94>)
 80027fa:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <MX_TIM3_Init+0x98>)
 80027fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 144-1;
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <MX_TIM3_Init+0x94>)
 8002800:	228f      	movs	r2, #143	; 0x8f
 8002802:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <MX_TIM3_Init+0x94>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <MX_TIM3_Init+0x94>)
 800280c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002810:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <MX_TIM3_Init+0x94>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <MX_TIM3_Init+0x94>)
 800281a:	2200      	movs	r2, #0
 800281c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800281e:	4814      	ldr	r0, [pc, #80]	; (8002870 <MX_TIM3_Init+0x94>)
 8002820:	f003 fb34 	bl	8005e8c <HAL_TIM_Base_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800282a:	f000 fc3d 	bl	80030a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002832:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	4619      	mov	r1, r3
 800283a:	480d      	ldr	r0, [pc, #52]	; (8002870 <MX_TIM3_Init+0x94>)
 800283c:	f003 fcd0 	bl	80061e0 <HAL_TIM_ConfigClockSource>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002846:	f000 fc2f 	bl	80030a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002852:	463b      	mov	r3, r7
 8002854:	4619      	mov	r1, r3
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <MX_TIM3_Init+0x94>)
 8002858:	f003 fea2 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002862:	f000 fc21 	bl	80030a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200003a0 	.word	0x200003a0
 8002874:	40000400 	.word	0x40000400

08002878 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <MX_USART1_UART_Init+0x50>)
 8002880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 8002884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 800289e:	220c      	movs	r2, #12
 80028a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_USART1_UART_Init+0x4c>)
 80028b0:	f003 fee6 	bl	8006680 <HAL_UART_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028ba:	f000 fbf5 	bl	80030a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000460 	.word	0x20000460
 80028c8:	40013800 	.word	0x40013800

080028cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_DMA_Init+0x48>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <MX_DMA_Init+0x48>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6153      	str	r3, [r2, #20]
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <MX_DMA_Init+0x48>)
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	200b      	movs	r0, #11
 80028f0:	f001 fc3f 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028f4:	200b      	movs	r0, #11
 80028f6:	f001 fc58 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	200f      	movs	r0, #15
 8002900:	f001 fc37 	bl	8004172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002904:	200f      	movs	r0, #15
 8002906:	f001 fc50 	bl	80041aa <HAL_NVIC_EnableIRQ>

}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000

08002918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292c:	4b39      	ldr	r3, [pc, #228]	; (8002a14 <MX_GPIO_Init+0xfc>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a38      	ldr	r2, [pc, #224]	; (8002a14 <MX_GPIO_Init+0xfc>)
 8002932:	f043 0310 	orr.w	r3, r3, #16
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <MX_GPIO_Init+0xfc>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <MX_GPIO_Init+0xfc>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <MX_GPIO_Init+0xfc>)
 800294a:	f043 0320 	orr.w	r3, r3, #32
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <MX_GPIO_Init+0xfc>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <MX_GPIO_Init+0xfc>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <MX_GPIO_Init+0xfc>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6193      	str	r3, [r2, #24]
 8002968:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <MX_GPIO_Init+0xfc>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <MX_GPIO_Init+0xfc>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <MX_GPIO_Init+0xfc>)
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	6193      	str	r3, [r2, #24]
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <MX_GPIO_Init+0xfc>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002992:	4821      	ldr	r0, [pc, #132]	; (8002a18 <MX_GPIO_Init+0x100>)
 8002994:	f002 f80c 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800299e:	481f      	ldr	r0, [pc, #124]	; (8002a1c <MX_GPIO_Init+0x104>)
 80029a0:	f002 f806 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029aa:	481d      	ldr	r0, [pc, #116]	; (8002a20 <MX_GPIO_Init+0x108>)
 80029ac:	f002 f800 	bl	80049b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin;
 80029b0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80029b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b6:	2301      	movs	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029be:	2302      	movs	r3, #2
 80029c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	4619      	mov	r1, r3
 80029c8:	4813      	ldr	r0, [pc, #76]	; (8002a18 <MX_GPIO_Init+0x100>)
 80029ca:	f001 fe6d 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 80029ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d4:	2301      	movs	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	2302      	movs	r3, #2
 80029de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80029e0:	f107 0310 	add.w	r3, r7, #16
 80029e4:	4619      	mov	r1, r3
 80029e6:	480d      	ldr	r0, [pc, #52]	; (8002a1c <MX_GPIO_Init+0x104>)
 80029e8:	f001 fe5e 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 80029ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2302      	movs	r3, #2
 80029fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	4619      	mov	r1, r3
 8002a04:	4806      	ldr	r0, [pc, #24]	; (8002a20 <MX_GPIO_Init+0x108>)
 8002a06:	f001 fe4f 	bl	80046a8 <HAL_GPIO_Init>

}
 8002a0a:	bf00      	nop
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40011000 	.word	0x40011000
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	40010800 	.word	0x40010800

08002a24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b08f      	sub	sp, #60	; 0x3c
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4bad      	ldr	r3, [pc, #692]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 80e9 	bne.w	8002c0c <HAL_TIM_PeriodElapsedCallback+0x1e8>
	{
		uint8_t ui8buf[34];
		static uint8_t i = 0;
		//Calculate Adc value
		 Calculate_PWM(ui16Pwm, ui16AdcVal, &VrOffset);
 8002a3a:	4aac      	ldr	r2, [pc, #688]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002a3c:	49ac      	ldr	r1, [pc, #688]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002a3e:	48ad      	ldr	r0, [pc, #692]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a40:	f000 fa0a 	bl	8002e58 <Calculate_PWM>

		//Change Motor State
		Motor_State_Set(&MotorState, ui16Pwm);
 8002a44:	49ab      	ldr	r1, [pc, #684]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a46:	48ac      	ldr	r0, [pc, #688]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002a48:	f000 faa4 	bl	8002f94 <Motor_State_Set>
		//Package information
		if(nrfState == NRF_CMD)
 8002a4c:	4bab      	ldr	r3, [pc, #684]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d128      	bne.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x82>
		{
		if(MotorState == MOTOR_START)
 8002a54:	4ba8      	ldr	r3, [pc, #672]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d112      	bne.n	8002a82 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			sprintf((char*)ui8Rbuffer, "CMDT%dR%dP%dY%d", ui16Pwm[3], ui16Pwm[1], ui16Pwm[0], ui16Pwm[2]);
 8002a5c:	4ba5      	ldr	r3, [pc, #660]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a5e:	88db      	ldrh	r3, [r3, #6]
 8002a60:	4619      	mov	r1, r3
 8002a62:	4ba4      	ldr	r3, [pc, #656]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a64:	885b      	ldrh	r3, [r3, #2]
 8002a66:	4618      	mov	r0, r3
 8002a68:	4ba2      	ldr	r3, [pc, #648]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4ba1      	ldr	r3, [pc, #644]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a70:	889b      	ldrh	r3, [r3, #4]
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	9200      	str	r2, [sp, #0]
 8002a76:	4603      	mov	r3, r0
 8002a78:	460a      	mov	r2, r1
 8002a7a:	49a1      	ldr	r1, [pc, #644]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002a7c:	48a1      	ldr	r0, [pc, #644]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002a7e:	f004 ffb5 	bl	80079ec <siprintf>
		}
		if(MotorState == MOTOR_STOP)
 8002a82:	4b9d      	ldr	r3, [pc, #628]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10d      	bne.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x82>
		{
			sprintf((char*)ui8Rbuffer, "CMDT%dR%dP%dY%d", 1000, 1500, 1500, 1500);
 8002a8a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a9e:	4998      	ldr	r1, [pc, #608]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002aa0:	4898      	ldr	r0, [pc, #608]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002aa2:	f004 ffa3 	bl	80079ec <siprintf>
		}
		}


		if(NRF24_write(ui8Rbuffer, 32))
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	4896      	ldr	r0, [pc, #600]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002aaa:	f7fe fd0b 	bl	80014c4 <NRF24_write>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8084 	beq.w	8002bbe <HAL_TIM_PeriodElapsedCallback+0x19a>
		{
			NRF24_read(ui8RAck, 32);
 8002ab6:	2120      	movs	r1, #32
 8002ab8:	4893      	ldr	r0, [pc, #588]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002aba:	f7fe fd47 	bl	800154c <NRF24_read>
			if(Compare_String(ui8RAck,(uint8_t*) "ACK", 3))
 8002abe:	2203      	movs	r2, #3
 8002ac0:	4992      	ldr	r1, [pc, #584]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002ac2:	4891      	ldr	r0, [pc, #580]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002ac4:	f000 f93e 	bl	8002d44 <Compare_String>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d05b      	beq.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x162>
			{
#ifndef __TUNE_MATLAB
				HAL_UART_Transmit(&huart1, ui8RAck, 32, 50);
#else
				if(PIDtune == true)
 8002ace:	4b90      	ldr	r3, [pc, #576]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d014      	beq.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0xdc>
				{
				memset(ui8buf, '\0', sizeof(ui8buf));
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	2222      	movs	r2, #34	; 0x22
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fb1c 	bl	800711c <memset>
				sprintf((char*)ui8buf, "%s\r\n", ui8RAck);
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	4a87      	ldr	r2, [pc, #540]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002aea:	498a      	ldr	r1, [pc, #552]	; (8002d14 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 ff7d 	bl	80079ec <siprintf>
				HAL_UART_Transmit(&huart1, ui8buf, 34, 50);
 8002af2:	f107 0108 	add.w	r1, r7, #8
 8002af6:	2332      	movs	r3, #50	; 0x32
 8002af8:	2222      	movs	r2, #34	; 0x22
 8002afa:	4887      	ldr	r0, [pc, #540]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002afc:	f003 fe0d 	bl	800671a <HAL_UART_Transmit>
				}

#endif
				if(ui8RAck[21] == 'B')
 8002b00:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b02:	7d5b      	ldrb	r3, [r3, #21]
 8002b04:	2b42      	cmp	r3, #66	; 0x42
 8002b06:	d13e      	bne.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x162>
				{
					float BatBuf;
					BatBuf = (ui8RAck[22] - 0x30)*10 + (ui8RAck[23] - 0x30) + (float)(ui8RAck[25] - 0x30)/10;
 8002b08:	4b7f      	ldr	r3, [pc, #508]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b0a:	7d9b      	ldrb	r3, [r3, #22]
 8002b0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b7b      	ldr	r3, [pc, #492]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b1c:	7ddb      	ldrb	r3, [r3, #23]
 8002b1e:	3b30      	subs	r3, #48	; 0x30
 8002b20:	4413      	add	r3, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe f86a 	bl	8000bfc <__aeabi_i2f>
 8002b28:	4604      	mov	r4, r0
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b2c:	7e5b      	ldrb	r3, [r3, #25]
 8002b2e:	3b30      	subs	r3, #48	; 0x30
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f863 	bl	8000bfc <__aeabi_i2f>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4978      	ldr	r1, [pc, #480]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe f966 	bl	8000e0c <__aeabi_fdiv>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7fd ffa5 	bl	8000a94 <__addsf3>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if((BatBuf >= 10.0) || (MotorState == MOTOR_STOP))
 8002b4e:	4973      	ldr	r1, [pc, #460]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b52:	f7fe fa59 	bl	8001008 <__aeabi_fcmpge>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d103      	bne.n	8002b64 <HAL_TIM_PeriodElapsedCallback+0x140>
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <HAL_TIM_PeriodElapsedCallback+0x146>
					{
						Buzzer = BUZZER_OFF;
 8002b64:	4b6e      	ldr	r3, [pc, #440]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
					}
					if((BatBuf < 10.0) && (MotorState == MOTOR_START))
 8002b6a:	496c      	ldr	r1, [pc, #432]	; (8002d1c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b6e:	f7fe fa37 	bl	8000fe0 <__aeabi_fcmplt>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x162>
 8002b78:	4b5f      	ldr	r3, [pc, #380]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_TIM_PeriodElapsedCallback+0x162>
					{
						Buzzer = BUZZER_FLASHBEEP;
 8002b80:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002b82:	2203      	movs	r2, #3
 8002b84:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if(nrfState == NRF_PID)
 8002b86:	4b5d      	ldr	r3, [pc, #372]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d110      	bne.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0x18c>
			{
				//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
					nrfState = NRF_CMD;
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
#ifdef __TUNE_MATLAB
					HAL_UART_Transmit(&huart1, (uint8_t*)"PIDOK\r\n", sizeof("PIDOK\r\n"), 10);
 8002b94:	230a      	movs	r3, #10
 8002b96:	2208      	movs	r2, #8
 8002b98:	4962      	ldr	r1, [pc, #392]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b9a:	485f      	ldr	r0, [pc, #380]	; (8002d18 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002b9c:	f003 fdbd 	bl	800671a <HAL_UART_Transmit>
					PIDtune = true;
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002baa:	485f      	ldr	r0, [pc, #380]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002bac:	f001 ff18 	bl	80049e0 <HAL_GPIO_TogglePin>
#endif
			}
			if(nrfState == NRF_CTL)
 8002bb0:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d102      	bne.n	8002bbe <HAL_TIM_PeriodElapsedCallback+0x19a>
			{
				nrfState = NRF_CMD;
 8002bb8:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
			}
		}
		i++;
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002bc8:	701a      	strb	r2, [r3, #0]
#ifdef __TUNE_MATLAB
		if(i > 20)
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b14      	cmp	r3, #20
 8002bd0:	d91c      	bls.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0x1e8>
		{

		if(Compare_String(ui8UartBuff, (uint8_t*)"PID", 3))
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	4956      	ldr	r1, [pc, #344]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002bd6:	4857      	ldr	r0, [pc, #348]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bd8:	f000 f8b4 	bl	8002d44 <Compare_String>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d011      	beq.n	8002c06 <HAL_TIM_PeriodElapsedCallback+0x1e2>
		{
			memset(ui8Rbuffer, '\0', sizeof(ui8Rbuffer));
 8002be2:	2220      	movs	r2, #32
 8002be4:	2100      	movs	r1, #0
 8002be6:	4847      	ldr	r0, [pc, #284]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002be8:	f004 fa98 	bl	800711c <memset>
			sprintf((char*)ui8Rbuffer,"%s", ui8UartBuff);
 8002bec:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bee:	4952      	ldr	r1, [pc, #328]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002bf0:	4844      	ldr	r0, [pc, #272]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002bf2:	f004 fefb 	bl	80079ec <siprintf>
			memset(ui8UartBuff, '\0', sizeof(ui8UartBuff));
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	484e      	ldr	r0, [pc, #312]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bfc:	f004 fa8e 	bl	800711c <memset>
			nrfState = NRF_PID;
 8002c00:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]


		}
		i = 0;
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	if(htim->Instance == htim3.Instance)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d15b      	bne.n	8002cd0 <HAL_TIM_PeriodElapsedCallback+0x2ac>
	{
		static uint8_t ui8long = 0;
		if(Buzzer == BUZZER_OFF)
 8002c18:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x210>
		{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c26:	4840      	ldr	r0, [pc, #256]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c28:	f001 fec2 	bl	80049b0 <HAL_GPIO_WritePin>
			ui8long = 0;
 8002c2c:	4b44      	ldr	r3, [pc, #272]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
			}

		}
	}

	}
 8002c32:	e054      	b.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x2ba>
			switch (Buzzer)
 8002c34:	4b3a      	ldr	r3, [pc, #232]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d027      	beq.n	8002c8c <HAL_TIM_PeriodElapsedCallback+0x268>
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	dc49      	bgt.n	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d002      	beq.n	8002c4a <HAL_TIM_PeriodElapsedCallback+0x226>
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d00a      	beq.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x23a>
					break;
 8002c48:	e044      	b.n	8002cd4 <HAL_TIM_PeriodElapsedCallback+0x2b0>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c50:	4835      	ldr	r0, [pc, #212]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c52:	f001 fead 	bl	80049b0 <HAL_GPIO_WritePin>
					Buzzer = BUZZER_OFF;
 8002c56:	4b32      	ldr	r3, [pc, #200]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
					break;
 8002c5c:	e03f      	b.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x2ba>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c64:	4830      	ldr	r0, [pc, #192]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c66:	f001 fea3 	bl	80049b0 <HAL_GPIO_WritePin>
					ui8long ++;
 8002c6a:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4b33      	ldr	r3, [pc, #204]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c74:	701a      	strb	r2, [r3, #0]
					if(ui8long == 5)
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d12c      	bne.n	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2b4>
						ui8long = 0;
 8002c7e:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
						Buzzer = BUZZER_OFF;
 8002c84:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
					break;
 8002c8a:	e025      	b.n	8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2b4>
					if(ui8long == 0)
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_TIM_PeriodElapsedCallback+0x27c>
						HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002c94:	2201      	movs	r2, #1
 8002c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c9a:	4823      	ldr	r0, [pc, #140]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c9c:	f001 fe88 	bl	80049b0 <HAL_GPIO_WritePin>
					if(ui8long == 2)
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d105      	bne.n	8002cb4 <HAL_TIM_PeriodElapsedCallback+0x290>
						HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cae:	481e      	ldr	r0, [pc, #120]	; (8002d28 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002cb0:	f001 fe7e 	bl	80049b0 <HAL_GPIO_WritePin>
					ui8long++;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002cbe:	701a      	strb	r2, [r3, #0]
					if(ui8long > 10)
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b0a      	cmp	r3, #10
 8002cc6:	d909      	bls.n	8002cdc <HAL_TIM_PeriodElapsedCallback+0x2b8>
						ui8long = 0;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
					break;
 8002cce:	e005      	b.n	8002cdc <HAL_TIM_PeriodElapsedCallback+0x2b8>
		}
 8002cd0:	bf00      	nop
 8002cd2:	e004      	b.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x2ba>
					break;
 8002cd4:	bf00      	nop
 8002cd6:	e002      	b.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x2ba>
					break;
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <HAL_TIM_PeriodElapsedCallback+0x2ba>
					break;
 8002cdc:	bf00      	nop
	}
 8002cde:	bf00      	nop
 8002ce0:	3734      	adds	r7, #52	; 0x34
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000051c 	.word	0x2000051c
 8002cec:	200004cc 	.word	0x200004cc
 8002cf0:	20000350 	.word	0x20000350
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	200002f4 	.word	0x200002f4
 8002cfc:	2000035c 	.word	0x2000035c
 8002d00:	0800a39c 	.word	0x0800a39c
 8002d04:	200002d4 	.word	0x200002d4
 8002d08:	20000564 	.word	0x20000564
 8002d0c:	0800a3ac 	.word	0x0800a3ac
 8002d10:	20000010 	.word	0x20000010
 8002d14:	0800a3b0 	.word	0x0800a3b0
 8002d18:	20000460 	.word	0x20000460
 8002d1c:	41200000 	.word	0x41200000
 8002d20:	200002c0 	.word	0x200002c0
 8002d24:	0800a3b8 	.word	0x0800a3b8
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	200002c1 	.word	0x200002c1
 8002d30:	0800a3c0 	.word	0x0800a3c0
 8002d34:	20000380 	.word	0x20000380
 8002d38:	0800a3c4 	.word	0x0800a3c4
 8002d3c:	200003a0 	.word	0x200003a0
 8002d40:	200002c2 	.word	0x200002c2

08002d44 <Compare_String>:
bool Compare_String (uint8_t* ui8String1, uint8_t* ui8String2, uint8_t ui8Size)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < ui8Size; i++)
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]
 8002d56:	e010      	b.n	8002d7a <Compare_String+0x36>
	{
		if(*ui8String1 != *ui8String2)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <Compare_String+0x24>
		{
			return false;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e00d      	b.n	8002d84 <Compare_String+0x40>
		}
		ui8String1++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
		ui8String2++;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < ui8Size; i++)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	3301      	adds	r3, #1
 8002d78:	75fb      	strb	r3, [r7, #23]
 8002d7a:	7dfa      	ldrb	r2, [r7, #23]
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d3ea      	bcc.n	8002d58 <Compare_String+0x14>
	}
	return true;
 8002d82:	2301      	movs	r3, #1
	}
 8002d84:	4618      	mov	r0, r3
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <Varires_Calib>:
{
	*flConstant = (float)((*ui8Data) - 0x30)*10 + (float)(*(ui8Data + 1) - 0x30) + (float)(*(ui8Data + 3) - 0x30)/10 + (float)(*(ui8Data + 4) - 0x30)/100;
	}

void Varires_Calib (VariRes_Value* vrOffset, uint16_t* AdcDMA, uint16_t ui16Times)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	uint32_t buffer[4];
	for(i = 0; i < 4; i++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002da2:	e00a      	b.n	8002dba <Varires_Calib+0x2a>
	{
		buffer[i] = 0x00;
 8002da4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002dac:	4413      	add	r3, r2
 8002dae:	2200      	movs	r2, #0
 8002db0:	f843 2c14 	str.w	r2, [r3, #-20]
	for(i = 0; i < 4; i++)
 8002db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002db6:	3301      	adds	r3, #1
 8002db8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d9f1      	bls.n	8002da4 <Varires_Calib+0x14>
	}
	for(i = 0; i < ui16Times; i++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002dc4:	e021      	b.n	8002e0a <Varires_Calib+0x7a>
	{
		buffer[0] += *AdcDMA;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	8812      	ldrh	r2, [r2, #0]
 8002dcc:	4413      	add	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
		buffer[1] += *(AdcDMA + 1);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	3202      	adds	r2, #2
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	4413      	add	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
		buffer[2] += *(AdcDMA + 2);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	3204      	adds	r2, #4
 8002de2:	8812      	ldrh	r2, [r2, #0]
 8002de4:	4413      	add	r3, r2
 8002de6:	61fb      	str	r3, [r7, #28]
		buffer[3] += *(AdcDMA + 3);
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	3206      	adds	r2, #6
 8002dee:	8812      	ldrh	r2, [r2, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	623b      	str	r3, [r7, #32]
		HAL_Delay(20);
 8002df4:	2014      	movs	r0, #20
 8002df6:	f000 fd05 	bl	8003804 <HAL_Delay>
		/* USER CODE BEGIN */
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002dfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dfe:	4815      	ldr	r0, [pc, #84]	; (8002e54 <Varires_Calib+0xc4>)
 8002e00:	f001 fdee 	bl	80049e0 <HAL_GPIO_TogglePin>
	for(i = 0; i < ui16Times; i++)
 8002e04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e06:	3301      	adds	r3, #1
 8002e08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d3d9      	bcc.n	8002dc6 <Varires_Calib+0x36>
		/* USER CODE End */
	}
	vrOffset->Adc1 = buffer[0]/ui16Times;
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	801a      	strh	r2, [r3, #0]
	vrOffset->Adc2 = buffer[1]/ui16Times;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	805a      	strh	r2, [r3, #2]
	vrOffset->Adc3 = buffer[2]/ui16Times;
 8002e2e:	69fa      	ldr	r2, [r7, #28]
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	809a      	strh	r2, [r3, #4]
	vrOffset->Adc4 = buffer[3]/ui16Times;
 8002e3c:	6a3a      	ldr	r2, [r7, #32]
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	80da      	strh	r2, [r3, #6]
	}
 8002e4a:	bf00      	nop
 8002e4c:	3728      	adds	r7, #40	; 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40011000 	.word	0x40011000

08002e58 <Calculate_PWM>:
void Calculate_PWM (uint16_t* ui16PWM,uint16_t* ui16Adc, VariRes_Value* VrOffsetValue)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
	uint8_t i;
	//Calculate Adc value
		*ui16PWM = (*ui16Adc - VrOffsetValue->Adc1 + 2048)*1000/4095 + 1000;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e78:	fb02 f303 	mul.w	r3, r2, r3
 8002e7c:	4a44      	ldr	r2, [pc, #272]	; (8002f90 <Calculate_PWM+0x138>)
 8002e7e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e82:	441a      	add	r2, r3
 8002e84:	12d2      	asrs	r2, r2, #11
 8002e86:	17db      	asrs	r3, r3, #31
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	801a      	strh	r2, [r3, #0]
		*(ui16PWM + 1)= (*(ui16Adc + 1) - VrOffsetValue->Adc2 + 2048)*1000/4095 + 1000;
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	3302      	adds	r3, #2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	885b      	ldrh	r3, [r3, #2]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	4a37      	ldr	r2, [pc, #220]	; (8002f90 <Calculate_PWM+0x138>)
 8002eb2:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb6:	441a      	add	r2, r3
 8002eb8:	12d2      	asrs	r2, r2, #11
 8002eba:	17db      	asrs	r3, r3, #31
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	801a      	strh	r2, [r3, #0]
		*(ui16PWM + 2)= (*(ui16Adc + 2) - VrOffsetValue->Adc3 + 2048)*1000/4095 + 1000;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	889b      	ldrh	r3, [r3, #4]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	4a2a      	ldr	r2, [pc, #168]	; (8002f90 <Calculate_PWM+0x138>)
 8002ee8:	fb82 1203 	smull	r1, r2, r2, r3
 8002eec:	441a      	add	r2, r3
 8002eee:	12d2      	asrs	r2, r2, #11
 8002ef0:	17db      	asrs	r3, r3, #31
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8002efe:	b292      	uxth	r2, r2
 8002f00:	801a      	strh	r2, [r3, #0]
		*(ui16PWM + 3)= (*(ui16Adc + 3) - VrOffsetValue->Adc4 + 0)*1000/4095 + 1000;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3306      	adds	r3, #6
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	88db      	ldrh	r3, [r3, #6]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <Calculate_PWM+0x138>)
 8002f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f1e:	441a      	add	r2, r3
 8002f20:	12d2      	asrs	r2, r2, #11
 8002f22:	17db      	asrs	r3, r3, #31
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3306      	adds	r3, #6
 8002f2c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8002f30:	b292      	uxth	r2, r2
 8002f32:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]
 8002f38:	e020      	b.n	8002f7c <Calculate_PWM+0x124>
	{
		if(*(ui16PWM + i) < 1000)
 8002f3a:	7dfb      	ldrb	r3, [r7, #23]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f48:	d206      	bcs.n	8002f58 <Calculate_PWM+0x100>
			*(ui16PWM + i) = 1000;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f56:	801a      	strh	r2, [r3, #0]
		if(*(ui16PWM + i) > 2000)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f66:	d906      	bls.n	8002f76 <Calculate_PWM+0x11e>
			*(ui16PWM + i) = 2000;
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002f74:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 4; i++)
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d9db      	bls.n	8002f3a <Calculate_PWM+0xe2>
	}
	}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	80080081 	.word	0x80080081

08002f94 <Motor_State_Set>:
void Motor_State_Set (Motor_State* motorState, uint16_t* ui16PWM)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
	static uint8_t i =0;
	if(*motorState == MOTOR_STOP)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d132      	bne.n	800300c <Motor_State_Set+0x78>
	{
		if((*(ui16PWM + 3) < 1020) && (*(ui16PWM + 2) < 1070) && (*(ui16PWM + 0) < 1080) && (*(ui16PWM + 1) > 1910) )
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	3306      	adds	r3, #6
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8002fb0:	d218      	bcs.n	8002fe4 <Motor_State_Set+0x50>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	f240 422d 	movw	r2, #1069	; 0x42d
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d811      	bhi.n	8002fe4 <Motor_State_Set+0x50>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8002fc8:	d20c      	bcs.n	8002fe4 <Motor_State_Set+0x50>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	f240 7276 	movw	r2, #1910	; 0x776
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d905      	bls.n	8002fe4 <Motor_State_Set+0x50>
		{
			i++;
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <Motor_State_Set+0xfc>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <Motor_State_Set+0xfc>)
 8002fe2:	701a      	strb	r2, [r3, #0]
		}
		if(i > 15)
 8002fe4:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <Motor_State_Set+0xfc>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d90f      	bls.n	800300c <Motor_State_Set+0x78>
		{
			i = 0;
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <Motor_State_Set+0xfc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
			*motorState = MOTOR_START;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
			sprintf((char*)ui8Rbuffer, "CTLSSTART");
 8002ff8:	4926      	ldr	r1, [pc, #152]	; (8003094 <Motor_State_Set+0x100>)
 8002ffa:	4827      	ldr	r0, [pc, #156]	; (8003098 <Motor_State_Set+0x104>)
 8002ffc:	f004 fcf6 	bl	80079ec <siprintf>
			nrfState = NRF_CTL;
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <Motor_State_Set+0x108>)
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
			Buzzer = BUZZER_LONGBEEP;
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <Motor_State_Set+0x10c>)
 8003008:	2202      	movs	r2, #2
 800300a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(*motorState == MOTOR_START)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d138      	bne.n	8003086 <Motor_State_Set+0xf2>
	{
		if(*(ui16PWM + 3) < 1020)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	3306      	adds	r3, #6
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800301e:	d232      	bcs.n	8003086 <Motor_State_Set+0xf2>
		{
		if((*(ui16PWM + 3) < 1020) && (*(ui16PWM + 2) > 1930) && (*(ui16PWM + 0) < 1080) && (*(ui16PWM + 1) < 1090) )
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3306      	adds	r3, #6
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 800302a:	d218      	bcs.n	800305e <Motor_State_Set+0xca>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	3304      	adds	r3, #4
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	f240 728a 	movw	r2, #1930	; 0x78a
 8003036:	4293      	cmp	r3, r2
 8003038:	d911      	bls.n	800305e <Motor_State_Set+0xca>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8003042:	d20c      	bcs.n	800305e <Motor_State_Set+0xca>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	3302      	adds	r3, #2
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	f240 4241 	movw	r2, #1089	; 0x441
 800304e:	4293      	cmp	r3, r2
 8003050:	d805      	bhi.n	800305e <Motor_State_Set+0xca>
		{
			i++;
 8003052:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <Motor_State_Set+0xfc>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <Motor_State_Set+0xfc>)
 800305c:	701a      	strb	r2, [r3, #0]
		}
		if(i > 15)
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <Motor_State_Set+0xfc>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b0f      	cmp	r3, #15
 8003064:	d90f      	bls.n	8003086 <Motor_State_Set+0xf2>
		{
			i = 0;
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <Motor_State_Set+0xfc>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
			*motorState = MOTOR_STOP;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
			Buzzer = BUZZER_LONGBEEP;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <Motor_State_Set+0x10c>)
 8003074:	2202      	movs	r2, #2
 8003076:	701a      	strb	r2, [r3, #0]
			sprintf((char*)ui8Rbuffer, "CTLSSTOP ");
 8003078:	490a      	ldr	r1, [pc, #40]	; (80030a4 <Motor_State_Set+0x110>)
 800307a:	4807      	ldr	r0, [pc, #28]	; (8003098 <Motor_State_Set+0x104>)
 800307c:	f004 fcb6 	bl	80079ec <siprintf>
			nrfState = NRF_CTL;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <Motor_State_Set+0x108>)
 8003082:	2202      	movs	r2, #2
 8003084:	701a      	strb	r2, [r3, #0]
		}
		}
	}


	}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200002c3 	.word	0x200002c3
 8003094:	0800a3c8 	.word	0x0800a3c8
 8003098:	200002d4 	.word	0x200002d4
 800309c:	2000035c 	.word	0x2000035c
 80030a0:	200002c0 	.word	0x200002c0
 80030a4:	0800a3d4 	.word	0x0800a3d4

080030a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030ac:	b672      	cpsid	i
}
 80030ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <Error_Handler+0x8>
	...

080030b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030ba:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_MspInit+0x5c>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_MspInit+0x5c>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6193      	str	r3, [r2, #24]
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_MspInit+0x5c>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_MspInit+0x5c>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <HAL_MspInit+0x5c>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	61d3      	str	r3, [r2, #28]
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_MspInit+0x5c>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_MspInit+0x60>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_MspInit+0x60>)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40021000 	.word	0x40021000
 8003114:	40010000 	.word	0x40010000

08003118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <HAL_ADC_MspInit+0xbc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d149      	bne.n	80031cc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_ADC_MspInit+0xc0>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a26      	ldr	r2, [pc, #152]	; (80031d8 <HAL_ADC_MspInit+0xc0>)
 800313e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <HAL_ADC_MspInit+0xc0>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_ADC_MspInit+0xc0>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4a20      	ldr	r2, [pc, #128]	; (80031d8 <HAL_ADC_MspInit+0xc0>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6193      	str	r3, [r2, #24]
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_ADC_MspInit+0xc0>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003168:	230f      	movs	r3, #15
 800316a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800316c:	2303      	movs	r3, #3
 800316e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	f107 0310 	add.w	r3, r7, #16
 8003174:	4619      	mov	r1, r3
 8003176:	4819      	ldr	r0, [pc, #100]	; (80031dc <HAL_ADC_MspInit+0xc4>)
 8003178:	f001 fa96 	bl	80046a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <HAL_ADC_MspInit+0xcc>)
 8003180:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003182:	4b17      	ldr	r3, [pc, #92]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 8003196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800319a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 800319e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 80031a6:	2220      	movs	r2, #32
 80031a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031b0:	480b      	ldr	r0, [pc, #44]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 80031b2:	f001 f815 	bl	80041e0 <HAL_DMA_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80031bc:	f7ff ff74 	bl	80030a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 80031c4:	621a      	str	r2, [r3, #32]
 80031c6:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <HAL_ADC_MspInit+0xc8>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40012400 	.word	0x40012400
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40010800 	.word	0x40010800
 80031e0:	200004d4 	.word	0x200004d4
 80031e4:	40020008 	.word	0x40020008

080031e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_SPI_MspInit+0x8c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d131      	bne.n	800326c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_SPI_MspInit+0x90>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_SPI_MspInit+0x90>)
 800320e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003212:	61d3      	str	r3, [r2, #28]
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_SPI_MspInit+0x90>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_SPI_MspInit+0x90>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_SPI_MspInit+0x90>)
 8003226:	f043 0308 	orr.w	r3, r3, #8
 800322a:	6193      	str	r3, [r2, #24]
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_SPI_MspInit+0x90>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003238:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800323c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003242:	2303      	movs	r3, #3
 8003244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003246:	f107 0310 	add.w	r3, r7, #16
 800324a:	4619      	mov	r1, r3
 800324c:	480b      	ldr	r0, [pc, #44]	; (800327c <HAL_SPI_MspInit+0x94>)
 800324e:	f001 fa2b 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003252:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003256:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4619      	mov	r1, r3
 8003266:	4805      	ldr	r0, [pc, #20]	; (800327c <HAL_SPI_MspInit+0x94>)
 8003268:	f001 fa1e 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800326c:	bf00      	nop
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40003800 	.word	0x40003800
 8003278:	40021000 	.word	0x40021000
 800327c:	40010c00 	.word	0x40010c00

08003280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_TIM_Base_MspInit+0xdc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d12c      	bne.n	80032ec <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003292:	4b33      	ldr	r3, [pc, #204]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	4a32      	ldr	r2, [pc, #200]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 8003298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800329c:	6193      	str	r3, [r2, #24]
 800329e:	4b30      	ldr	r3, [pc, #192]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 1, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2101      	movs	r1, #1
 80032ae:	2018      	movs	r0, #24
 80032b0:	f000 ff5f 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80032b4:	2018      	movs	r0, #24
 80032b6:	f000 ff78 	bl	80041aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2101      	movs	r1, #1
 80032be:	2019      	movs	r0, #25
 80032c0:	f000 ff57 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032c4:	2019      	movs	r0, #25
 80032c6:	f000 ff70 	bl	80041aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 1, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2101      	movs	r1, #1
 80032ce:	201a      	movs	r0, #26
 80032d0:	f000 ff4f 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80032d4:	201a      	movs	r0, #26
 80032d6:	f000 ff68 	bl	80041aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2101      	movs	r1, #1
 80032de:	201b      	movs	r0, #27
 80032e0:	f000 ff47 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032e4:	201b      	movs	r0, #27
 80032e6:	f000 ff60 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032ea:	e032      	b.n	8003352 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d114      	bne.n	8003320 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f6:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	61d3      	str	r3, [r2, #28]
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	201c      	movs	r0, #28
 8003314:	f000 ff2d 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003318:	201c      	movs	r0, #28
 800331a:	f000 ff46 	bl	80041aa <HAL_NVIC_EnableIRQ>
}
 800331e:	e018      	b.n	8003352 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0f      	ldr	r2, [pc, #60]	; (8003364 <HAL_TIM_Base_MspInit+0xe4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d113      	bne.n	8003352 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	61d3      	str	r3, [r2, #28]
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_TIM_Base_MspInit+0xe0>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	201d      	movs	r0, #29
 8003348:	f000 ff13 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800334c:	201d      	movs	r0, #29
 800334e:	f000 ff2c 	bl	80041aa <HAL_NVIC_EnableIRQ>
}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40021000 	.word	0x40021000
 8003364:	40000400 	.word	0x40000400

08003368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a33      	ldr	r2, [pc, #204]	; (8003450 <HAL_UART_MspInit+0xe8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d15f      	bne.n	8003448 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <HAL_UART_MspInit+0xec>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	4a31      	ldr	r2, [pc, #196]	; (8003454 <HAL_UART_MspInit+0xec>)
 800338e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003392:	6193      	str	r3, [r2, #24]
 8003394:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <HAL_UART_MspInit+0xec>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_UART_MspInit+0xec>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <HAL_UART_MspInit+0xec>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6193      	str	r3, [r2, #24]
 80033ac:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_UART_MspInit+0xec>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033c2:	2303      	movs	r3, #3
 80033c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c6:	f107 0310 	add.w	r3, r7, #16
 80033ca:	4619      	mov	r1, r3
 80033cc:	4822      	ldr	r0, [pc, #136]	; (8003458 <HAL_UART_MspInit+0xf0>)
 80033ce:	f001 f96b 	bl	80046a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	4619      	mov	r1, r3
 80033e6:	481c      	ldr	r0, [pc, #112]	; (8003458 <HAL_UART_MspInit+0xf0>)
 80033e8:	f001 f95e 	bl	80046a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_UART_MspInit+0xf4>)
 80033ee:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <HAL_UART_MspInit+0xf8>)
 80033f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <HAL_UART_MspInit+0xf4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_UART_MspInit+0xf4>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <HAL_UART_MspInit+0xf4>)
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003404:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_UART_MspInit+0xf4>)
 8003406:	2200      	movs	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340a:	4b14      	ldr	r3, [pc, #80]	; (800345c <HAL_UART_MspInit+0xf4>)
 800340c:	2200      	movs	r2, #0
 800340e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003410:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_UART_MspInit+0xf4>)
 8003412:	2220      	movs	r2, #32
 8003414:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_UART_MspInit+0xf4>)
 8003418:	2200      	movs	r2, #0
 800341a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800341c:	480f      	ldr	r0, [pc, #60]	; (800345c <HAL_UART_MspInit+0xf4>)
 800341e:	f000 fedf 	bl	80041e0 <HAL_DMA_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003428:	f7ff fe3e 	bl	80030a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a0b      	ldr	r2, [pc, #44]	; (800345c <HAL_UART_MspInit+0xf4>)
 8003430:	635a      	str	r2, [r3, #52]	; 0x34
 8003432:	4a0a      	ldr	r2, [pc, #40]	; (800345c <HAL_UART_MspInit+0xf4>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	2025      	movs	r0, #37	; 0x25
 800343e:	f000 fe98 	bl	8004172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003442:	2025      	movs	r0, #37	; 0x25
 8003444:	f000 feb1 	bl	80041aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40013800 	.word	0x40013800
 8003454:	40021000 	.word	0x40021000
 8003458:	40010800 	.word	0x40010800
 800345c:	20000418 	.word	0x20000418
 8003460:	40020058 	.word	0x40020058

08003464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003468:	e7fe      	b.n	8003468 <NMI_Handler+0x4>

0800346a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800346e:	e7fe      	b.n	800346e <HardFault_Handler+0x4>

08003470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003474:	e7fe      	b.n	8003474 <MemManage_Handler+0x4>

08003476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800347a:	e7fe      	b.n	800347a <BusFault_Handler+0x4>

0800347c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003480:	e7fe      	b.n	8003480 <UsageFault_Handler+0x4>

08003482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800348e:	b480      	push	{r7}
 8003490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034aa:	f000 f98f 	bl	80037cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034b8:	4802      	ldr	r0, [pc, #8]	; (80034c4 <DMA1_Channel1_IRQHandler+0x10>)
 80034ba:	f000 ffc1 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	200004d4 	.word	0x200004d4

080034c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <DMA1_Channel5_IRQHandler+0x10>)
 80034ce:	f000 ffb7 	bl	8004440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000418 	.word	0x20000418

080034dc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <TIM1_BRK_IRQHandler+0x10>)
 80034e2:	f002 fd75 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000051c 	.word	0x2000051c

080034f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <TIM1_UP_IRQHandler+0x10>)
 80034f6:	f002 fd6b 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000051c 	.word	0x2000051c

08003504 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <TIM1_TRG_COM_IRQHandler+0x10>)
 800350a:	f002 fd61 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000051c 	.word	0x2000051c

08003518 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <TIM1_CC_IRQHandler+0x10>)
 800351e:	f002 fd57 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000051c 	.word	0x2000051c

0800352c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <TIM2_IRQHandler+0x10>)
 8003532:	f002 fd4d 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000588 	.word	0x20000588

08003540 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <TIM3_IRQHandler+0x10>)
 8003546:	f002 fd43 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200003a0 	.word	0x200003a0

08003554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <USART1_IRQHandler+0x10>)
 800355a:	f003 f9f1 	bl	8006940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000460 	.word	0x20000460

08003568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
	return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <_kill>:

int _kill(int pid, int sig)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003580:	f003 fd94 	bl	80070ac <__errno>
 8003584:	4603      	mov	r3, r0
 8003586:	2216      	movs	r2, #22
 8003588:	601a      	str	r2, [r3, #0]
	return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <_exit>:

void _exit (int status)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800359e:	f04f 31ff 	mov.w	r1, #4294967295
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ffe7 	bl	8003576 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035a8:	e7fe      	b.n	80035a8 <_exit+0x12>

080035aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e00a      	b.n	80035d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035bc:	f3af 8000 	nop.w
 80035c0:	4601      	mov	r1, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	60ba      	str	r2, [r7, #8]
 80035c8:	b2ca      	uxtb	r2, r1
 80035ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3301      	adds	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dbf0      	blt.n	80035bc <_read+0x12>
	}

return len;
 80035da:	687b      	ldr	r3, [r7, #4]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e009      	b.n	800360a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	60ba      	str	r2, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	429a      	cmp	r2, r3
 8003610:	dbf1      	blt.n	80035f6 <_write+0x12>
	}
	return len;
 8003612:	687b      	ldr	r3, [r7, #4]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <_close>:

int _close(int file)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	return -1;
 8003624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003628:	4618      	mov	r0, r3
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003642:	605a      	str	r2, [r3, #4]
	return 0;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <_isatty>:

int _isatty(int file)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	return 1;
 8003658:	2301      	movs	r3, #1
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
	return 0;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <_sbrk+0x5c>)
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <_sbrk+0x60>)
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <_sbrk+0x64>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <_sbrk+0x64>)
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <_sbrk+0x68>)
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <_sbrk+0x64>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d207      	bcs.n	80036bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036ac:	f003 fcfe 	bl	80070ac <__errno>
 80036b0:	4603      	mov	r3, r0
 80036b2:	220c      	movs	r2, #12
 80036b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e009      	b.n	80036d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036bc:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <_sbrk+0x64>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <_sbrk+0x64>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	4a05      	ldr	r2, [pc, #20]	; (80036e0 <_sbrk+0x64>)
 80036cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20005000 	.word	0x20005000
 80036dc:	00000400 	.word	0x00000400
 80036e0:	200002c4 	.word	0x200002c4
 80036e4:	200005e8 	.word	0x200005e8

080036e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr

080036f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80036f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80036f6:	e003      	b.n	8003700 <LoopCopyDataInit>

080036f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80036fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80036fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80036fe:	3104      	adds	r1, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003700:	480a      	ldr	r0, [pc, #40]	; (800372c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003704:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003706:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003708:	d3f6      	bcc.n	80036f8 <CopyDataInit>
  ldr r2, =_sbss
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800370c:	e002      	b.n	8003714 <LoopFillZerobss>

0800370e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003710:	f842 3b04 	str.w	r3, [r2], #4

08003714 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003716:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003718:	d3f9      	bcc.n	800370e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800371a:	f7ff ffe5 	bl	80036e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371e:	f003 fccb 	bl	80070b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003722:	f7fe fe39 	bl	8002398 <main>
  bx lr
 8003726:	4770      	bx	lr
  ldr r3, =_sidata
 8003728:	0800a804 	.word	0x0800a804
  ldr r0, =_sdata
 800372c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003730:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8003734:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8003738:	200005e8 	.word	0x200005e8

0800373c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800373c:	e7fe      	b.n	800373c <ADC1_2_IRQHandler>
	...

08003740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_Init+0x28>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_Init+0x28>)
 800374a:	f043 0310 	orr.w	r3, r3, #16
 800374e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003750:	2003      	movs	r0, #3
 8003752:	f000 fd03 	bl	800415c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003756:	2000      	movs	r0, #0
 8003758:	f000 f808 	bl	800376c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375c:	f7ff fcaa 	bl	80030b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40022000 	.word	0x40022000

0800376c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_InitTick+0x54>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_InitTick+0x58>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003782:	fbb3 f3f1 	udiv	r3, r3, r1
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fd1b 	bl	80041c6 <HAL_SYSTICK_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e00e      	b.n	80037b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d80a      	bhi.n	80037b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a0:	2200      	movs	r2, #0
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f000 fce3 	bl	8004172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <HAL_InitTick+0x5c>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e000      	b.n	80037b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000014 	.word	0x20000014
 80037c4:	2000001c 	.word	0x2000001c
 80037c8:	20000018 	.word	0x20000018

080037cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_IncTick+0x1c>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_IncTick+0x20>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a03      	ldr	r2, [pc, #12]	; (80037ec <HAL_IncTick+0x20>)
 80037de:	6013      	str	r3, [r2, #0]
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	2000001c 	.word	0x2000001c
 80037ec:	200005d4 	.word	0x200005d4

080037f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return uwTick;
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <HAL_GetTick+0x10>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	200005d4 	.word	0x200005d4

08003804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800380c:	f7ff fff0 	bl	80037f0 <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d005      	beq.n	800382a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800381e:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <HAL_Delay+0x44>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800382a:	bf00      	nop
 800382c:	f7ff ffe0 	bl	80037f0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	429a      	cmp	r2, r3
 800383a:	d8f7      	bhi.n	800382c <HAL_Delay+0x28>
  {
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000001c 	.word	0x2000001c

0800384c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e0be      	b.n	80039ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff fc44 	bl	8003118 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 faf7 	bl	8003e84 <ADC_ConversionStop_Disable>
 8003896:	4603      	mov	r3, r0
 8003898:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 8099 	bne.w	80039da <HAL_ADC_Init+0x18e>
 80038a8:	7dfb      	ldrb	r3, [r7, #23]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f040 8095 	bne.w	80039da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038b8:	f023 0302 	bic.w	r3, r3, #2
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7b1b      	ldrb	r3, [r3, #12]
 80038d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80038d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	d003      	beq.n	80038ee <HAL_ADC_Init+0xa2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_ADC_Init+0xa8>
 80038ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f2:	e000      	b.n	80038f6 <HAL_ADC_Init+0xaa>
 80038f4:	2300      	movs	r3, #0
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7d1b      	ldrb	r3, [r3, #20]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d119      	bne.n	8003938 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	7b1b      	ldrb	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	3b01      	subs	r3, #1
 8003912:	035a      	lsls	r2, r3, #13
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e00b      	b.n	8003938 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f043 0220 	orr.w	r2, r3, #32
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	f043 0201 	orr.w	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_ADC_Init+0x1a8>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003968:	d003      	beq.n	8003972 <HAL_ADC_Init+0x126>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d104      	bne.n	800397c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	3b01      	subs	r3, #1
 8003978:	051b      	lsls	r3, r3, #20
 800397a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	430a      	orrs	r2, r1
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <HAL_ADC_Init+0x1ac>)
 8003998:	4013      	ands	r3, r2
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	429a      	cmp	r2, r3
 800399e:	d10b      	bne.n	80039b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039b6:	e018      	b.n	80039ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	f023 0312 	bic.w	r3, r3, #18
 80039c0:	f043 0210 	orr.w	r2, r3, #16
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039d8:	e007      	b.n	80039ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	f043 0210 	orr.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	ffe1f7fd 	.word	0xffe1f7fd
 80039f8:	ff1f0efe 	.word	0xff1f0efe

080039fc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a64      	ldr	r2, [pc, #400]	; (8003ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_ADC_Start_DMA+0x24>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a63      	ldr	r2, [pc, #396]	; (8003ba8 <HAL_ADC_Start_DMA+0x1ac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d106      	bne.n	8003a2e <HAL_ADC_Start_DMA+0x32>
 8003a20:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 80b3 	bne.w	8003b94 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_Start_DMA+0x40>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0ae      	b.n	8003b9a <HAL_ADC_Start_DMA+0x19e>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f9cb 	bl	8003de0 <ADC_Enable>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f040 809a 	bne.w	8003b8a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a4e      	ldr	r2, [pc, #312]	; (8003ba8 <HAL_ADC_Start_DMA+0x1ac>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d105      	bne.n	8003a80 <HAL_ADC_Start_DMA+0x84>
 8003a74:	4b4b      	ldr	r3, [pc, #300]	; (8003ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d115      	bne.n	8003aac <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d026      	beq.n	8003ae8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003aaa:	e01d      	b.n	8003ae8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a39      	ldr	r2, [pc, #228]	; (8003ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_ADC_Start_DMA+0xd0>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <HAL_ADC_Start_DMA+0x1ac>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10d      	bne.n	8003ae8 <HAL_ADC_Start_DMA+0xec>
 8003acc:	4b35      	ldr	r3, [pc, #212]	; (8003ba4 <HAL_ADC_Start_DMA+0x1a8>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d007      	beq.n	8003ae8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ae0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d006      	beq.n	8003b02 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	f023 0206 	bic.w	r2, r3, #6
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b00:	e002      	b.n	8003b08 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4a25      	ldr	r2, [pc, #148]	; (8003bac <HAL_ADC_Start_DMA+0x1b0>)
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	4a24      	ldr	r2, [pc, #144]	; (8003bb0 <HAL_ADC_Start_DMA+0x1b4>)
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4a23      	ldr	r2, [pc, #140]	; (8003bb4 <HAL_ADC_Start_DMA+0x1b8>)
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0202 	mvn.w	r2, #2
 8003b30:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b40:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a18      	ldr	r0, [r3, #32]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	334c      	adds	r3, #76	; 0x4c
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f000 fb9f 	bl	8004294 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b64:	d108      	bne.n	8003b78 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003b74:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003b76:	e00f      	b.n	8003b98 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b86:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003b88:	e006      	b.n	8003b98 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003b92:	e001      	b.n	8003b98 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40012400 	.word	0x40012400
 8003ba8:	40012800 	.word	0x40012800
 8003bac:	08003ef9 	.word	0x08003ef9
 8003bb0:	08003f75 	.word	0x08003f75
 8003bb4:	08003f91 	.word	0x08003f91

08003bb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x20>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e0dc      	b.n	8003dca <HAL_ADC_ConfigChannel+0x1da>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d81c      	bhi.n	8003c5a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	3b05      	subs	r3, #5
 8003c32:	221f      	movs	r2, #31
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	4019      	ands	r1, r3
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	3b05      	subs	r3, #5
 8003c4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34
 8003c58:	e03c      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d81c      	bhi.n	8003c9c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	3b23      	subs	r3, #35	; 0x23
 8003c74:	221f      	movs	r2, #31
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	4019      	ands	r1, r3
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b23      	subs	r3, #35	; 0x23
 8003c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
 8003c9a:	e01b      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	3b41      	subs	r3, #65	; 0x41
 8003cae:	221f      	movs	r2, #31
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	4019      	ands	r1, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	3b41      	subs	r3, #65	; 0x41
 8003cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b09      	cmp	r3, #9
 8003cda:	d91c      	bls.n	8003d16 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68d9      	ldr	r1, [r3, #12]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4413      	add	r3, r2
 8003cec:	3b1e      	subs	r3, #30
 8003cee:	2207      	movs	r2, #7
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	4019      	ands	r1, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6898      	ldr	r0, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	3b1e      	subs	r3, #30
 8003d08:	fa00 f203 	lsl.w	r2, r0, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	60da      	str	r2, [r3, #12]
 8003d14:	e019      	b.n	8003d4a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6919      	ldr	r1, [r3, #16]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	2207      	movs	r2, #7
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	4019      	ands	r1, r3
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6898      	ldr	r0, [r3, #8]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d003      	beq.n	8003d5a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d56:	2b11      	cmp	r3, #17
 8003d58:	d132      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d125      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d126      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003d80:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d11a      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a13      	ldr	r2, [pc, #76]	; (8003ddc <HAL_ADC_ConfigChannel+0x1ec>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	0c9a      	lsrs	r2, r3, #18
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003da0:	e002      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f9      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x1b2>
 8003dae:	e007      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	40012400 	.word	0x40012400
 8003dd8:	20000014 	.word	0x20000014
 8003ddc:	431bde83 	.word	0x431bde83

08003de0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d039      	beq.n	8003e72 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <ADC_Enable+0x9c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <ADC_Enable+0xa0>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	0c9b      	lsrs	r3, r3, #18
 8003e1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e1c:	e002      	b.n	8003e24 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f9      	bne.n	8003e1e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e2a:	f7ff fce1 	bl	80037f0 <HAL_GetTick>
 8003e2e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e30:	e018      	b.n	8003e64 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e32:	f7ff fcdd 	bl	80037f0 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d911      	bls.n	8003e64 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	f043 0210 	orr.w	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d1df      	bne.n	8003e32 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000014 	.word	0x20000014
 8003e80:	431bde83 	.word	0x431bde83

08003e84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d127      	bne.n	8003eee <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003eae:	f7ff fc9f 	bl	80037f0 <HAL_GetTick>
 8003eb2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003eb4:	e014      	b.n	8003ee0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003eb6:	f7ff fc9b 	bl	80037f0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d90d      	bls.n	8003ee0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	f043 0210 	orr.w	r2, r3, #16
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e007      	b.n	8003ef0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d0e3      	beq.n	8003eb6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d127      	bne.n	8003f62 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f28:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f2c:	d115      	bne.n	8003f5a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d111      	bne.n	8003f5a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d105      	bne.n	8003f5a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fe2c 	bl	8003bb8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003f60:	e004      	b.n	8003f6c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff fe21 	bl	8003bca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f7ff fe10 	bl	8003bdc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff6:	4a04      	ldr	r2, [pc, #16]	; (8004008 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	60d3      	str	r3, [r2, #12]
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <__NVIC_GetPriorityGrouping+0x18>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	f003 0307 	and.w	r3, r3, #7
}
 800401a:	4618      	mov	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	e000ed00 	.word	0xe000ed00

08004028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	2b00      	cmp	r3, #0
 8004038:	db0b      	blt.n	8004052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	f003 021f 	and.w	r2, r3, #31
 8004040:	4906      	ldr	r1, [pc, #24]	; (800405c <__NVIC_EnableIRQ+0x34>)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	2001      	movs	r0, #1
 800404a:	fa00 f202 	lsl.w	r2, r0, r2
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	e000e100 	.word	0xe000e100

08004060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	2b00      	cmp	r3, #0
 8004072:	db0a      	blt.n	800408a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	490c      	ldr	r1, [pc, #48]	; (80040ac <__NVIC_SetPriority+0x4c>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	0112      	lsls	r2, r2, #4
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	440b      	add	r3, r1
 8004084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004088:	e00a      	b.n	80040a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4908      	ldr	r1, [pc, #32]	; (80040b0 <__NVIC_SetPriority+0x50>)
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	3b04      	subs	r3, #4
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	440b      	add	r3, r1
 800409e:	761a      	strb	r2, [r3, #24]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000e100 	.word	0xe000e100
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f1c3 0307 	rsb	r3, r3, #7
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	bf28      	it	cs
 80040d2:	2304      	movcs	r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3304      	adds	r3, #4
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d902      	bls.n	80040e4 <NVIC_EncodePriority+0x30>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3b03      	subs	r3, #3
 80040e2:	e000      	b.n	80040e6 <NVIC_EncodePriority+0x32>
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	401a      	ands	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	43d9      	mvns	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	4313      	orrs	r3, r2
         );
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3b01      	subs	r3, #1
 8004124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004128:	d301      	bcc.n	800412e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800412a:	2301      	movs	r3, #1
 800412c:	e00f      	b.n	800414e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800412e:	4a0a      	ldr	r2, [pc, #40]	; (8004158 <SysTick_Config+0x40>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004136:	210f      	movs	r1, #15
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	f7ff ff90 	bl	8004060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <SysTick_Config+0x40>)
 8004142:	2200      	movs	r2, #0
 8004144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <SysTick_Config+0x40>)
 8004148:	2207      	movs	r2, #7
 800414a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	e000e010 	.word	0xe000e010

0800415c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff2d 	bl	8003fc4 <__NVIC_SetPriorityGrouping>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	4603      	mov	r3, r0
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004184:	f7ff ff42 	bl	800400c <__NVIC_GetPriorityGrouping>
 8004188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68b9      	ldr	r1, [r7, #8]
 800418e:	6978      	ldr	r0, [r7, #20]
 8004190:	f7ff ff90 	bl	80040b4 <NVIC_EncodePriority>
 8004194:	4602      	mov	r2, r0
 8004196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff5f 	bl	8004060 <__NVIC_SetPriority>
}
 80041a2:	bf00      	nop
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff ff35 	bl	8004028 <__NVIC_EnableIRQ>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b082      	sub	sp, #8
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff ffa2 	bl	8004118 <SysTick_Config>
 80041d4:	4603      	mov	r3, r0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e043      	b.n	800427e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_DMA_Init+0xa8>)
 80041fe:	4413      	add	r3, r2
 8004200:	4a22      	ldr	r2, [pc, #136]	; (800428c <HAL_DMA_Init+0xac>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	009a      	lsls	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1f      	ldr	r2, [pc, #124]	; (8004290 <HAL_DMA_Init+0xb0>)
 8004212:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800422a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800422e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	bffdfff8 	.word	0xbffdfff8
 800428c:	cccccccd 	.word	0xcccccccd
 8004290:	40020000 	.word	0x40020000

08004294 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_DMA_Start_IT+0x20>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e04a      	b.n	800434a <HAL_DMA_Start_IT+0xb6>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d13a      	bne.n	800433c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	68b9      	ldr	r1, [r7, #8]
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f9ae 	bl	800464c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 020e 	orr.w	r2, r2, #14
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	e00f      	b.n	800432a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0204 	bic.w	r2, r2, #4
 8004318:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 020a 	orr.w	r2, r2, #10
 8004328:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e005      	b.n	8004348 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004344:	2302      	movs	r3, #2
 8004346:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004366:	2b02      	cmp	r3, #2
 8004368:	d005      	beq.n	8004376 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2204      	movs	r2, #4
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e051      	b.n	800441a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 020e 	bic.w	r2, r2, #14
 8004384:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a22      	ldr	r2, [pc, #136]	; (8004424 <HAL_DMA_Abort_IT+0xd0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d029      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xa0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a20      	ldr	r2, [pc, #128]	; (8004428 <HAL_DMA_Abort_IT+0xd4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d022      	beq.n	80043f0 <HAL_DMA_Abort_IT+0x9c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1f      	ldr	r2, [pc, #124]	; (800442c <HAL_DMA_Abort_IT+0xd8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d01a      	beq.n	80043ea <HAL_DMA_Abort_IT+0x96>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_DMA_Abort_IT+0xdc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d012      	beq.n	80043e4 <HAL_DMA_Abort_IT+0x90>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_DMA_Abort_IT+0xe0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d00a      	beq.n	80043de <HAL_DMA_Abort_IT+0x8a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <HAL_DMA_Abort_IT+0xe4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d102      	bne.n	80043d8 <HAL_DMA_Abort_IT+0x84>
 80043d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043d6:	e00e      	b.n	80043f6 <HAL_DMA_Abort_IT+0xa2>
 80043d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043dc:	e00b      	b.n	80043f6 <HAL_DMA_Abort_IT+0xa2>
 80043de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043e2:	e008      	b.n	80043f6 <HAL_DMA_Abort_IT+0xa2>
 80043e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043e8:	e005      	b.n	80043f6 <HAL_DMA_Abort_IT+0xa2>
 80043ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043ee:	e002      	b.n	80043f6 <HAL_DMA_Abort_IT+0xa2>
 80043f0:	2310      	movs	r3, #16
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_Abort_IT+0xa2>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4a11      	ldr	r2, [pc, #68]	; (800443c <HAL_DMA_Abort_IT+0xe8>)
 80043f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
    } 
  }
  return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40020008 	.word	0x40020008
 8004428:	4002001c 	.word	0x4002001c
 800442c:	40020030 	.word	0x40020030
 8004430:	40020044 	.word	0x40020044
 8004434:	40020058 	.word	0x40020058
 8004438:	4002006c 	.word	0x4002006c
 800443c:	40020000 	.word	0x40020000

08004440 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	2204      	movs	r2, #4
 800445e:	409a      	lsls	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d04f      	beq.n	8004508 <HAL_DMA_IRQHandler+0xc8>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d04a      	beq.n	8004508 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0204 	bic.w	r2, r2, #4
 800448e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a66      	ldr	r2, [pc, #408]	; (8004630 <HAL_DMA_IRQHandler+0x1f0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d029      	beq.n	80044ee <HAL_DMA_IRQHandler+0xae>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a65      	ldr	r2, [pc, #404]	; (8004634 <HAL_DMA_IRQHandler+0x1f4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d022      	beq.n	80044ea <HAL_DMA_IRQHandler+0xaa>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a63      	ldr	r2, [pc, #396]	; (8004638 <HAL_DMA_IRQHandler+0x1f8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01a      	beq.n	80044e4 <HAL_DMA_IRQHandler+0xa4>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a62      	ldr	r2, [pc, #392]	; (800463c <HAL_DMA_IRQHandler+0x1fc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d012      	beq.n	80044de <HAL_DMA_IRQHandler+0x9e>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a60      	ldr	r2, [pc, #384]	; (8004640 <HAL_DMA_IRQHandler+0x200>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00a      	beq.n	80044d8 <HAL_DMA_IRQHandler+0x98>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a5f      	ldr	r2, [pc, #380]	; (8004644 <HAL_DMA_IRQHandler+0x204>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d102      	bne.n	80044d2 <HAL_DMA_IRQHandler+0x92>
 80044cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044d0:	e00e      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044d6:	e00b      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80044dc:	e008      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e2:	e005      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044e8:	e002      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044ea:	2340      	movs	r3, #64	; 0x40
 80044ec:	e000      	b.n	80044f0 <HAL_DMA_IRQHandler+0xb0>
 80044ee:	2304      	movs	r3, #4
 80044f0:	4a55      	ldr	r2, [pc, #340]	; (8004648 <HAL_DMA_IRQHandler+0x208>)
 80044f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8094 	beq.w	8004626 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004506:	e08e      	b.n	8004626 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	2202      	movs	r2, #2
 800450e:	409a      	lsls	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d056      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x186>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d051      	beq.n	80045c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020a 	bic.w	r2, r2, #10
 800453e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a38      	ldr	r2, [pc, #224]	; (8004630 <HAL_DMA_IRQHandler+0x1f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d029      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x166>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a37      	ldr	r2, [pc, #220]	; (8004634 <HAL_DMA_IRQHandler+0x1f4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d022      	beq.n	80045a2 <HAL_DMA_IRQHandler+0x162>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a35      	ldr	r2, [pc, #212]	; (8004638 <HAL_DMA_IRQHandler+0x1f8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01a      	beq.n	800459c <HAL_DMA_IRQHandler+0x15c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a34      	ldr	r2, [pc, #208]	; (800463c <HAL_DMA_IRQHandler+0x1fc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d012      	beq.n	8004596 <HAL_DMA_IRQHandler+0x156>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a32      	ldr	r2, [pc, #200]	; (8004640 <HAL_DMA_IRQHandler+0x200>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00a      	beq.n	8004590 <HAL_DMA_IRQHandler+0x150>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a31      	ldr	r2, [pc, #196]	; (8004644 <HAL_DMA_IRQHandler+0x204>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d102      	bne.n	800458a <HAL_DMA_IRQHandler+0x14a>
 8004584:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004588:	e00e      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 800458a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800458e:	e00b      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 8004590:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004594:	e008      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 8004596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800459a:	e005      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 800459c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a0:	e002      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 80045a2:	2320      	movs	r3, #32
 80045a4:	e000      	b.n	80045a8 <HAL_DMA_IRQHandler+0x168>
 80045a6:	2302      	movs	r3, #2
 80045a8:	4a27      	ldr	r2, [pc, #156]	; (8004648 <HAL_DMA_IRQHandler+0x208>)
 80045aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d034      	beq.n	8004626 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80045c4:	e02f      	b.n	8004626 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2208      	movs	r2, #8
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d028      	beq.n	8004628 <HAL_DMA_IRQHandler+0x1e8>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d023      	beq.n	8004628 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 020e 	bic.w	r2, r2, #14
 80045ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	4798      	blx	r3
    }
  }
  return;
 8004626:	bf00      	nop
 8004628:	bf00      	nop
}
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40020008 	.word	0x40020008
 8004634:	4002001c 	.word	0x4002001c
 8004638:	40020030 	.word	0x40020030
 800463c:	40020044 	.word	0x40020044
 8004640:	40020058 	.word	0x40020058
 8004644:	4002006c 	.word	0x4002006c
 8004648:	40020000 	.word	0x40020000

0800464c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f202 	lsl.w	r2, r1, r2
 8004668:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b10      	cmp	r3, #16
 8004678:	d108      	bne.n	800468c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800468a:	e007      	b.n	800469c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b08b      	sub	sp, #44	; 0x2c
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046b2:	2300      	movs	r3, #0
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80046b6:	2300      	movs	r3, #0
 80046b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ba:	e169      	b.n	8004990 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80046bc:	2201      	movs	r2, #1
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	f040 8158 	bne.w	800498a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	4a9a      	ldr	r2, [pc, #616]	; (8004948 <HAL_GPIO_Init+0x2a0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d05e      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 80046e4:	4a98      	ldr	r2, [pc, #608]	; (8004948 <HAL_GPIO_Init+0x2a0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d875      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 80046ea:	4a98      	ldr	r2, [pc, #608]	; (800494c <HAL_GPIO_Init+0x2a4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d058      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 80046f0:	4a96      	ldr	r2, [pc, #600]	; (800494c <HAL_GPIO_Init+0x2a4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d86f      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 80046f6:	4a96      	ldr	r2, [pc, #600]	; (8004950 <HAL_GPIO_Init+0x2a8>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d052      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 80046fc:	4a94      	ldr	r2, [pc, #592]	; (8004950 <HAL_GPIO_Init+0x2a8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d869      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 8004702:	4a94      	ldr	r2, [pc, #592]	; (8004954 <HAL_GPIO_Init+0x2ac>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d04c      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 8004708:	4a92      	ldr	r2, [pc, #584]	; (8004954 <HAL_GPIO_Init+0x2ac>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d863      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 800470e:	4a92      	ldr	r2, [pc, #584]	; (8004958 <HAL_GPIO_Init+0x2b0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d046      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
 8004714:	4a90      	ldr	r2, [pc, #576]	; (8004958 <HAL_GPIO_Init+0x2b0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d85d      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 800471a:	2b12      	cmp	r3, #18
 800471c:	d82a      	bhi.n	8004774 <HAL_GPIO_Init+0xcc>
 800471e:	2b12      	cmp	r3, #18
 8004720:	d859      	bhi.n	80047d6 <HAL_GPIO_Init+0x12e>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_GPIO_Init+0x80>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	080047a3 	.word	0x080047a3
 800472c:	0800477d 	.word	0x0800477d
 8004730:	0800478f 	.word	0x0800478f
 8004734:	080047d1 	.word	0x080047d1
 8004738:	080047d7 	.word	0x080047d7
 800473c:	080047d7 	.word	0x080047d7
 8004740:	080047d7 	.word	0x080047d7
 8004744:	080047d7 	.word	0x080047d7
 8004748:	080047d7 	.word	0x080047d7
 800474c:	080047d7 	.word	0x080047d7
 8004750:	080047d7 	.word	0x080047d7
 8004754:	080047d7 	.word	0x080047d7
 8004758:	080047d7 	.word	0x080047d7
 800475c:	080047d7 	.word	0x080047d7
 8004760:	080047d7 	.word	0x080047d7
 8004764:	080047d7 	.word	0x080047d7
 8004768:	080047d7 	.word	0x080047d7
 800476c:	08004785 	.word	0x08004785
 8004770:	08004799 	.word	0x08004799
 8004774:	4a79      	ldr	r2, [pc, #484]	; (800495c <HAL_GPIO_Init+0x2b4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800477a:	e02c      	b.n	80047d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	623b      	str	r3, [r7, #32]
          break;
 8004782:	e029      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	3304      	adds	r3, #4
 800478a:	623b      	str	r3, [r7, #32]
          break;
 800478c:	e024      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	3308      	adds	r3, #8
 8004794:	623b      	str	r3, [r7, #32]
          break;
 8004796:	e01f      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	330c      	adds	r3, #12
 800479e:	623b      	str	r3, [r7, #32]
          break;
 80047a0:	e01a      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d102      	bne.n	80047b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80047aa:	2304      	movs	r3, #4
 80047ac:	623b      	str	r3, [r7, #32]
          break;
 80047ae:	e013      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047b8:	2308      	movs	r3, #8
 80047ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	611a      	str	r2, [r3, #16]
          break;
 80047c2:	e009      	b.n	80047d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047c4:	2308      	movs	r3, #8
 80047c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	615a      	str	r2, [r3, #20]
          break;
 80047ce:	e003      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047d0:	2300      	movs	r3, #0
 80047d2:	623b      	str	r3, [r7, #32]
          break;
 80047d4:	e000      	b.n	80047d8 <HAL_GPIO_Init+0x130>
          break;
 80047d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2bff      	cmp	r3, #255	; 0xff
 80047dc:	d801      	bhi.n	80047e2 <HAL_GPIO_Init+0x13a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	e001      	b.n	80047e6 <HAL_GPIO_Init+0x13e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2bff      	cmp	r3, #255	; 0xff
 80047ec:	d802      	bhi.n	80047f4 <HAL_GPIO_Init+0x14c>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	e002      	b.n	80047fa <HAL_GPIO_Init+0x152>
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	3b08      	subs	r3, #8
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	210f      	movs	r1, #15
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	6a39      	ldr	r1, [r7, #32]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	431a      	orrs	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 80b1 	beq.w	800498a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004828:	4b4d      	ldr	r3, [pc, #308]	; (8004960 <HAL_GPIO_Init+0x2b8>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4a4c      	ldr	r2, [pc, #304]	; (8004960 <HAL_GPIO_Init+0x2b8>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6193      	str	r3, [r2, #24]
 8004834:	4b4a      	ldr	r3, [pc, #296]	; (8004960 <HAL_GPIO_Init+0x2b8>)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004840:	4a48      	ldr	r2, [pc, #288]	; (8004964 <HAL_GPIO_Init+0x2bc>)
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	089b      	lsrs	r3, r3, #2
 8004846:	3302      	adds	r3, #2
 8004848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	220f      	movs	r2, #15
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4013      	ands	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a40      	ldr	r2, [pc, #256]	; (8004968 <HAL_GPIO_Init+0x2c0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_GPIO_Init+0x1ec>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3f      	ldr	r2, [pc, #252]	; (800496c <HAL_GPIO_Init+0x2c4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00d      	beq.n	8004890 <HAL_GPIO_Init+0x1e8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3e      	ldr	r2, [pc, #248]	; (8004970 <HAL_GPIO_Init+0x2c8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <HAL_GPIO_Init+0x1e4>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3d      	ldr	r2, [pc, #244]	; (8004974 <HAL_GPIO_Init+0x2cc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_GPIO_Init+0x1e0>
 8004884:	2303      	movs	r3, #3
 8004886:	e006      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 8004888:	2304      	movs	r3, #4
 800488a:	e004      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 800488c:	2302      	movs	r3, #2
 800488e:	e002      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <HAL_GPIO_Init+0x1ee>
 8004894:	2300      	movs	r3, #0
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	f002 0203 	and.w	r2, r2, #3
 800489c:	0092      	lsls	r2, r2, #2
 800489e:	4093      	lsls	r3, r2
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80048a6:	492f      	ldr	r1, [pc, #188]	; (8004964 <HAL_GPIO_Init+0x2bc>)
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	3302      	adds	r3, #2
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d006      	beq.n	80048ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80048c0:	4b2d      	ldr	r3, [pc, #180]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	492c      	ldr	r1, [pc, #176]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e006      	b.n	80048dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048ce:	4b2a      	ldr	r3, [pc, #168]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	4928      	ldr	r1, [pc, #160]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048d8:	4013      	ands	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048e8:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	4922      	ldr	r1, [pc, #136]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
 80048f4:	e006      	b.n	8004904 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048f6:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	491e      	ldr	r1, [pc, #120]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004900:	4013      	ands	r3, r2
 8004902:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d006      	beq.n	800491e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	4918      	ldr	r1, [pc, #96]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	4313      	orrs	r3, r2
 800491a:	608b      	str	r3, [r1, #8]
 800491c:	e006      	b.n	800492c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	43db      	mvns	r3, r3
 8004926:	4914      	ldr	r1, [pc, #80]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 8004928:	4013      	ands	r3, r2
 800492a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d021      	beq.n	800497c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	490e      	ldr	r1, [pc, #56]	; (8004978 <HAL_GPIO_Init+0x2d0>)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4313      	orrs	r3, r2
 8004942:	60cb      	str	r3, [r1, #12]
 8004944:	e021      	b.n	800498a <HAL_GPIO_Init+0x2e2>
 8004946:	bf00      	nop
 8004948:	10320000 	.word	0x10320000
 800494c:	10310000 	.word	0x10310000
 8004950:	10220000 	.word	0x10220000
 8004954:	10210000 	.word	0x10210000
 8004958:	10120000 	.word	0x10120000
 800495c:	10110000 	.word	0x10110000
 8004960:	40021000 	.word	0x40021000
 8004964:	40010000 	.word	0x40010000
 8004968:	40010800 	.word	0x40010800
 800496c:	40010c00 	.word	0x40010c00
 8004970:	40011000 	.word	0x40011000
 8004974:	40011400 	.word	0x40011400
 8004978:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <HAL_GPIO_Init+0x304>)
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	43db      	mvns	r3, r3
 8004984:	4909      	ldr	r1, [pc, #36]	; (80049ac <HAL_GPIO_Init+0x304>)
 8004986:	4013      	ands	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	3301      	adds	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	f47f ae8e 	bne.w	80046bc <HAL_GPIO_Init+0x14>
  }
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	372c      	adds	r7, #44	; 0x2c
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40010400 	.word	0x40010400

080049b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
 80049bc:	4613      	mov	r3, r2
 80049be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049c0:	787b      	ldrb	r3, [r7, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049c6:	887a      	ldrh	r2, [r7, #2]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049cc:	e003      	b.n	80049d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	041a      	lsls	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	611a      	str	r2, [r3, #16]
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4013      	ands	r3, r2
 80049f8:	041a      	lsls	r2, r3, #16
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43d9      	mvns	r1, r3
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	400b      	ands	r3, r1
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	611a      	str	r2, [r3, #16]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e26c      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8087 	beq.w	8004b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a34:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f003 030c 	and.w	r3, r3, #12
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d00c      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a40:	4b8f      	ldr	r3, [pc, #572]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d112      	bne.n	8004a72 <HAL_RCC_OscConfig+0x5e>
 8004a4c:	4b8c      	ldr	r3, [pc, #560]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d10b      	bne.n	8004a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5a:	4b89      	ldr	r3, [pc, #548]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d06c      	beq.n	8004b40 <HAL_RCC_OscConfig+0x12c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d168      	bne.n	8004b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e246      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCC_OscConfig+0x76>
 8004a7c:	4b80      	ldr	r3, [pc, #512]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a7f      	ldr	r2, [pc, #508]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e02e      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd4>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x98>
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7a      	ldr	r2, [pc, #488]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b78      	ldr	r3, [pc, #480]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a77      	ldr	r2, [pc, #476]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e01d      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xbc>
 8004ab6:	4b72      	ldr	r3, [pc, #456]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a71      	ldr	r2, [pc, #452]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6e      	ldr	r2, [pc, #440]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xd4>
 8004ad0:	4b6b      	ldr	r3, [pc, #428]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6a      	ldr	r2, [pc, #424]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b68      	ldr	r3, [pc, #416]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a67      	ldr	r2, [pc, #412]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fe fe7e 	bl	80037f0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe fe7a 	bl	80037f0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1fa      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0xe4>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b18:	f7fe fe6a 	bl	80037f0 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe fe66 	bl	80037f0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e1e6      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x10c>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d063      	beq.n	8004c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4e:	4b4c      	ldr	r3, [pc, #304]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b5a:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d11c      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x18c>
 8004b66:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d116      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_RCC_OscConfig+0x176>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e1ba      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4939      	ldr	r1, [pc, #228]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9e:	e03a      	b.n	8004c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba8:	4b36      	ldr	r3, [pc, #216]	; (8004c84 <HAL_RCC_OscConfig+0x270>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fe fe1f 	bl	80037f0 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fe fe1b 	bl	80037f0 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e19b      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc8:	4b2d      	ldr	r3, [pc, #180]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4927      	ldr	r1, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	e015      	b.n	8004c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bea:	4b26      	ldr	r3, [pc, #152]	; (8004c84 <HAL_RCC_OscConfig+0x270>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fdfe 	bl	80037f0 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fe fdfa 	bl	80037f0 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e17a      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d03a      	beq.n	8004c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d019      	beq.n	8004c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2a:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c30:	f7fe fdde 	bl	80037f0 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c38:	f7fe fdda 	bl	80037f0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e15a      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c56:	2001      	movs	r0, #1
 8004c58:	f000 fad8 	bl	800520c <RCC_Delay>
 8004c5c:	e01c      	b.n	8004c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <HAL_RCC_OscConfig+0x274>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c64:	f7fe fdc4 	bl	80037f0 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6a:	e00f      	b.n	8004c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6c:	f7fe fdc0 	bl	80037f0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d908      	bls.n	8004c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e140      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	42420000 	.word	0x42420000
 8004c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	4b9e      	ldr	r3, [pc, #632]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e9      	bne.n	8004c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a6 	beq.w	8004df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004caa:	4b97      	ldr	r3, [pc, #604]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10d      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb6:	4b94      	ldr	r3, [pc, #592]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4a93      	ldr	r2, [pc, #588]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc0:	61d3      	str	r3, [r2, #28]
 8004cc2:	4b91      	ldr	r3, [pc, #580]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd2:	4b8e      	ldr	r3, [pc, #568]	; (8004f0c <HAL_RCC_OscConfig+0x4f8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d118      	bne.n	8004d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cde:	4b8b      	ldr	r3, [pc, #556]	; (8004f0c <HAL_RCC_OscConfig+0x4f8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a8a      	ldr	r2, [pc, #552]	; (8004f0c <HAL_RCC_OscConfig+0x4f8>)
 8004ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cea:	f7fe fd81 	bl	80037f0 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf2:	f7fe fd7d 	bl	80037f0 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b64      	cmp	r3, #100	; 0x64
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e0fd      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <HAL_RCC_OscConfig+0x4f8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f0      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d106      	bne.n	8004d26 <HAL_RCC_OscConfig+0x312>
 8004d18:	4b7b      	ldr	r3, [pc, #492]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	4a7a      	ldr	r2, [pc, #488]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6213      	str	r3, [r2, #32]
 8004d24:	e02d      	b.n	8004d82 <HAL_RCC_OscConfig+0x36e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x334>
 8004d2e:	4b76      	ldr	r3, [pc, #472]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	6213      	str	r3, [r2, #32]
 8004d3a:	4b73      	ldr	r3, [pc, #460]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	4a72      	ldr	r2, [pc, #456]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	6213      	str	r3, [r2, #32]
 8004d46:	e01c      	b.n	8004d82 <HAL_RCC_OscConfig+0x36e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	d10c      	bne.n	8004d6a <HAL_RCC_OscConfig+0x356>
 8004d50:	4b6d      	ldr	r3, [pc, #436]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	4a6c      	ldr	r2, [pc, #432]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d56:	f043 0304 	orr.w	r3, r3, #4
 8004d5a:	6213      	str	r3, [r2, #32]
 8004d5c:	4b6a      	ldr	r3, [pc, #424]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4a69      	ldr	r2, [pc, #420]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6213      	str	r3, [r2, #32]
 8004d68:	e00b      	b.n	8004d82 <HAL_RCC_OscConfig+0x36e>
 8004d6a:	4b67      	ldr	r3, [pc, #412]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	4a66      	ldr	r2, [pc, #408]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	6213      	str	r3, [r2, #32]
 8004d76:	4b64      	ldr	r3, [pc, #400]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a63      	ldr	r2, [pc, #396]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f023 0304 	bic.w	r3, r3, #4
 8004d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d015      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d8a:	f7fe fd31 	bl	80037f0 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	e00a      	b.n	8004da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d92:	f7fe fd2d 	bl	80037f0 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e0ab      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da8:	4b57      	ldr	r3, [pc, #348]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ee      	beq.n	8004d92 <HAL_RCC_OscConfig+0x37e>
 8004db4:	e014      	b.n	8004de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db6:	f7fe fd1b 	bl	80037f0 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fe fd17 	bl	80037f0 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e095      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd4:	4b4c      	ldr	r3, [pc, #304]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ee      	bne.n	8004dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d105      	bne.n	8004df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de6:	4b48      	ldr	r3, [pc, #288]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4a47      	ldr	r2, [pc, #284]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8081 	beq.w	8004efe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dfc:	4b42      	ldr	r3, [pc, #264]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d061      	beq.n	8004ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d146      	bne.n	8004e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e10:	4b3f      	ldr	r3, [pc, #252]	; (8004f10 <HAL_RCC_OscConfig+0x4fc>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e16:	f7fe fceb 	bl	80037f0 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1e:	f7fe fce7 	bl	80037f0 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e067      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e30:	4b35      	ldr	r3, [pc, #212]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e44:	d108      	bne.n	8004e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e46:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	492d      	ldr	r1, [pc, #180]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a19      	ldr	r1, [r3, #32]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	4927      	ldr	r1, [pc, #156]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e70:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <HAL_RCC_OscConfig+0x4fc>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fe fcbb 	bl	80037f0 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fe fcb7 	bl	80037f0 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e037      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e90:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x46a>
 8004e9c:	e02f      	b.n	8004efe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <HAL_RCC_OscConfig+0x4fc>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fe fca4 	bl	80037f0 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fe fca0 	bl	80037f0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e020      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x498>
 8004eca:	e018      	b.n	8004efe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e013      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d106      	bne.n	8004efa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	42420060 	.word	0x42420060

08004f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0d0      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f28:	4b6a      	ldr	r3, [pc, #424]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d910      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b67      	ldr	r3, [pc, #412]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 0207 	bic.w	r2, r3, #7
 8004f3e:	4965      	ldr	r1, [pc, #404]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0b8      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f70:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a58      	ldr	r2, [pc, #352]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f88:	4b53      	ldr	r3, [pc, #332]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f94:	4b50      	ldr	r3, [pc, #320]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	494d      	ldr	r1, [pc, #308]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d040      	beq.n	8005034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d115      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e07f      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd2:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e073      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06b      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff2:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f023 0203 	bic.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4936      	ldr	r1, [pc, #216]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005004:	f7fe fbf4 	bl	80037f0 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	e00a      	b.n	8005022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500c:	f7fe fbf0 	bl	80037f0 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	; 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e053      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005022:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 020c 	and.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	429a      	cmp	r2, r3
 8005032:	d1eb      	bne.n	800500c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005034:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d210      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b24      	ldr	r3, [pc, #144]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	4922      	ldr	r1, [pc, #136]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e032      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005070:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4916      	ldr	r1, [pc, #88]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800508e:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	490e      	ldr	r1, [pc, #56]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050a2:	f000 f821 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	490a      	ldr	r1, [pc, #40]	; (80050dc <HAL_RCC_ClockConfig+0x1c8>)
 80050b4:	5ccb      	ldrb	r3, [r1, r3]
 80050b6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <HAL_RCC_ClockConfig+0x1cc>)
 80050bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_ClockConfig+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe fb52 	bl	800376c <HAL_InitTick>

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800a400 	.word	0x0800a400
 80050e0:	20000014 	.word	0x20000014
 80050e4:	20000018 	.word	0x20000018

080050e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b490      	push	{r4, r7}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80050ee:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050f0:	1d3c      	adds	r4, r7, #4
 80050f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80050f8:	f240 2301 	movw	r3, #513	; 0x201
 80050fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005112:	4b22      	ldr	r3, [pc, #136]	; (800519c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b04      	cmp	r3, #4
 8005120:	d002      	beq.n	8005128 <HAL_RCC_GetSysClockFreq+0x40>
 8005122:	2b08      	cmp	r3, #8
 8005124:	d003      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x46>
 8005126:	e02d      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800512a:	623b      	str	r3, [r7, #32]
      break;
 800512c:	e02d      	b.n	800518a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	0c9b      	lsrs	r3, r3, #18
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800513a:	4413      	add	r3, r2
 800513c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005140:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800514c:	4b13      	ldr	r3, [pc, #76]	; (800519c <HAL_RCC_GetSysClockFreq+0xb4>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0c5b      	lsrs	r3, r3, #17
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800515a:	4413      	add	r3, r2
 800515c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005160:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4a0e      	ldr	r2, [pc, #56]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005166:	fb02 f203 	mul.w	r2, r2, r3
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	e004      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4a0b      	ldr	r2, [pc, #44]	; (80051a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	623b      	str	r3, [r7, #32]
      break;
 8005182:	e002      	b.n	800518a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005184:	4b06      	ldr	r3, [pc, #24]	; (80051a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005186:	623b      	str	r3, [r7, #32]
      break;
 8005188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800518a:	6a3b      	ldr	r3, [r7, #32]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bc90      	pop	{r4, r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	0800a3e0 	.word	0x0800a3e0
 800519c:	40021000 	.word	0x40021000
 80051a0:	007a1200 	.word	0x007a1200
 80051a4:	003d0900 	.word	0x003d0900

080051a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ac:	4b02      	ldr	r3, [pc, #8]	; (80051b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr
 80051b8:	20000014 	.word	0x20000014

080051bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051c0:	f7ff fff2 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4903      	ldr	r1, [pc, #12]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40021000 	.word	0x40021000
 80051e0:	0800a410 	.word	0x0800a410

080051e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051e8:	f7ff ffde 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051ec:	4602      	mov	r2, r0
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	0adb      	lsrs	r3, r3, #11
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	4903      	ldr	r1, [pc, #12]	; (8005208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051fa:	5ccb      	ldrb	r3, [r1, r3]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000
 8005208:	0800a410 	.word	0x0800a410

0800520c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <RCC_Delay+0x34>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a0a      	ldr	r2, [pc, #40]	; (8005244 <RCC_Delay+0x38>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	0a5b      	lsrs	r3, r3, #9
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005228:	bf00      	nop
  }
  while (Delay --);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1e5a      	subs	r2, r3, #1
 800522e:	60fa      	str	r2, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f9      	bne.n	8005228 <RCC_Delay+0x1c>
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	20000014 	.word	0x20000014
 8005244:	10624dd3 	.word	0x10624dd3

08005248 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d07d      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005264:	2300      	movs	r3, #0
 8005266:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005268:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10d      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005274:	4b4c      	ldr	r3, [pc, #304]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	4a4b      	ldr	r2, [pc, #300]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	61d3      	str	r3, [r2, #28]
 8005280:	4b49      	ldr	r3, [pc, #292]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005290:	4b46      	ldr	r3, [pc, #280]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d118      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529c:	4b43      	ldr	r3, [pc, #268]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a42      	ldr	r2, [pc, #264]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a8:	f7fe faa2 	bl	80037f0 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ae:	e008      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b0:	f7fe fa9e 	bl	80037f0 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e06d      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c2:	4b3a      	ldr	r3, [pc, #232]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ce:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d02e      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d027      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ec:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052f6:	4b2e      	ldr	r3, [pc, #184]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052fc:	4b2c      	ldr	r3, [pc, #176]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005302:	4a29      	ldr	r2, [pc, #164]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d014      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005312:	f7fe fa6d 	bl	80037f0 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005318:	e00a      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800531a:	f7fe fa69 	bl	80037f0 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	f241 3288 	movw	r2, #5000	; 0x1388
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e036      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005330:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0ee      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800533c:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4917      	ldr	r1, [pc, #92]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800534a:	4313      	orrs	r3, r2
 800534c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005354:	4b14      	ldr	r3, [pc, #80]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800536c:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	490b      	ldr	r1, [pc, #44]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	4904      	ldr	r1, [pc, #16]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005398:	4313      	orrs	r3, r2
 800539a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40007000 	.word	0x40007000
 80053b0:	42420440 	.word	0x42420440

080053b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e076      	b.n	80054b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d108      	bne.n	80053e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d6:	d009      	beq.n	80053ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	61da      	str	r2, [r3, #28]
 80053de:	e005      	b.n	80053ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd feee 	bl	80031e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005470:	ea42 0103 	orr.w	r1, r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	0c1a      	lsrs	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f002 0204 	and.w	r2, r2, #4
 8005492:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054cc:	2300      	movs	r3, #0
 80054ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_SPI_Transmit+0x22>
 80054da:	2302      	movs	r3, #2
 80054dc:	e126      	b.n	800572c <HAL_SPI_Transmit+0x270>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e6:	f7fe f983 	bl	80037f0 <HAL_GetTick>
 80054ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
 80054fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005500:	e10b      	b.n	800571a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_Transmit+0x52>
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005512:	e102      	b.n	800571a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2203      	movs	r2, #3
 8005518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555a:	d10f      	bne.n	800557c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d007      	beq.n	800559a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055a2:	d14b      	bne.n	800563c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0xf6>
 80055ac:	8afb      	ldrh	r3, [r7, #22]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d13e      	bne.n	8005630 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055d6:	e02b      	b.n	8005630 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d112      	bne.n	800560c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	881a      	ldrh	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	86da      	strh	r2, [r3, #54]	; 0x36
 800560a:	e011      	b.n	8005630 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560c:	f7fe f8f0 	bl	80037f0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d803      	bhi.n	8005624 <HAL_SPI_Transmit+0x168>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d102      	bne.n	800562a <HAL_SPI_Transmit+0x16e>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d102      	bne.n	8005630 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800562e:	e074      	b.n	800571a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ce      	bne.n	80055d8 <HAL_SPI_Transmit+0x11c>
 800563a:	e04c      	b.n	80056d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_SPI_Transmit+0x18e>
 8005644:	8afb      	ldrh	r3, [r7, #22]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d140      	bne.n	80056cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	330c      	adds	r3, #12
 8005654:	7812      	ldrb	r2, [r2, #0]
 8005656:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005670:	e02c      	b.n	80056cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d113      	bne.n	80056a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	330c      	adds	r3, #12
 800568a:	7812      	ldrb	r2, [r2, #0]
 800568c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80056a6:	e011      	b.n	80056cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a8:	f7fe f8a2 	bl	80037f0 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d803      	bhi.n	80056c0 <HAL_SPI_Transmit+0x204>
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056be:	d102      	bne.n	80056c6 <HAL_SPI_Transmit+0x20a>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ca:	e026      	b.n	800571a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1cd      	bne.n	8005672 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	6839      	ldr	r1, [r7, #0]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fbb8 	bl	8005e50 <SPI_EndRxTxTransaction>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2220      	movs	r2, #32
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	77fb      	strb	r3, [r7, #31]
 8005716:	e000      	b.n	800571a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005718:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800572a:	7ffb      	ldrb	r3, [r7, #31]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	4613      	mov	r3, r2
 8005742:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005750:	d112      	bne.n	8005778 <HAL_SPI_Receive+0x44>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10e      	bne.n	8005778 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2204      	movs	r2, #4
 800575e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f8f1 	bl	8005956 <HAL_SPI_TransmitReceive>
 8005774:	4603      	mov	r3, r0
 8005776:	e0ea      	b.n	800594e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_SPI_Receive+0x52>
 8005782:	2302      	movs	r3, #2
 8005784:	e0e3      	b.n	800594e <HAL_SPI_Receive+0x21a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578e:	f7fe f82f 	bl	80037f0 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b01      	cmp	r3, #1
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
 80057a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057a4:	e0ca      	b.n	800593c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Receive+0x7e>
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057b6:	e0c1      	b.n	800593c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2204      	movs	r2, #4
 80057bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fe:	d10f      	bne.n	8005820 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	d007      	beq.n	800583e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d162      	bne.n	800590c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005846:	e02e      	b.n	80058a6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b01      	cmp	r3, #1
 8005854:	d115      	bne.n	8005882 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f103 020c 	add.w	r2, r3, #12
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005880:	e011      	b.n	80058a6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005882:	f7fd ffb5 	bl	80037f0 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d803      	bhi.n	800589a <HAL_SPI_Receive+0x166>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d102      	bne.n	80058a0 <HAL_SPI_Receive+0x16c>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058a4:	e04a      	b.n	800593c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1cb      	bne.n	8005848 <HAL_SPI_Receive+0x114>
 80058b0:	e031      	b.n	8005916 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0301 	and.w	r3, r3, #1
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d113      	bne.n	80058e8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058e6:	e011      	b.n	800590c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e8:	f7fd ff82 	bl	80037f0 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d803      	bhi.n	8005900 <HAL_SPI_Receive+0x1cc>
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d102      	bne.n	8005906 <HAL_SPI_Receive+0x1d2>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	75fb      	strb	r3, [r7, #23]
          goto error;
 800590a:	e017      	b.n	800593c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1cd      	bne.n	80058b2 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fa46 	bl	8005dac <SPI_EndRxTransaction>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
 8005938:	e000      	b.n	800593c <HAL_SPI_Receive+0x208>
  }

error :
 800593a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b08c      	sub	sp, #48	; 0x30
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
 8005962:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005964:	2301      	movs	r3, #1
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_SPI_TransmitReceive+0x26>
 8005978:	2302      	movs	r3, #2
 800597a:	e18a      	b.n	8005c92 <HAL_SPI_TransmitReceive+0x33c>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005984:	f7fd ff34 	bl	80037f0 <HAL_GetTick>
 8005988:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800599a:	887b      	ldrh	r3, [r7, #2]
 800599c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800599e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d00f      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x70>
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ac:	d107      	bne.n	80059be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <HAL_SPI_TransmitReceive+0x68>
 80059b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d003      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059be:	2302      	movs	r3, #2
 80059c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059c4:	e15b      	b.n	8005c7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x82>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_SPI_TransmitReceive+0x82>
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059de:	e14e      	b.n	8005c7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d003      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2205      	movs	r2, #5
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	887a      	ldrh	r2, [r7, #2]
 8005a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	887a      	ldrh	r2, [r7, #2]
 8005a1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d007      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a50:	d178      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x10a>
 8005a5a:	8b7b      	ldrh	r3, [r7, #26]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d166      	bne.n	8005b2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a84:	e053      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d11b      	bne.n	8005acc <HAL_SPI_TransmitReceive+0x176>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d016      	beq.n	8005acc <HAL_SPI_TransmitReceive+0x176>
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d113      	bne.n	8005acc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d119      	bne.n	8005b0e <HAL_SPI_TransmitReceive+0x1b8>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d014      	beq.n	8005b0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	b292      	uxth	r2, r2
 8005af0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b0e:	f7fd fe6f 	bl	80037f0 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d807      	bhi.n	8005b2e <HAL_SPI_TransmitReceive+0x1d8>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b24:	d003      	beq.n	8005b2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b2c:	e0a7      	b.n	8005c7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1a6      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x130>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1a1      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x130>
 8005b42:	e07c      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <HAL_SPI_TransmitReceive+0x1fc>
 8005b4c:	8b7b      	ldrh	r3, [r7, #26]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d16b      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b78:	e057      	b.n	8005c2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d11c      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x26c>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d017      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x26c>
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d114      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	7812      	ldrb	r2, [r2, #0]
 8005ba4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d119      	bne.n	8005c04 <HAL_SPI_TransmitReceive+0x2ae>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d014      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	b2d2      	uxtb	r2, r2
 8005be6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c00:	2301      	movs	r3, #1
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c04:	f7fd fdf4 	bl	80037f0 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d803      	bhi.n	8005c1c <HAL_SPI_TransmitReceive+0x2c6>
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d102      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x2cc>
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c28:	e029      	b.n	8005c7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1a2      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x224>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d19d      	bne.n	8005b7a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f904 	bl	8005e50 <SPI_EndRxTxTransaction>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d006      	beq.n	8005c5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c5a:	e010      	b.n	8005c7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	e000      	b.n	8005c7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3730      	adds	r7, #48	; 0x30
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cac:	f7fd fda0 	bl	80037f0 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	1a9b      	subs	r3, r3, r2
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cbc:	f7fd fd98 	bl	80037f0 <HAL_GetTick>
 8005cc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cc2:	4b39      	ldr	r3, [pc, #228]	; (8005da8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	015b      	lsls	r3, r3, #5
 8005cc8:	0d1b      	lsrs	r3, r3, #20
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	fb02 f303 	mul.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cd2:	e054      	b.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cda:	d050      	beq.n	8005d7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cdc:	f7fd fd88 	bl	80037f0 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d902      	bls.n	8005cf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d13d      	bne.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d0a:	d111      	bne.n	8005d30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d14:	d004      	beq.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1e:	d107      	bne.n	8005d30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d38:	d10f      	bne.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e017      	b.n	8005d9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4013      	ands	r3, r2
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	bf0c      	ite	eq
 8005d8e:	2301      	moveq	r3, #1
 8005d90:	2300      	movne	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d19b      	bne.n	8005cd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000014 	.word	0x20000014

08005dac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc0:	d111      	bne.n	8005de6 <SPI_EndRxTransaction+0x3a>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dca:	d004      	beq.n	8005dd6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d107      	bne.n	8005de6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dee:	d117      	bne.n	8005e20 <SPI_EndRxTransaction+0x74>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df8:	d112      	bne.n	8005e20 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2200      	movs	r2, #0
 8005e02:	2101      	movs	r1, #1
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff ff49 	bl	8005c9c <SPI_WaitFlagStateUntilTimeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01a      	beq.n	8005e46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	f043 0220 	orr.w	r2, r3, #32
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e013      	b.n	8005e48 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	2180      	movs	r1, #128	; 0x80
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff ff36 	bl	8005c9c <SPI_WaitFlagStateUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	f043 0220 	orr.w	r2, r3, #32
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e000      	b.n	8005e48 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af02      	add	r7, sp, #8
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	2180      	movs	r1, #128	; 0x80
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff ff18 	bl	8005c9c <SPI_WaitFlagStateUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e76:	f043 0220 	orr.w	r2, r3, #32
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e000      	b.n	8005e84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e041      	b.n	8005f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d106      	bne.n	8005eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fd f9e4 	bl	8003280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f000 fa70 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d001      	beq.n	8005f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e03a      	b.n	8005fba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <HAL_TIM_Base_Start_IT+0x98>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x58>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x58>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a14      	ldr	r2, [pc, #80]	; (8005fc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x58>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a13      	ldr	r2, [pc, #76]	; (8005fcc <HAL_TIM_Base_Start_IT+0xa0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d111      	bne.n	8005fa8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d010      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	e007      	b.n	8005fb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40000800 	.word	0x40000800

08005fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d122      	bne.n	800602c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d11b      	bne.n	800602c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0202 	mvn.w	r2, #2
 8005ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f9b1 	bl	800637a <HAL_TIM_IC_CaptureCallback>
 8006018:	e005      	b.n	8006026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f9a4 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f9b3 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b04      	cmp	r3, #4
 8006038:	d122      	bne.n	8006080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d11b      	bne.n	8006080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0204 	mvn.w	r2, #4
 8006050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f987 	bl	800637a <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f97a 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f989 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b08      	cmp	r3, #8
 800608c:	d122      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b08      	cmp	r3, #8
 800609a:	d11b      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0208 	mvn.w	r2, #8
 80060a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f95d 	bl	800637a <HAL_TIM_IC_CaptureCallback>
 80060c0:	e005      	b.n	80060ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f950 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f95f 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d122      	bne.n	8006128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b10      	cmp	r3, #16
 80060ee:	d11b      	bne.n	8006128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0210 	mvn.w	r2, #16
 80060f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2208      	movs	r2, #8
 80060fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f933 	bl	800637a <HAL_TIM_IC_CaptureCallback>
 8006114:	e005      	b.n	8006122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f926 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f935 	bl	800638c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10e      	bne.n	8006154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d107      	bne.n	8006154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f06f 0201 	mvn.w	r2, #1
 800614c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fc fc68 	bl	8002a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d10e      	bne.n	8006180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d107      	bne.n	8006180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa77 	bl	800666e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d10e      	bne.n	80061ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006198:	2b40      	cmp	r3, #64	; 0x40
 800619a:	d107      	bne.n	80061ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f8f9 	bl	800639e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d10e      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d107      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0220 	mvn.w	r2, #32
 80061d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa42 	bl	800665c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_TIM_ConfigClockSource+0x18>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e0b3      	b.n	8006360 <HAL_TIM_ConfigClockSource+0x180>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006216:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800621e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006230:	d03e      	beq.n	80062b0 <HAL_TIM_ConfigClockSource+0xd0>
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	f200 8087 	bhi.w	8006348 <HAL_TIM_ConfigClockSource+0x168>
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623e:	f000 8085 	beq.w	800634c <HAL_TIM_ConfigClockSource+0x16c>
 8006242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006246:	d87f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
 8006248:	2b70      	cmp	r3, #112	; 0x70
 800624a:	d01a      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0xa2>
 800624c:	2b70      	cmp	r3, #112	; 0x70
 800624e:	d87b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
 8006250:	2b60      	cmp	r3, #96	; 0x60
 8006252:	d050      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x116>
 8006254:	2b60      	cmp	r3, #96	; 0x60
 8006256:	d877      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
 8006258:	2b50      	cmp	r3, #80	; 0x50
 800625a:	d03c      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0xf6>
 800625c:	2b50      	cmp	r3, #80	; 0x50
 800625e:	d873      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d058      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x136>
 8006264:	2b40      	cmp	r3, #64	; 0x40
 8006266:	d86f      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d064      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x156>
 800626c:	2b30      	cmp	r3, #48	; 0x30
 800626e:	d86b      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d060      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x156>
 8006274:	2b20      	cmp	r3, #32
 8006276:	d867      	bhi.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d05c      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x156>
 800627c:	2b10      	cmp	r3, #16
 800627e:	d05a      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006280:	e062      	b.n	8006348 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6899      	ldr	r1, [r3, #8]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f000 f966 	bl	8006562 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	609a      	str	r2, [r3, #8]
      break;
 80062ae:	e04e      	b.n	800634e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6899      	ldr	r1, [r3, #8]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f000 f94f 	bl	8006562 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062d2:	609a      	str	r2, [r3, #8]
      break;
 80062d4:	e03b      	b.n	800634e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f000 f8c6 	bl	8006474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2150      	movs	r1, #80	; 0x50
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 f91d 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 80062f4:	e02b      	b.n	800634e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	461a      	mov	r2, r3
 8006304:	f000 f8e4 	bl	80064d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2160      	movs	r1, #96	; 0x60
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f90d 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8006314:	e01b      	b.n	800634e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	461a      	mov	r2, r3
 8006324:	f000 f8a6 	bl	8006474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2140      	movs	r1, #64	; 0x40
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f8fd 	bl	800652e <TIM_ITRx_SetConfig>
      break;
 8006334:	e00b      	b.n	800634e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4619      	mov	r1, r3
 8006340:	4610      	mov	r0, r2
 8006342:	f000 f8f4 	bl	800652e <TIM_ITRx_SetConfig>
        break;
 8006346:	e002      	b.n	800634e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006348:	bf00      	nop
 800634a:	e000      	b.n	800634e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800634c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr

0800638c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr

0800639e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063a6:	bf00      	nop
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a29      	ldr	r2, [pc, #164]	; (8006468 <TIM_Base_SetConfig+0xb8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ce:	d007      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a26      	ldr	r2, [pc, #152]	; (800646c <TIM_Base_SetConfig+0xbc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a25      	ldr	r2, [pc, #148]	; (8006470 <TIM_Base_SetConfig+0xc0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a1c      	ldr	r2, [pc, #112]	; (8006468 <TIM_Base_SetConfig+0xb8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00b      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006400:	d007      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a19      	ldr	r2, [pc, #100]	; (800646c <TIM_Base_SetConfig+0xbc>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a18      	ldr	r2, [pc, #96]	; (8006470 <TIM_Base_SetConfig+0xc0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d108      	bne.n	8006424 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a07      	ldr	r2, [pc, #28]	; (8006468 <TIM_Base_SetConfig+0xb8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d103      	bne.n	8006458 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	615a      	str	r2, [r3, #20]
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800

08006474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 030a 	bic.w	r3, r3, #10
 80064b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	621a      	str	r2, [r3, #32]
}
 80064c6:	bf00      	nop
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	f023 0210 	bic.w	r2, r3, #16
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	031b      	lsls	r3, r3, #12
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800650c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	621a      	str	r2, [r3, #32]
}
 8006524:	bf00      	nop
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	bc80      	pop	{r7}
 800652c:	4770      	bx	lr

0800652e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	f043 0307 	orr.w	r3, r3, #7
 8006550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr

08006562 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006562:	b480      	push	{r7}
 8006564:	b087      	sub	sp, #28
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	021a      	lsls	r2, r3, #8
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	431a      	orrs	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4313      	orrs	r3, r2
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	609a      	str	r2, [r3, #8]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e046      	b.n	8006646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a16      	ldr	r2, [pc, #88]	; (8006650 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00e      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006604:	d009      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a12      	ldr	r2, [pc, #72]	; (8006654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a10      	ldr	r2, [pc, #64]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d10c      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4313      	orrs	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800

0800665c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr

0800666e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e03f      	b.n	8006712 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc fe5e 	bl	8003368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2224      	movs	r2, #36	; 0x24
 80066b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fc63 	bl	8006f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b08a      	sub	sp, #40	; 0x28
 800671e:	af02      	add	r7, sp, #8
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	603b      	str	r3, [r7, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b20      	cmp	r3, #32
 8006738:	d17c      	bne.n	8006834 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <HAL_UART_Transmit+0x2c>
 8006740:	88fb      	ldrh	r3, [r7, #6]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e075      	b.n	8006836 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_UART_Transmit+0x3e>
 8006754:	2302      	movs	r3, #2
 8006756:	e06e      	b.n	8006836 <HAL_UART_Transmit+0x11c>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2221      	movs	r2, #33	; 0x21
 800676a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800676e:	f7fd f83f 	bl	80037f0 <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	88fa      	ldrh	r2, [r7, #6]
 8006778:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	88fa      	ldrh	r2, [r7, #6]
 800677e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006788:	d108      	bne.n	800679c <HAL_UART_Transmit+0x82>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d104      	bne.n	800679c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	e003      	b.n	80067a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80067ac:	e02a      	b.n	8006804 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2200      	movs	r2, #0
 80067b6:	2180      	movs	r1, #128	; 0x80
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fa71 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e036      	b.n	8006836 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	3302      	adds	r3, #2
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e007      	b.n	80067f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	781a      	ldrb	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	3301      	adds	r3, #1
 80067f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1cf      	bne.n	80067ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2200      	movs	r2, #0
 8006816:	2140      	movs	r1, #64	; 0x40
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fa41 	bl	8006ca0 <UART_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e006      	b.n	8006836 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	e000      	b.n	8006836 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006834:	2302      	movs	r3, #2
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b20      	cmp	r3, #32
 8006858:	d166      	bne.n	8006928 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <HAL_UART_Receive_DMA+0x26>
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e05f      	b.n	800692a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_UART_Receive_DMA+0x38>
 8006874:	2302      	movs	r3, #2
 8006876:	e058      	b.n	800692a <HAL_UART_Receive_DMA+0xea>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	88fa      	ldrh	r2, [r7, #6]
 800688a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2222      	movs	r2, #34	; 0x22
 8006896:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	4a25      	ldr	r2, [pc, #148]	; (8006934 <HAL_UART_Receive_DMA+0xf4>)
 80068a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	4a24      	ldr	r2, [pc, #144]	; (8006938 <HAL_UART_Receive_DMA+0xf8>)
 80068a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ae:	4a23      	ldr	r2, [pc, #140]	; (800693c <HAL_UART_Receive_DMA+0xfc>)
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b6:	2200      	movs	r2, #0
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	88fb      	ldrh	r3, [r7, #6]
 80068d2:	f7fd fcdf 	bl	8004294 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006902:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006922:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e000      	b.n	800692a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006928:	2302      	movs	r3, #2
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	08006b89 	.word	0x08006b89
 8006938:	08006bf1 	.word	0x08006bf1
 800693c:	08006c0d 	.word	0x08006c0d

08006940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f003 0320 	and.w	r3, r3, #32
 800697c:	2b00      	cmp	r3, #0
 800697e:	d008      	beq.n	8006992 <HAL_UART_IRQHandler+0x52>
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa7f 	bl	8006e8e <UART_Receive_IT>
      return;
 8006990:	e0d0      	b.n	8006b34 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 80b0 	beq.w	8006afa <HAL_UART_IRQHandler+0x1ba>
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d105      	bne.n	80069b0 <HAL_UART_IRQHandler+0x70>
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 80a5 	beq.w	8006afa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <HAL_UART_IRQHandler+0x90>
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	f043 0201 	orr.w	r2, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <HAL_UART_IRQHandler+0xb0>
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e8:	f043 0202 	orr.w	r2, r3, #2
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <HAL_UART_IRQHandler+0xd0>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a08:	f043 0204 	orr.w	r2, r3, #4
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00f      	beq.n	8006a3a <HAL_UART_IRQHandler+0xfa>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_UART_IRQHandler+0xee>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	f043 0208 	orr.w	r2, r3, #8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d077      	beq.n	8006b32 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_UART_IRQHandler+0x11c>
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa19 	bl	8006e8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	2300      	moveq	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_UART_IRQHandler+0x144>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d031      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f96a 	bl	8006d5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d023      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	695a      	ldr	r2, [r3, #20]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aa6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d013      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab4:	4a21      	ldr	r2, [pc, #132]	; (8006b3c <HAL_UART_IRQHandler+0x1fc>)
 8006ab6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd fc49 	bl	8004354 <HAL_DMA_Abort_IT>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d016      	beq.n	8006af6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad6:	e00e      	b.n	8006af6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f84c 	bl	8006b76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ade:	e00a      	b.n	8006af6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f848 	bl	8006b76 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae6:	e006      	b.n	8006af6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f844 	bl	8006b76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006af4:	e01d      	b.n	8006b32 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af6:	bf00      	nop
    return;
 8006af8:	e01b      	b.n	8006b32 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <HAL_UART_IRQHandler+0x1d6>
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d003      	beq.n	8006b16 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f956 	bl	8006dc0 <UART_Transmit_IT>
    return;
 8006b14:	e00e      	b.n	8006b34 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d009      	beq.n	8006b34 <HAL_UART_IRQHandler+0x1f4>
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f997 	bl	8006e5e <UART_EndTransmit_IT>
    return;
 8006b30:	e000      	b.n	8006b34 <HAL_UART_IRQHandler+0x1f4>
    return;
 8006b32:	bf00      	nop
  }
}
 8006b34:	3720      	adds	r7, #32
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08006d99 	.word	0x08006d99

08006b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr

08006b52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bc80      	pop	{r7}
 8006b62:	4770      	bx	lr

08006b64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr

08006b76 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d11e      	bne.n	8006be2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695a      	ldr	r2, [r3, #20]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695a      	ldr	r2, [r3, #20]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff ffb5 	bl	8006b52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff ffb0 	bl	8006b64 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c04:	bf00      	nop
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b21      	cmp	r3, #33	; 0x21
 8006c3e:	d108      	bne.n	8006c52 <UART_DMAError+0x46>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006c4c:	68b8      	ldr	r0, [r7, #8]
 8006c4e:	f000 f871 	bl	8006d34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bf14      	ite	ne
 8006c60:	2301      	movne	r3, #1
 8006c62:	2300      	moveq	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b22      	cmp	r3, #34	; 0x22
 8006c72:	d108      	bne.n	8006c86 <UART_DMAError+0x7a>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c80:	68b8      	ldr	r0, [r7, #8]
 8006c82:	f000 f86c 	bl	8006d5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	f043 0210 	orr.w	r2, r3, #16
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c92:	68b8      	ldr	r0, [r7, #8]
 8006c94:	f7ff ff6f 	bl	8006b76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c98:	bf00      	nop
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cb0:	e02c      	b.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d028      	beq.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cc0:	f7fc fd96 	bl	80037f0 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d21d      	bcs.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695a      	ldr	r2, [r3, #20]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0201 	bic.w	r2, r2, #1
 8006cee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2220      	movs	r2, #32
 8006cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e00f      	b.n	8006d2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	bf0c      	ite	eq
 8006d1c:	2301      	moveq	r3, #1
 8006d1e:	2300      	movne	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d0c3      	beq.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006d4a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr

08006d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff fedf 	bl	8006b76 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b21      	cmp	r3, #33	; 0x21
 8006dd2:	d13e      	bne.n	8006e52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ddc:	d114      	bne.n	8006e08 <UART_Transmit_IT+0x48>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d110      	bne.n	8006e08 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dfa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	621a      	str	r2, [r3, #32]
 8006e06:	e008      	b.n	8006e1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	1c59      	adds	r1, r3, #1
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6211      	str	r1, [r2, #32]
 8006e12:	781a      	ldrb	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	4619      	mov	r1, r3
 8006e28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10f      	bne.n	8006e4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e000      	b.n	8006e54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e52:	2302      	movs	r3, #2
  }
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr

08006e5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fe5e 	bl	8006b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b084      	sub	sp, #16
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b22      	cmp	r3, #34	; 0x22
 8006ea0:	d170      	bne.n	8006f84 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eaa:	d117      	bne.n	8006edc <UART_Receive_IT+0x4e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d113      	bne.n	8006edc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed4:	1c9a      	adds	r2, r3, #2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8006eda:	e026      	b.n	8006f2a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eee:	d007      	beq.n	8006f00 <UART_Receive_IT+0x72>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <UART_Receive_IT+0x80>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e008      	b.n	8006f20 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	4619      	mov	r1, r3
 8006f38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d120      	bne.n	8006f80 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0220 	bic.w	r2, r2, #32
 8006f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	695a      	ldr	r2, [r3, #20]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff fdeb 	bl	8006b52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e002      	b.n	8006f86 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e000      	b.n	8006f86 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8006f84:	2302      	movs	r3, #2
  }
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006fca:	f023 030c 	bic.w	r3, r3, #12
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2c      	ldr	r2, [pc, #176]	; (80070a4 <UART_SetConfig+0x114>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d103      	bne.n	8007000 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ff8:	f7fe f8f4 	bl	80051e4 <HAL_RCC_GetPCLK2Freq>
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	e002      	b.n	8007006 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007000:	f7fe f8dc 	bl	80051bc <HAL_RCC_GetPCLK1Freq>
 8007004:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009a      	lsls	r2, r3, #2
 8007010:	441a      	add	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	fbb2 f3f3 	udiv	r3, r2, r3
 800701c:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <UART_SetConfig+0x118>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	0119      	lsls	r1, r3, #4
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009a      	lsls	r2, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	fbb2 f2f3 	udiv	r2, r2, r3
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <UART_SetConfig+0x118>)
 800703e:	fba3 0302 	umull	r0, r3, r3, r2
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	2064      	movs	r0, #100	; 0x64
 8007046:	fb00 f303 	mul.w	r3, r0, r3
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	011b      	lsls	r3, r3, #4
 800704e:	3332      	adds	r3, #50	; 0x32
 8007050:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <UART_SetConfig+0x118>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800705c:	4419      	add	r1, r3
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009a      	lsls	r2, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	fbb2 f2f3 	udiv	r2, r2, r3
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <UART_SetConfig+0x118>)
 8007076:	fba3 0302 	umull	r0, r3, r3, r2
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	2064      	movs	r0, #100	; 0x64
 800707e:	fb00 f303 	mul.w	r3, r0, r3
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	3332      	adds	r3, #50	; 0x32
 8007088:	4a07      	ldr	r2, [pc, #28]	; (80070a8 <UART_SetConfig+0x118>)
 800708a:	fba2 2303 	umull	r2, r3, r2, r3
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	f003 020f 	and.w	r2, r3, #15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	440a      	add	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	40013800 	.word	0x40013800
 80070a8:	51eb851f 	.word	0x51eb851f

080070ac <__errno>:
 80070ac:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <__errno+0x8>)
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	20000020 	.word	0x20000020

080070b8 <__libc_init_array>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	2600      	movs	r6, #0
 80070bc:	4d0c      	ldr	r5, [pc, #48]	; (80070f0 <__libc_init_array+0x38>)
 80070be:	4c0d      	ldr	r4, [pc, #52]	; (80070f4 <__libc_init_array+0x3c>)
 80070c0:	1b64      	subs	r4, r4, r5
 80070c2:	10a4      	asrs	r4, r4, #2
 80070c4:	42a6      	cmp	r6, r4
 80070c6:	d109      	bne.n	80070dc <__libc_init_array+0x24>
 80070c8:	f002 feba 	bl	8009e40 <_init>
 80070cc:	2600      	movs	r6, #0
 80070ce:	4d0a      	ldr	r5, [pc, #40]	; (80070f8 <__libc_init_array+0x40>)
 80070d0:	4c0a      	ldr	r4, [pc, #40]	; (80070fc <__libc_init_array+0x44>)
 80070d2:	1b64      	subs	r4, r4, r5
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	42a6      	cmp	r6, r4
 80070d8:	d105      	bne.n	80070e6 <__libc_init_array+0x2e>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80070e0:	4798      	blx	r3
 80070e2:	3601      	adds	r6, #1
 80070e4:	e7ee      	b.n	80070c4 <__libc_init_array+0xc>
 80070e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ea:	4798      	blx	r3
 80070ec:	3601      	adds	r6, #1
 80070ee:	e7f2      	b.n	80070d6 <__libc_init_array+0x1e>
 80070f0:	0800a7fc 	.word	0x0800a7fc
 80070f4:	0800a7fc 	.word	0x0800a7fc
 80070f8:	0800a7fc 	.word	0x0800a7fc
 80070fc:	0800a800 	.word	0x0800a800

08007100 <memcpy>:
 8007100:	440a      	add	r2, r1
 8007102:	4291      	cmp	r1, r2
 8007104:	f100 33ff 	add.w	r3, r0, #4294967295
 8007108:	d100      	bne.n	800710c <memcpy+0xc>
 800710a:	4770      	bx	lr
 800710c:	b510      	push	{r4, lr}
 800710e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007112:	4291      	cmp	r1, r2
 8007114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007118:	d1f9      	bne.n	800710e <memcpy+0xe>
 800711a:	bd10      	pop	{r4, pc}

0800711c <memset>:
 800711c:	4603      	mov	r3, r0
 800711e:	4402      	add	r2, r0
 8007120:	4293      	cmp	r3, r2
 8007122:	d100      	bne.n	8007126 <memset+0xa>
 8007124:	4770      	bx	lr
 8007126:	f803 1b01 	strb.w	r1, [r3], #1
 800712a:	e7f9      	b.n	8007120 <memset+0x4>

0800712c <__cvt>:
 800712c:	2b00      	cmp	r3, #0
 800712e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007132:	461f      	mov	r7, r3
 8007134:	bfbb      	ittet	lt
 8007136:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800713a:	461f      	movlt	r7, r3
 800713c:	2300      	movge	r3, #0
 800713e:	232d      	movlt	r3, #45	; 0x2d
 8007140:	b088      	sub	sp, #32
 8007142:	4614      	mov	r4, r2
 8007144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007146:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007148:	7013      	strb	r3, [r2, #0]
 800714a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800714c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007150:	f023 0820 	bic.w	r8, r3, #32
 8007154:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007158:	d005      	beq.n	8007166 <__cvt+0x3a>
 800715a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800715e:	d100      	bne.n	8007162 <__cvt+0x36>
 8007160:	3501      	adds	r5, #1
 8007162:	2302      	movs	r3, #2
 8007164:	e000      	b.n	8007168 <__cvt+0x3c>
 8007166:	2303      	movs	r3, #3
 8007168:	aa07      	add	r2, sp, #28
 800716a:	9204      	str	r2, [sp, #16]
 800716c:	aa06      	add	r2, sp, #24
 800716e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007172:	e9cd 3500 	strd	r3, r5, [sp]
 8007176:	4622      	mov	r2, r4
 8007178:	463b      	mov	r3, r7
 800717a:	f000 fce5 	bl	8007b48 <_dtoa_r>
 800717e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007182:	4606      	mov	r6, r0
 8007184:	d102      	bne.n	800718c <__cvt+0x60>
 8007186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007188:	07db      	lsls	r3, r3, #31
 800718a:	d522      	bpl.n	80071d2 <__cvt+0xa6>
 800718c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007190:	eb06 0905 	add.w	r9, r6, r5
 8007194:	d110      	bne.n	80071b8 <__cvt+0x8c>
 8007196:	7833      	ldrb	r3, [r6, #0]
 8007198:	2b30      	cmp	r3, #48	; 0x30
 800719a:	d10a      	bne.n	80071b2 <__cvt+0x86>
 800719c:	2200      	movs	r2, #0
 800719e:	2300      	movs	r3, #0
 80071a0:	4620      	mov	r0, r4
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 fc00 	bl	80009a8 <__aeabi_dcmpeq>
 80071a8:	b918      	cbnz	r0, 80071b2 <__cvt+0x86>
 80071aa:	f1c5 0501 	rsb	r5, r5, #1
 80071ae:	f8ca 5000 	str.w	r5, [sl]
 80071b2:	f8da 3000 	ldr.w	r3, [sl]
 80071b6:	4499      	add	r9, r3
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	4620      	mov	r0, r4
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fbf2 	bl	80009a8 <__aeabi_dcmpeq>
 80071c4:	b108      	cbz	r0, 80071ca <__cvt+0x9e>
 80071c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80071ca:	2230      	movs	r2, #48	; 0x30
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	454b      	cmp	r3, r9
 80071d0:	d307      	bcc.n	80071e2 <__cvt+0xb6>
 80071d2:	4630      	mov	r0, r6
 80071d4:	9b07      	ldr	r3, [sp, #28]
 80071d6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071d8:	1b9b      	subs	r3, r3, r6
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	b008      	add	sp, #32
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	1c59      	adds	r1, r3, #1
 80071e4:	9107      	str	r1, [sp, #28]
 80071e6:	701a      	strb	r2, [r3, #0]
 80071e8:	e7f0      	b.n	80071cc <__cvt+0xa0>

080071ea <__exponent>:
 80071ea:	4603      	mov	r3, r0
 80071ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ee:	2900      	cmp	r1, #0
 80071f0:	f803 2b02 	strb.w	r2, [r3], #2
 80071f4:	bfb6      	itet	lt
 80071f6:	222d      	movlt	r2, #45	; 0x2d
 80071f8:	222b      	movge	r2, #43	; 0x2b
 80071fa:	4249      	neglt	r1, r1
 80071fc:	2909      	cmp	r1, #9
 80071fe:	7042      	strb	r2, [r0, #1]
 8007200:	dd2b      	ble.n	800725a <__exponent+0x70>
 8007202:	f10d 0407 	add.w	r4, sp, #7
 8007206:	46a4      	mov	ip, r4
 8007208:	270a      	movs	r7, #10
 800720a:	fb91 f6f7 	sdiv	r6, r1, r7
 800720e:	460a      	mov	r2, r1
 8007210:	46a6      	mov	lr, r4
 8007212:	fb07 1516 	mls	r5, r7, r6, r1
 8007216:	2a63      	cmp	r2, #99	; 0x63
 8007218:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800721c:	4631      	mov	r1, r6
 800721e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007222:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007226:	dcf0      	bgt.n	800720a <__exponent+0x20>
 8007228:	3130      	adds	r1, #48	; 0x30
 800722a:	f1ae 0502 	sub.w	r5, lr, #2
 800722e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007232:	4629      	mov	r1, r5
 8007234:	1c44      	adds	r4, r0, #1
 8007236:	4561      	cmp	r1, ip
 8007238:	d30a      	bcc.n	8007250 <__exponent+0x66>
 800723a:	f10d 0209 	add.w	r2, sp, #9
 800723e:	eba2 020e 	sub.w	r2, r2, lr
 8007242:	4565      	cmp	r5, ip
 8007244:	bf88      	it	hi
 8007246:	2200      	movhi	r2, #0
 8007248:	4413      	add	r3, r2
 800724a:	1a18      	subs	r0, r3, r0
 800724c:	b003      	add	sp, #12
 800724e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007250:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007254:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007258:	e7ed      	b.n	8007236 <__exponent+0x4c>
 800725a:	2330      	movs	r3, #48	; 0x30
 800725c:	3130      	adds	r1, #48	; 0x30
 800725e:	7083      	strb	r3, [r0, #2]
 8007260:	70c1      	strb	r1, [r0, #3]
 8007262:	1d03      	adds	r3, r0, #4
 8007264:	e7f1      	b.n	800724a <__exponent+0x60>
	...

08007268 <_printf_float>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	b091      	sub	sp, #68	; 0x44
 800726e:	460c      	mov	r4, r1
 8007270:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007274:	4616      	mov	r6, r2
 8007276:	461f      	mov	r7, r3
 8007278:	4605      	mov	r5, r0
 800727a:	f001 fa53 	bl	8008724 <_localeconv_r>
 800727e:	6803      	ldr	r3, [r0, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	9309      	str	r3, [sp, #36]	; 0x24
 8007284:	f7f8 ff64 	bl	8000150 <strlen>
 8007288:	2300      	movs	r3, #0
 800728a:	930e      	str	r3, [sp, #56]	; 0x38
 800728c:	f8d8 3000 	ldr.w	r3, [r8]
 8007290:	900a      	str	r0, [sp, #40]	; 0x28
 8007292:	3307      	adds	r3, #7
 8007294:	f023 0307 	bic.w	r3, r3, #7
 8007298:	f103 0208 	add.w	r2, r3, #8
 800729c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80072a0:	f8d4 b000 	ldr.w	fp, [r4]
 80072a4:	f8c8 2000 	str.w	r2, [r8]
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072b0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80072b4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80072b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80072ba:	f04f 32ff 	mov.w	r2, #4294967295
 80072be:	4640      	mov	r0, r8
 80072c0:	4b9c      	ldr	r3, [pc, #624]	; (8007534 <_printf_float+0x2cc>)
 80072c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072c4:	f7f9 fba2 	bl	8000a0c <__aeabi_dcmpun>
 80072c8:	bb70      	cbnz	r0, 8007328 <_printf_float+0xc0>
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295
 80072ce:	4640      	mov	r0, r8
 80072d0:	4b98      	ldr	r3, [pc, #608]	; (8007534 <_printf_float+0x2cc>)
 80072d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072d4:	f7f9 fb7c 	bl	80009d0 <__aeabi_dcmple>
 80072d8:	bb30      	cbnz	r0, 8007328 <_printf_float+0xc0>
 80072da:	2200      	movs	r2, #0
 80072dc:	2300      	movs	r3, #0
 80072de:	4640      	mov	r0, r8
 80072e0:	4651      	mov	r1, sl
 80072e2:	f7f9 fb6b 	bl	80009bc <__aeabi_dcmplt>
 80072e6:	b110      	cbz	r0, 80072ee <_printf_float+0x86>
 80072e8:	232d      	movs	r3, #45	; 0x2d
 80072ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ee:	4b92      	ldr	r3, [pc, #584]	; (8007538 <_printf_float+0x2d0>)
 80072f0:	4892      	ldr	r0, [pc, #584]	; (800753c <_printf_float+0x2d4>)
 80072f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80072f6:	bf94      	ite	ls
 80072f8:	4698      	movls	r8, r3
 80072fa:	4680      	movhi	r8, r0
 80072fc:	2303      	movs	r3, #3
 80072fe:	f04f 0a00 	mov.w	sl, #0
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	f02b 0304 	bic.w	r3, fp, #4
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	4633      	mov	r3, r6
 800730c:	4621      	mov	r1, r4
 800730e:	4628      	mov	r0, r5
 8007310:	9700      	str	r7, [sp, #0]
 8007312:	aa0f      	add	r2, sp, #60	; 0x3c
 8007314:	f000 f9d4 	bl	80076c0 <_printf_common>
 8007318:	3001      	adds	r0, #1
 800731a:	f040 8090 	bne.w	800743e <_printf_float+0x1d6>
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	b011      	add	sp, #68	; 0x44
 8007324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	4642      	mov	r2, r8
 800732a:	4653      	mov	r3, sl
 800732c:	4640      	mov	r0, r8
 800732e:	4651      	mov	r1, sl
 8007330:	f7f9 fb6c 	bl	8000a0c <__aeabi_dcmpun>
 8007334:	b148      	cbz	r0, 800734a <_printf_float+0xe2>
 8007336:	f1ba 0f00 	cmp.w	sl, #0
 800733a:	bfb8      	it	lt
 800733c:	232d      	movlt	r3, #45	; 0x2d
 800733e:	4880      	ldr	r0, [pc, #512]	; (8007540 <_printf_float+0x2d8>)
 8007340:	bfb8      	it	lt
 8007342:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007346:	4b7f      	ldr	r3, [pc, #508]	; (8007544 <_printf_float+0x2dc>)
 8007348:	e7d3      	b.n	80072f2 <_printf_float+0x8a>
 800734a:	6863      	ldr	r3, [r4, #4]
 800734c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	d142      	bne.n	80073da <_printf_float+0x172>
 8007354:	2306      	movs	r3, #6
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	9206      	str	r2, [sp, #24]
 800735c:	aa0e      	add	r2, sp, #56	; 0x38
 800735e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007362:	aa0d      	add	r2, sp, #52	; 0x34
 8007364:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007368:	9203      	str	r2, [sp, #12]
 800736a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800736e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007372:	6023      	str	r3, [r4, #0]
 8007374:	6863      	ldr	r3, [r4, #4]
 8007376:	4642      	mov	r2, r8
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4628      	mov	r0, r5
 800737c:	4653      	mov	r3, sl
 800737e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007380:	f7ff fed4 	bl	800712c <__cvt>
 8007384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007386:	4680      	mov	r8, r0
 8007388:	2947      	cmp	r1, #71	; 0x47
 800738a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800738c:	d108      	bne.n	80073a0 <_printf_float+0x138>
 800738e:	1cc8      	adds	r0, r1, #3
 8007390:	db02      	blt.n	8007398 <_printf_float+0x130>
 8007392:	6863      	ldr	r3, [r4, #4]
 8007394:	4299      	cmp	r1, r3
 8007396:	dd40      	ble.n	800741a <_printf_float+0x1b2>
 8007398:	f1a9 0902 	sub.w	r9, r9, #2
 800739c:	fa5f f989 	uxtb.w	r9, r9
 80073a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073a4:	d81f      	bhi.n	80073e6 <_printf_float+0x17e>
 80073a6:	464a      	mov	r2, r9
 80073a8:	3901      	subs	r1, #1
 80073aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073ae:	910d      	str	r1, [sp, #52]	; 0x34
 80073b0:	f7ff ff1b 	bl	80071ea <__exponent>
 80073b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073b6:	4682      	mov	sl, r0
 80073b8:	1813      	adds	r3, r2, r0
 80073ba:	2a01      	cmp	r2, #1
 80073bc:	6123      	str	r3, [r4, #16]
 80073be:	dc02      	bgt.n	80073c6 <_printf_float+0x15e>
 80073c0:	6822      	ldr	r2, [r4, #0]
 80073c2:	07d2      	lsls	r2, r2, #31
 80073c4:	d501      	bpl.n	80073ca <_printf_float+0x162>
 80073c6:	3301      	adds	r3, #1
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d09b      	beq.n	800730a <_printf_float+0xa2>
 80073d2:	232d      	movs	r3, #45	; 0x2d
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d8:	e797      	b.n	800730a <_printf_float+0xa2>
 80073da:	2947      	cmp	r1, #71	; 0x47
 80073dc:	d1bc      	bne.n	8007358 <_printf_float+0xf0>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1ba      	bne.n	8007358 <_printf_float+0xf0>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e7b7      	b.n	8007356 <_printf_float+0xee>
 80073e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80073ea:	d118      	bne.n	800741e <_printf_float+0x1b6>
 80073ec:	2900      	cmp	r1, #0
 80073ee:	6863      	ldr	r3, [r4, #4]
 80073f0:	dd0b      	ble.n	800740a <_printf_float+0x1a2>
 80073f2:	6121      	str	r1, [r4, #16]
 80073f4:	b913      	cbnz	r3, 80073fc <_printf_float+0x194>
 80073f6:	6822      	ldr	r2, [r4, #0]
 80073f8:	07d0      	lsls	r0, r2, #31
 80073fa:	d502      	bpl.n	8007402 <_printf_float+0x19a>
 80073fc:	3301      	adds	r3, #1
 80073fe:	440b      	add	r3, r1
 8007400:	6123      	str	r3, [r4, #16]
 8007402:	f04f 0a00 	mov.w	sl, #0
 8007406:	65a1      	str	r1, [r4, #88]	; 0x58
 8007408:	e7df      	b.n	80073ca <_printf_float+0x162>
 800740a:	b913      	cbnz	r3, 8007412 <_printf_float+0x1aa>
 800740c:	6822      	ldr	r2, [r4, #0]
 800740e:	07d2      	lsls	r2, r2, #31
 8007410:	d501      	bpl.n	8007416 <_printf_float+0x1ae>
 8007412:	3302      	adds	r3, #2
 8007414:	e7f4      	b.n	8007400 <_printf_float+0x198>
 8007416:	2301      	movs	r3, #1
 8007418:	e7f2      	b.n	8007400 <_printf_float+0x198>
 800741a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800741e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007420:	4299      	cmp	r1, r3
 8007422:	db05      	blt.n	8007430 <_printf_float+0x1c8>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	6121      	str	r1, [r4, #16]
 8007428:	07d8      	lsls	r0, r3, #31
 800742a:	d5ea      	bpl.n	8007402 <_printf_float+0x19a>
 800742c:	1c4b      	adds	r3, r1, #1
 800742e:	e7e7      	b.n	8007400 <_printf_float+0x198>
 8007430:	2900      	cmp	r1, #0
 8007432:	bfcc      	ite	gt
 8007434:	2201      	movgt	r2, #1
 8007436:	f1c1 0202 	rsble	r2, r1, #2
 800743a:	4413      	add	r3, r2
 800743c:	e7e0      	b.n	8007400 <_printf_float+0x198>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	055a      	lsls	r2, r3, #21
 8007442:	d407      	bmi.n	8007454 <_printf_float+0x1ec>
 8007444:	6923      	ldr	r3, [r4, #16]
 8007446:	4642      	mov	r2, r8
 8007448:	4631      	mov	r1, r6
 800744a:	4628      	mov	r0, r5
 800744c:	47b8      	blx	r7
 800744e:	3001      	adds	r0, #1
 8007450:	d12b      	bne.n	80074aa <_printf_float+0x242>
 8007452:	e764      	b.n	800731e <_printf_float+0xb6>
 8007454:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007458:	f240 80dd 	bls.w	8007616 <_printf_float+0x3ae>
 800745c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007460:	2200      	movs	r2, #0
 8007462:	2300      	movs	r3, #0
 8007464:	f7f9 faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8007468:	2800      	cmp	r0, #0
 800746a:	d033      	beq.n	80074d4 <_printf_float+0x26c>
 800746c:	2301      	movs	r3, #1
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	4a35      	ldr	r2, [pc, #212]	; (8007548 <_printf_float+0x2e0>)
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f af51 	beq.w	800731e <_printf_float+0xb6>
 800747c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007480:	429a      	cmp	r2, r3
 8007482:	db02      	blt.n	800748a <_printf_float+0x222>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07d8      	lsls	r0, r3, #31
 8007488:	d50f      	bpl.n	80074aa <_printf_float+0x242>
 800748a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800748e:	4631      	mov	r1, r6
 8007490:	4628      	mov	r0, r5
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	f43f af42 	beq.w	800731e <_printf_float+0xb6>
 800749a:	f04f 0800 	mov.w	r8, #0
 800749e:	f104 091a 	add.w	r9, r4, #26
 80074a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a4:	3b01      	subs	r3, #1
 80074a6:	4543      	cmp	r3, r8
 80074a8:	dc09      	bgt.n	80074be <_printf_float+0x256>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	079b      	lsls	r3, r3, #30
 80074ae:	f100 8102 	bmi.w	80076b6 <_printf_float+0x44e>
 80074b2:	68e0      	ldr	r0, [r4, #12]
 80074b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074b6:	4298      	cmp	r0, r3
 80074b8:	bfb8      	it	lt
 80074ba:	4618      	movlt	r0, r3
 80074bc:	e731      	b.n	8007322 <_printf_float+0xba>
 80074be:	2301      	movs	r3, #1
 80074c0:	464a      	mov	r2, r9
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	f43f af28 	beq.w	800731e <_printf_float+0xb6>
 80074ce:	f108 0801 	add.w	r8, r8, #1
 80074d2:	e7e6      	b.n	80074a2 <_printf_float+0x23a>
 80074d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	dc38      	bgt.n	800754c <_printf_float+0x2e4>
 80074da:	2301      	movs	r3, #1
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	4a19      	ldr	r2, [pc, #100]	; (8007548 <_printf_float+0x2e0>)
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f af1a 	beq.w	800731e <_printf_float+0xb6>
 80074ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80074ee:	4313      	orrs	r3, r2
 80074f0:	d102      	bne.n	80074f8 <_printf_float+0x290>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	07d9      	lsls	r1, r3, #31
 80074f6:	d5d8      	bpl.n	80074aa <_printf_float+0x242>
 80074f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	f43f af0b 	beq.w	800731e <_printf_float+0xb6>
 8007508:	f04f 0900 	mov.w	r9, #0
 800750c:	f104 0a1a 	add.w	sl, r4, #26
 8007510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007512:	425b      	negs	r3, r3
 8007514:	454b      	cmp	r3, r9
 8007516:	dc01      	bgt.n	800751c <_printf_float+0x2b4>
 8007518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800751a:	e794      	b.n	8007446 <_printf_float+0x1de>
 800751c:	2301      	movs	r3, #1
 800751e:	4652      	mov	r2, sl
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	f43f aef9 	beq.w	800731e <_printf_float+0xb6>
 800752c:	f109 0901 	add.w	r9, r9, #1
 8007530:	e7ee      	b.n	8007510 <_printf_float+0x2a8>
 8007532:	bf00      	nop
 8007534:	7fefffff 	.word	0x7fefffff
 8007538:	0800a41c 	.word	0x0800a41c
 800753c:	0800a420 	.word	0x0800a420
 8007540:	0800a428 	.word	0x0800a428
 8007544:	0800a424 	.word	0x0800a424
 8007548:	0800a42c 	.word	0x0800a42c
 800754c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800754e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007550:	429a      	cmp	r2, r3
 8007552:	bfa8      	it	ge
 8007554:	461a      	movge	r2, r3
 8007556:	2a00      	cmp	r2, #0
 8007558:	4691      	mov	r9, r2
 800755a:	dc37      	bgt.n	80075cc <_printf_float+0x364>
 800755c:	f04f 0b00 	mov.w	fp, #0
 8007560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007564:	f104 021a 	add.w	r2, r4, #26
 8007568:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800756c:	ebaa 0309 	sub.w	r3, sl, r9
 8007570:	455b      	cmp	r3, fp
 8007572:	dc33      	bgt.n	80075dc <_printf_float+0x374>
 8007574:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007578:	429a      	cmp	r2, r3
 800757a:	db3b      	blt.n	80075f4 <_printf_float+0x38c>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	07da      	lsls	r2, r3, #31
 8007580:	d438      	bmi.n	80075f4 <_printf_float+0x38c>
 8007582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007584:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007586:	eba2 030a 	sub.w	r3, r2, sl
 800758a:	eba2 0901 	sub.w	r9, r2, r1
 800758e:	4599      	cmp	r9, r3
 8007590:	bfa8      	it	ge
 8007592:	4699      	movge	r9, r3
 8007594:	f1b9 0f00 	cmp.w	r9, #0
 8007598:	dc34      	bgt.n	8007604 <_printf_float+0x39c>
 800759a:	f04f 0800 	mov.w	r8, #0
 800759e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075a2:	f104 0a1a 	add.w	sl, r4, #26
 80075a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	eba3 0309 	sub.w	r3, r3, r9
 80075b0:	4543      	cmp	r3, r8
 80075b2:	f77f af7a 	ble.w	80074aa <_printf_float+0x242>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4652      	mov	r2, sl
 80075ba:	4631      	mov	r1, r6
 80075bc:	4628      	mov	r0, r5
 80075be:	47b8      	blx	r7
 80075c0:	3001      	adds	r0, #1
 80075c2:	f43f aeac 	beq.w	800731e <_printf_float+0xb6>
 80075c6:	f108 0801 	add.w	r8, r8, #1
 80075ca:	e7ec      	b.n	80075a6 <_printf_float+0x33e>
 80075cc:	4613      	mov	r3, r2
 80075ce:	4631      	mov	r1, r6
 80075d0:	4642      	mov	r2, r8
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	d1c0      	bne.n	800755c <_printf_float+0x2f4>
 80075da:	e6a0      	b.n	800731e <_printf_float+0xb6>
 80075dc:	2301      	movs	r3, #1
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	f43f ae99 	beq.w	800731e <_printf_float+0xb6>
 80075ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075ee:	f10b 0b01 	add.w	fp, fp, #1
 80075f2:	e7b9      	b.n	8007568 <_printf_float+0x300>
 80075f4:	4631      	mov	r1, r6
 80075f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075fa:	4628      	mov	r0, r5
 80075fc:	47b8      	blx	r7
 80075fe:	3001      	adds	r0, #1
 8007600:	d1bf      	bne.n	8007582 <_printf_float+0x31a>
 8007602:	e68c      	b.n	800731e <_printf_float+0xb6>
 8007604:	464b      	mov	r3, r9
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	eb08 020a 	add.w	r2, r8, sl
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	d1c2      	bne.n	800759a <_printf_float+0x332>
 8007614:	e683      	b.n	800731e <_printf_float+0xb6>
 8007616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007618:	2a01      	cmp	r2, #1
 800761a:	dc01      	bgt.n	8007620 <_printf_float+0x3b8>
 800761c:	07db      	lsls	r3, r3, #31
 800761e:	d537      	bpl.n	8007690 <_printf_float+0x428>
 8007620:	2301      	movs	r3, #1
 8007622:	4642      	mov	r2, r8
 8007624:	4631      	mov	r1, r6
 8007626:	4628      	mov	r0, r5
 8007628:	47b8      	blx	r7
 800762a:	3001      	adds	r0, #1
 800762c:	f43f ae77 	beq.w	800731e <_printf_float+0xb6>
 8007630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007634:	4631      	mov	r1, r6
 8007636:	4628      	mov	r0, r5
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f ae6f 	beq.w	800731e <_printf_float+0xb6>
 8007640:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007644:	2200      	movs	r2, #0
 8007646:	2300      	movs	r3, #0
 8007648:	f7f9 f9ae 	bl	80009a8 <__aeabi_dcmpeq>
 800764c:	b9d8      	cbnz	r0, 8007686 <_printf_float+0x41e>
 800764e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007650:	f108 0201 	add.w	r2, r8, #1
 8007654:	3b01      	subs	r3, #1
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	d10e      	bne.n	800767e <_printf_float+0x416>
 8007660:	e65d      	b.n	800731e <_printf_float+0xb6>
 8007662:	2301      	movs	r3, #1
 8007664:	464a      	mov	r2, r9
 8007666:	4631      	mov	r1, r6
 8007668:	4628      	mov	r0, r5
 800766a:	47b8      	blx	r7
 800766c:	3001      	adds	r0, #1
 800766e:	f43f ae56 	beq.w	800731e <_printf_float+0xb6>
 8007672:	f108 0801 	add.w	r8, r8, #1
 8007676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007678:	3b01      	subs	r3, #1
 800767a:	4543      	cmp	r3, r8
 800767c:	dcf1      	bgt.n	8007662 <_printf_float+0x3fa>
 800767e:	4653      	mov	r3, sl
 8007680:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007684:	e6e0      	b.n	8007448 <_printf_float+0x1e0>
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	f104 091a 	add.w	r9, r4, #26
 800768e:	e7f2      	b.n	8007676 <_printf_float+0x40e>
 8007690:	2301      	movs	r3, #1
 8007692:	4642      	mov	r2, r8
 8007694:	e7df      	b.n	8007656 <_printf_float+0x3ee>
 8007696:	2301      	movs	r3, #1
 8007698:	464a      	mov	r2, r9
 800769a:	4631      	mov	r1, r6
 800769c:	4628      	mov	r0, r5
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	f43f ae3c 	beq.w	800731e <_printf_float+0xb6>
 80076a6:	f108 0801 	add.w	r8, r8, #1
 80076aa:	68e3      	ldr	r3, [r4, #12]
 80076ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076ae:	1a5b      	subs	r3, r3, r1
 80076b0:	4543      	cmp	r3, r8
 80076b2:	dcf0      	bgt.n	8007696 <_printf_float+0x42e>
 80076b4:	e6fd      	b.n	80074b2 <_printf_float+0x24a>
 80076b6:	f04f 0800 	mov.w	r8, #0
 80076ba:	f104 0919 	add.w	r9, r4, #25
 80076be:	e7f4      	b.n	80076aa <_printf_float+0x442>

080076c0 <_printf_common>:
 80076c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c4:	4616      	mov	r6, r2
 80076c6:	4699      	mov	r9, r3
 80076c8:	688a      	ldr	r2, [r1, #8]
 80076ca:	690b      	ldr	r3, [r1, #16]
 80076cc:	4607      	mov	r7, r0
 80076ce:	4293      	cmp	r3, r2
 80076d0:	bfb8      	it	lt
 80076d2:	4613      	movlt	r3, r2
 80076d4:	6033      	str	r3, [r6, #0]
 80076d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076da:	460c      	mov	r4, r1
 80076dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e0:	b10a      	cbz	r2, 80076e6 <_printf_common+0x26>
 80076e2:	3301      	adds	r3, #1
 80076e4:	6033      	str	r3, [r6, #0]
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	0699      	lsls	r1, r3, #26
 80076ea:	bf42      	ittt	mi
 80076ec:	6833      	ldrmi	r3, [r6, #0]
 80076ee:	3302      	addmi	r3, #2
 80076f0:	6033      	strmi	r3, [r6, #0]
 80076f2:	6825      	ldr	r5, [r4, #0]
 80076f4:	f015 0506 	ands.w	r5, r5, #6
 80076f8:	d106      	bne.n	8007708 <_printf_common+0x48>
 80076fa:	f104 0a19 	add.w	sl, r4, #25
 80076fe:	68e3      	ldr	r3, [r4, #12]
 8007700:	6832      	ldr	r2, [r6, #0]
 8007702:	1a9b      	subs	r3, r3, r2
 8007704:	42ab      	cmp	r3, r5
 8007706:	dc28      	bgt.n	800775a <_printf_common+0x9a>
 8007708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800770c:	1e13      	subs	r3, r2, #0
 800770e:	6822      	ldr	r2, [r4, #0]
 8007710:	bf18      	it	ne
 8007712:	2301      	movne	r3, #1
 8007714:	0692      	lsls	r2, r2, #26
 8007716:	d42d      	bmi.n	8007774 <_printf_common+0xb4>
 8007718:	4649      	mov	r1, r9
 800771a:	4638      	mov	r0, r7
 800771c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007720:	47c0      	blx	r8
 8007722:	3001      	adds	r0, #1
 8007724:	d020      	beq.n	8007768 <_printf_common+0xa8>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	68e5      	ldr	r5, [r4, #12]
 800772a:	f003 0306 	and.w	r3, r3, #6
 800772e:	2b04      	cmp	r3, #4
 8007730:	bf18      	it	ne
 8007732:	2500      	movne	r5, #0
 8007734:	6832      	ldr	r2, [r6, #0]
 8007736:	f04f 0600 	mov.w	r6, #0
 800773a:	68a3      	ldr	r3, [r4, #8]
 800773c:	bf08      	it	eq
 800773e:	1aad      	subeq	r5, r5, r2
 8007740:	6922      	ldr	r2, [r4, #16]
 8007742:	bf08      	it	eq
 8007744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007748:	4293      	cmp	r3, r2
 800774a:	bfc4      	itt	gt
 800774c:	1a9b      	subgt	r3, r3, r2
 800774e:	18ed      	addgt	r5, r5, r3
 8007750:	341a      	adds	r4, #26
 8007752:	42b5      	cmp	r5, r6
 8007754:	d11a      	bne.n	800778c <_printf_common+0xcc>
 8007756:	2000      	movs	r0, #0
 8007758:	e008      	b.n	800776c <_printf_common+0xac>
 800775a:	2301      	movs	r3, #1
 800775c:	4652      	mov	r2, sl
 800775e:	4649      	mov	r1, r9
 8007760:	4638      	mov	r0, r7
 8007762:	47c0      	blx	r8
 8007764:	3001      	adds	r0, #1
 8007766:	d103      	bne.n	8007770 <_printf_common+0xb0>
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007770:	3501      	adds	r5, #1
 8007772:	e7c4      	b.n	80076fe <_printf_common+0x3e>
 8007774:	2030      	movs	r0, #48	; 0x30
 8007776:	18e1      	adds	r1, r4, r3
 8007778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007782:	4422      	add	r2, r4
 8007784:	3302      	adds	r3, #2
 8007786:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800778a:	e7c5      	b.n	8007718 <_printf_common+0x58>
 800778c:	2301      	movs	r3, #1
 800778e:	4622      	mov	r2, r4
 8007790:	4649      	mov	r1, r9
 8007792:	4638      	mov	r0, r7
 8007794:	47c0      	blx	r8
 8007796:	3001      	adds	r0, #1
 8007798:	d0e6      	beq.n	8007768 <_printf_common+0xa8>
 800779a:	3601      	adds	r6, #1
 800779c:	e7d9      	b.n	8007752 <_printf_common+0x92>
	...

080077a0 <_printf_i>:
 80077a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	460c      	mov	r4, r1
 80077a6:	7e27      	ldrb	r7, [r4, #24]
 80077a8:	4691      	mov	r9, r2
 80077aa:	2f78      	cmp	r7, #120	; 0x78
 80077ac:	4680      	mov	r8, r0
 80077ae:	469a      	mov	sl, r3
 80077b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077b6:	d807      	bhi.n	80077c8 <_printf_i+0x28>
 80077b8:	2f62      	cmp	r7, #98	; 0x62
 80077ba:	d80a      	bhi.n	80077d2 <_printf_i+0x32>
 80077bc:	2f00      	cmp	r7, #0
 80077be:	f000 80d9 	beq.w	8007974 <_printf_i+0x1d4>
 80077c2:	2f58      	cmp	r7, #88	; 0x58
 80077c4:	f000 80a4 	beq.w	8007910 <_printf_i+0x170>
 80077c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077d0:	e03a      	b.n	8007848 <_printf_i+0xa8>
 80077d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077d6:	2b15      	cmp	r3, #21
 80077d8:	d8f6      	bhi.n	80077c8 <_printf_i+0x28>
 80077da:	a001      	add	r0, pc, #4	; (adr r0, 80077e0 <_printf_i+0x40>)
 80077dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80077e0:	08007839 	.word	0x08007839
 80077e4:	0800784d 	.word	0x0800784d
 80077e8:	080077c9 	.word	0x080077c9
 80077ec:	080077c9 	.word	0x080077c9
 80077f0:	080077c9 	.word	0x080077c9
 80077f4:	080077c9 	.word	0x080077c9
 80077f8:	0800784d 	.word	0x0800784d
 80077fc:	080077c9 	.word	0x080077c9
 8007800:	080077c9 	.word	0x080077c9
 8007804:	080077c9 	.word	0x080077c9
 8007808:	080077c9 	.word	0x080077c9
 800780c:	0800795b 	.word	0x0800795b
 8007810:	0800787d 	.word	0x0800787d
 8007814:	0800793d 	.word	0x0800793d
 8007818:	080077c9 	.word	0x080077c9
 800781c:	080077c9 	.word	0x080077c9
 8007820:	0800797d 	.word	0x0800797d
 8007824:	080077c9 	.word	0x080077c9
 8007828:	0800787d 	.word	0x0800787d
 800782c:	080077c9 	.word	0x080077c9
 8007830:	080077c9 	.word	0x080077c9
 8007834:	08007945 	.word	0x08007945
 8007838:	680b      	ldr	r3, [r1, #0]
 800783a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	600a      	str	r2, [r1, #0]
 8007844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007848:	2301      	movs	r3, #1
 800784a:	e0a4      	b.n	8007996 <_printf_i+0x1f6>
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	6808      	ldr	r0, [r1, #0]
 8007850:	062e      	lsls	r6, r5, #24
 8007852:	f100 0304 	add.w	r3, r0, #4
 8007856:	d50a      	bpl.n	800786e <_printf_i+0xce>
 8007858:	6805      	ldr	r5, [r0, #0]
 800785a:	600b      	str	r3, [r1, #0]
 800785c:	2d00      	cmp	r5, #0
 800785e:	da03      	bge.n	8007868 <_printf_i+0xc8>
 8007860:	232d      	movs	r3, #45	; 0x2d
 8007862:	426d      	negs	r5, r5
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007868:	230a      	movs	r3, #10
 800786a:	485e      	ldr	r0, [pc, #376]	; (80079e4 <_printf_i+0x244>)
 800786c:	e019      	b.n	80078a2 <_printf_i+0x102>
 800786e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007872:	6805      	ldr	r5, [r0, #0]
 8007874:	600b      	str	r3, [r1, #0]
 8007876:	bf18      	it	ne
 8007878:	b22d      	sxthne	r5, r5
 800787a:	e7ef      	b.n	800785c <_printf_i+0xbc>
 800787c:	680b      	ldr	r3, [r1, #0]
 800787e:	6825      	ldr	r5, [r4, #0]
 8007880:	1d18      	adds	r0, r3, #4
 8007882:	6008      	str	r0, [r1, #0]
 8007884:	0628      	lsls	r0, r5, #24
 8007886:	d501      	bpl.n	800788c <_printf_i+0xec>
 8007888:	681d      	ldr	r5, [r3, #0]
 800788a:	e002      	b.n	8007892 <_printf_i+0xf2>
 800788c:	0669      	lsls	r1, r5, #25
 800788e:	d5fb      	bpl.n	8007888 <_printf_i+0xe8>
 8007890:	881d      	ldrh	r5, [r3, #0]
 8007892:	2f6f      	cmp	r7, #111	; 0x6f
 8007894:	bf0c      	ite	eq
 8007896:	2308      	moveq	r3, #8
 8007898:	230a      	movne	r3, #10
 800789a:	4852      	ldr	r0, [pc, #328]	; (80079e4 <_printf_i+0x244>)
 800789c:	2100      	movs	r1, #0
 800789e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078a2:	6866      	ldr	r6, [r4, #4]
 80078a4:	2e00      	cmp	r6, #0
 80078a6:	bfa8      	it	ge
 80078a8:	6821      	ldrge	r1, [r4, #0]
 80078aa:	60a6      	str	r6, [r4, #8]
 80078ac:	bfa4      	itt	ge
 80078ae:	f021 0104 	bicge.w	r1, r1, #4
 80078b2:	6021      	strge	r1, [r4, #0]
 80078b4:	b90d      	cbnz	r5, 80078ba <_printf_i+0x11a>
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d04d      	beq.n	8007956 <_printf_i+0x1b6>
 80078ba:	4616      	mov	r6, r2
 80078bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80078c0:	fb03 5711 	mls	r7, r3, r1, r5
 80078c4:	5dc7      	ldrb	r7, [r0, r7]
 80078c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078ca:	462f      	mov	r7, r5
 80078cc:	42bb      	cmp	r3, r7
 80078ce:	460d      	mov	r5, r1
 80078d0:	d9f4      	bls.n	80078bc <_printf_i+0x11c>
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d10b      	bne.n	80078ee <_printf_i+0x14e>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	07df      	lsls	r7, r3, #31
 80078da:	d508      	bpl.n	80078ee <_printf_i+0x14e>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	6861      	ldr	r1, [r4, #4]
 80078e0:	4299      	cmp	r1, r3
 80078e2:	bfde      	ittt	le
 80078e4:	2330      	movle	r3, #48	; 0x30
 80078e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078ee:	1b92      	subs	r2, r2, r6
 80078f0:	6122      	str	r2, [r4, #16]
 80078f2:	464b      	mov	r3, r9
 80078f4:	4621      	mov	r1, r4
 80078f6:	4640      	mov	r0, r8
 80078f8:	f8cd a000 	str.w	sl, [sp]
 80078fc:	aa03      	add	r2, sp, #12
 80078fe:	f7ff fedf 	bl	80076c0 <_printf_common>
 8007902:	3001      	adds	r0, #1
 8007904:	d14c      	bne.n	80079a0 <_printf_i+0x200>
 8007906:	f04f 30ff 	mov.w	r0, #4294967295
 800790a:	b004      	add	sp, #16
 800790c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007910:	4834      	ldr	r0, [pc, #208]	; (80079e4 <_printf_i+0x244>)
 8007912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007916:	680e      	ldr	r6, [r1, #0]
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	f856 5b04 	ldr.w	r5, [r6], #4
 800791e:	061f      	lsls	r7, r3, #24
 8007920:	600e      	str	r6, [r1, #0]
 8007922:	d514      	bpl.n	800794e <_printf_i+0x1ae>
 8007924:	07d9      	lsls	r1, r3, #31
 8007926:	bf44      	itt	mi
 8007928:	f043 0320 	orrmi.w	r3, r3, #32
 800792c:	6023      	strmi	r3, [r4, #0]
 800792e:	b91d      	cbnz	r5, 8007938 <_printf_i+0x198>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	f023 0320 	bic.w	r3, r3, #32
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	2310      	movs	r3, #16
 800793a:	e7af      	b.n	800789c <_printf_i+0xfc>
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	f043 0320 	orr.w	r3, r3, #32
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	2378      	movs	r3, #120	; 0x78
 8007946:	4828      	ldr	r0, [pc, #160]	; (80079e8 <_printf_i+0x248>)
 8007948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800794c:	e7e3      	b.n	8007916 <_printf_i+0x176>
 800794e:	065e      	lsls	r6, r3, #25
 8007950:	bf48      	it	mi
 8007952:	b2ad      	uxthmi	r5, r5
 8007954:	e7e6      	b.n	8007924 <_printf_i+0x184>
 8007956:	4616      	mov	r6, r2
 8007958:	e7bb      	b.n	80078d2 <_printf_i+0x132>
 800795a:	680b      	ldr	r3, [r1, #0]
 800795c:	6826      	ldr	r6, [r4, #0]
 800795e:	1d1d      	adds	r5, r3, #4
 8007960:	6960      	ldr	r0, [r4, #20]
 8007962:	600d      	str	r5, [r1, #0]
 8007964:	0635      	lsls	r5, r6, #24
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	d501      	bpl.n	800796e <_printf_i+0x1ce>
 800796a:	6018      	str	r0, [r3, #0]
 800796c:	e002      	b.n	8007974 <_printf_i+0x1d4>
 800796e:	0671      	lsls	r1, r6, #25
 8007970:	d5fb      	bpl.n	800796a <_printf_i+0x1ca>
 8007972:	8018      	strh	r0, [r3, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	4616      	mov	r6, r2
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	e7ba      	b.n	80078f2 <_printf_i+0x152>
 800797c:	680b      	ldr	r3, [r1, #0]
 800797e:	1d1a      	adds	r2, r3, #4
 8007980:	600a      	str	r2, [r1, #0]
 8007982:	681e      	ldr	r6, [r3, #0]
 8007984:	2100      	movs	r1, #0
 8007986:	4630      	mov	r0, r6
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	f000 fed7 	bl	800873c <memchr>
 800798e:	b108      	cbz	r0, 8007994 <_printf_i+0x1f4>
 8007990:	1b80      	subs	r0, r0, r6
 8007992:	6060      	str	r0, [r4, #4]
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	2300      	movs	r3, #0
 800799a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800799e:	e7a8      	b.n	80078f2 <_printf_i+0x152>
 80079a0:	4632      	mov	r2, r6
 80079a2:	4649      	mov	r1, r9
 80079a4:	4640      	mov	r0, r8
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	47d0      	blx	sl
 80079aa:	3001      	adds	r0, #1
 80079ac:	d0ab      	beq.n	8007906 <_printf_i+0x166>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	079b      	lsls	r3, r3, #30
 80079b2:	d413      	bmi.n	80079dc <_printf_i+0x23c>
 80079b4:	68e0      	ldr	r0, [r4, #12]
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	4298      	cmp	r0, r3
 80079ba:	bfb8      	it	lt
 80079bc:	4618      	movlt	r0, r3
 80079be:	e7a4      	b.n	800790a <_printf_i+0x16a>
 80079c0:	2301      	movs	r3, #1
 80079c2:	4632      	mov	r2, r6
 80079c4:	4649      	mov	r1, r9
 80079c6:	4640      	mov	r0, r8
 80079c8:	47d0      	blx	sl
 80079ca:	3001      	adds	r0, #1
 80079cc:	d09b      	beq.n	8007906 <_printf_i+0x166>
 80079ce:	3501      	adds	r5, #1
 80079d0:	68e3      	ldr	r3, [r4, #12]
 80079d2:	9903      	ldr	r1, [sp, #12]
 80079d4:	1a5b      	subs	r3, r3, r1
 80079d6:	42ab      	cmp	r3, r5
 80079d8:	dcf2      	bgt.n	80079c0 <_printf_i+0x220>
 80079da:	e7eb      	b.n	80079b4 <_printf_i+0x214>
 80079dc:	2500      	movs	r5, #0
 80079de:	f104 0619 	add.w	r6, r4, #25
 80079e2:	e7f5      	b.n	80079d0 <_printf_i+0x230>
 80079e4:	0800a42e 	.word	0x0800a42e
 80079e8:	0800a43f 	.word	0x0800a43f

080079ec <siprintf>:
 80079ec:	b40e      	push	{r1, r2, r3}
 80079ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079f2:	b500      	push	{lr}
 80079f4:	b09c      	sub	sp, #112	; 0x70
 80079f6:	ab1d      	add	r3, sp, #116	; 0x74
 80079f8:	9002      	str	r0, [sp, #8]
 80079fa:	9006      	str	r0, [sp, #24]
 80079fc:	9107      	str	r1, [sp, #28]
 80079fe:	9104      	str	r1, [sp, #16]
 8007a00:	4808      	ldr	r0, [pc, #32]	; (8007a24 <siprintf+0x38>)
 8007a02:	4909      	ldr	r1, [pc, #36]	; (8007a28 <siprintf+0x3c>)
 8007a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a08:	9105      	str	r1, [sp, #20]
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	a902      	add	r1, sp, #8
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	f001 fb34 	bl	800907c <_svfiprintf_r>
 8007a14:	2200      	movs	r2, #0
 8007a16:	9b02      	ldr	r3, [sp, #8]
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	b01c      	add	sp, #112	; 0x70
 8007a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a20:	b003      	add	sp, #12
 8007a22:	4770      	bx	lr
 8007a24:	20000020 	.word	0x20000020
 8007a28:	ffff0208 	.word	0xffff0208

08007a2c <quorem>:
 8007a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	6903      	ldr	r3, [r0, #16]
 8007a32:	690c      	ldr	r4, [r1, #16]
 8007a34:	4607      	mov	r7, r0
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	f2c0 8083 	blt.w	8007b42 <quorem+0x116>
 8007a3c:	3c01      	subs	r4, #1
 8007a3e:	f100 0514 	add.w	r5, r0, #20
 8007a42:	f101 0814 	add.w	r8, r1, #20
 8007a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a4a:	9301      	str	r3, [sp, #4]
 8007a4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a54:	3301      	adds	r3, #1
 8007a56:	429a      	cmp	r2, r3
 8007a58:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a64:	d332      	bcc.n	8007acc <quorem+0xa0>
 8007a66:	f04f 0e00 	mov.w	lr, #0
 8007a6a:	4640      	mov	r0, r8
 8007a6c:	46ac      	mov	ip, r5
 8007a6e:	46f2      	mov	sl, lr
 8007a70:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a74:	b293      	uxth	r3, r2
 8007a76:	fb06 e303 	mla	r3, r6, r3, lr
 8007a7a:	0c12      	lsrs	r2, r2, #16
 8007a7c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a80:	fb06 e202 	mla	r2, r6, r2, lr
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	ebaa 0303 	sub.w	r3, sl, r3
 8007a8a:	f8dc a000 	ldr.w	sl, [ip]
 8007a8e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a92:	fa1f fa8a 	uxth.w	sl, sl
 8007a96:	4453      	add	r3, sl
 8007a98:	fa1f fa82 	uxth.w	sl, r2
 8007a9c:	f8dc 2000 	ldr.w	r2, [ip]
 8007aa0:	4581      	cmp	r9, r0
 8007aa2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007aa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ab0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ab4:	f84c 3b04 	str.w	r3, [ip], #4
 8007ab8:	d2da      	bcs.n	8007a70 <quorem+0x44>
 8007aba:	f855 300b 	ldr.w	r3, [r5, fp]
 8007abe:	b92b      	cbnz	r3, 8007acc <quorem+0xa0>
 8007ac0:	9b01      	ldr	r3, [sp, #4]
 8007ac2:	3b04      	subs	r3, #4
 8007ac4:	429d      	cmp	r5, r3
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	d32f      	bcc.n	8007b2a <quorem+0xfe>
 8007aca:	613c      	str	r4, [r7, #16]
 8007acc:	4638      	mov	r0, r7
 8007ace:	f001 f8bd 	bl	8008c4c <__mcmp>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	db25      	blt.n	8007b22 <quorem+0xf6>
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f04f 0c00 	mov.w	ip, #0
 8007adc:	3601      	adds	r6, #1
 8007ade:	f858 1b04 	ldr.w	r1, [r8], #4
 8007ae2:	f8d0 e000 	ldr.w	lr, [r0]
 8007ae6:	b28b      	uxth	r3, r1
 8007ae8:	ebac 0303 	sub.w	r3, ip, r3
 8007aec:	fa1f f28e 	uxth.w	r2, lr
 8007af0:	4413      	add	r3, r2
 8007af2:	0c0a      	lsrs	r2, r1, #16
 8007af4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007af8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b02:	45c1      	cmp	r9, r8
 8007b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b08:	f840 3b04 	str.w	r3, [r0], #4
 8007b0c:	d2e7      	bcs.n	8007ade <quorem+0xb2>
 8007b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b16:	b922      	cbnz	r2, 8007b22 <quorem+0xf6>
 8007b18:	3b04      	subs	r3, #4
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	d30a      	bcc.n	8007b36 <quorem+0x10a>
 8007b20:	613c      	str	r4, [r7, #16]
 8007b22:	4630      	mov	r0, r6
 8007b24:	b003      	add	sp, #12
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	6812      	ldr	r2, [r2, #0]
 8007b2c:	3b04      	subs	r3, #4
 8007b2e:	2a00      	cmp	r2, #0
 8007b30:	d1cb      	bne.n	8007aca <quorem+0x9e>
 8007b32:	3c01      	subs	r4, #1
 8007b34:	e7c6      	b.n	8007ac4 <quorem+0x98>
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	3b04      	subs	r3, #4
 8007b3a:	2a00      	cmp	r2, #0
 8007b3c:	d1f0      	bne.n	8007b20 <quorem+0xf4>
 8007b3e:	3c01      	subs	r4, #1
 8007b40:	e7eb      	b.n	8007b1a <quorem+0xee>
 8007b42:	2000      	movs	r0, #0
 8007b44:	e7ee      	b.n	8007b24 <quorem+0xf8>
	...

08007b48 <_dtoa_r>:
 8007b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	461f      	mov	r7, r3
 8007b50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b52:	b099      	sub	sp, #100	; 0x64
 8007b54:	4605      	mov	r5, r0
 8007b56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007b5e:	b974      	cbnz	r4, 8007b7e <_dtoa_r+0x36>
 8007b60:	2010      	movs	r0, #16
 8007b62:	f000 fde3 	bl	800872c <malloc>
 8007b66:	4602      	mov	r2, r0
 8007b68:	6268      	str	r0, [r5, #36]	; 0x24
 8007b6a:	b920      	cbnz	r0, 8007b76 <_dtoa_r+0x2e>
 8007b6c:	21ea      	movs	r1, #234	; 0xea
 8007b6e:	4bae      	ldr	r3, [pc, #696]	; (8007e28 <_dtoa_r+0x2e0>)
 8007b70:	48ae      	ldr	r0, [pc, #696]	; (8007e2c <_dtoa_r+0x2e4>)
 8007b72:	f001 fb93 	bl	800929c <__assert_func>
 8007b76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b7a:	6004      	str	r4, [r0, #0]
 8007b7c:	60c4      	str	r4, [r0, #12]
 8007b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b80:	6819      	ldr	r1, [r3, #0]
 8007b82:	b151      	cbz	r1, 8007b9a <_dtoa_r+0x52>
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	2301      	movs	r3, #1
 8007b88:	4093      	lsls	r3, r2
 8007b8a:	604a      	str	r2, [r1, #4]
 8007b8c:	608b      	str	r3, [r1, #8]
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f000 fe22 	bl	80087d8 <_Bfree>
 8007b94:	2200      	movs	r2, #0
 8007b96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	1e3b      	subs	r3, r7, #0
 8007b9c:	bfaf      	iteee	ge
 8007b9e:	2300      	movge	r3, #0
 8007ba0:	2201      	movlt	r2, #1
 8007ba2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ba6:	9305      	strlt	r3, [sp, #20]
 8007ba8:	bfa8      	it	ge
 8007baa:	f8c8 3000 	strge.w	r3, [r8]
 8007bae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007bb2:	4b9f      	ldr	r3, [pc, #636]	; (8007e30 <_dtoa_r+0x2e8>)
 8007bb4:	bfb8      	it	lt
 8007bb6:	f8c8 2000 	strlt.w	r2, [r8]
 8007bba:	ea33 0309 	bics.w	r3, r3, r9
 8007bbe:	d119      	bne.n	8007bf4 <_dtoa_r+0xac>
 8007bc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bc4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bcc:	4333      	orrs	r3, r6
 8007bce:	f000 8580 	beq.w	80086d2 <_dtoa_r+0xb8a>
 8007bd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007bd4:	b953      	cbnz	r3, 8007bec <_dtoa_r+0xa4>
 8007bd6:	4b97      	ldr	r3, [pc, #604]	; (8007e34 <_dtoa_r+0x2ec>)
 8007bd8:	e022      	b.n	8007c20 <_dtoa_r+0xd8>
 8007bda:	4b97      	ldr	r3, [pc, #604]	; (8007e38 <_dtoa_r+0x2f0>)
 8007bdc:	9308      	str	r3, [sp, #32]
 8007bde:	3308      	adds	r3, #8
 8007be0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	9808      	ldr	r0, [sp, #32]
 8007be6:	b019      	add	sp, #100	; 0x64
 8007be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bec:	4b91      	ldr	r3, [pc, #580]	; (8007e34 <_dtoa_r+0x2ec>)
 8007bee:	9308      	str	r3, [sp, #32]
 8007bf0:	3303      	adds	r3, #3
 8007bf2:	e7f5      	b.n	8007be0 <_dtoa_r+0x98>
 8007bf4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007bf8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007bfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c00:	2200      	movs	r2, #0
 8007c02:	2300      	movs	r3, #0
 8007c04:	f7f8 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8007c08:	4680      	mov	r8, r0
 8007c0a:	b158      	cbz	r0, 8007c24 <_dtoa_r+0xdc>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8559 	beq.w	80086cc <_dtoa_r+0xb84>
 8007c1a:	4888      	ldr	r0, [pc, #544]	; (8007e3c <_dtoa_r+0x2f4>)
 8007c1c:	6018      	str	r0, [r3, #0]
 8007c1e:	1e43      	subs	r3, r0, #1
 8007c20:	9308      	str	r3, [sp, #32]
 8007c22:	e7df      	b.n	8007be4 <_dtoa_r+0x9c>
 8007c24:	ab16      	add	r3, sp, #88	; 0x58
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	ab17      	add	r3, sp, #92	; 0x5c
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c32:	f001 f8b7 	bl	8008da4 <__d2b>
 8007c36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007c3a:	4682      	mov	sl, r0
 8007c3c:	2c00      	cmp	r4, #0
 8007c3e:	d07e      	beq.n	8007d3e <_dtoa_r+0x1f6>
 8007c40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c46:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007c52:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007c56:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4b78      	ldr	r3, [pc, #480]	; (8007e40 <_dtoa_r+0x2f8>)
 8007c5e:	f7f8 fa83 	bl	8000168 <__aeabi_dsub>
 8007c62:	a36b      	add	r3, pc, #428	; (adr r3, 8007e10 <_dtoa_r+0x2c8>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f7f8 fc36 	bl	80004d8 <__aeabi_dmul>
 8007c6c:	a36a      	add	r3, pc, #424	; (adr r3, 8007e18 <_dtoa_r+0x2d0>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	f7f8 fa7b 	bl	800016c <__adddf3>
 8007c76:	4606      	mov	r6, r0
 8007c78:	4620      	mov	r0, r4
 8007c7a:	460f      	mov	r7, r1
 8007c7c:	f7f8 fbc2 	bl	8000404 <__aeabi_i2d>
 8007c80:	a367      	add	r3, pc, #412	; (adr r3, 8007e20 <_dtoa_r+0x2d8>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fc27 	bl	80004d8 <__aeabi_dmul>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4630      	mov	r0, r6
 8007c90:	4639      	mov	r1, r7
 8007c92:	f7f8 fa6b 	bl	800016c <__adddf3>
 8007c96:	4606      	mov	r6, r0
 8007c98:	460f      	mov	r7, r1
 8007c9a:	f7f8 fecd 	bl	8000a38 <__aeabi_d2iz>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	4681      	mov	r9, r0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 fe88 	bl	80009bc <__aeabi_dcmplt>
 8007cac:	b148      	cbz	r0, 8007cc2 <_dtoa_r+0x17a>
 8007cae:	4648      	mov	r0, r9
 8007cb0:	f7f8 fba8 	bl	8000404 <__aeabi_i2d>
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	f7f8 fe76 	bl	80009a8 <__aeabi_dcmpeq>
 8007cbc:	b908      	cbnz	r0, 8007cc2 <_dtoa_r+0x17a>
 8007cbe:	f109 39ff 	add.w	r9, r9, #4294967295
 8007cc2:	f1b9 0f16 	cmp.w	r9, #22
 8007cc6:	d857      	bhi.n	8007d78 <_dtoa_r+0x230>
 8007cc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ccc:	4b5d      	ldr	r3, [pc, #372]	; (8007e44 <_dtoa_r+0x2fc>)
 8007cce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd6:	f7f8 fe71 	bl	80009bc <__aeabi_dcmplt>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d04e      	beq.n	8007d7c <_dtoa_r+0x234>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ce8:	1b1c      	subs	r4, r3, r4
 8007cea:	1e63      	subs	r3, r4, #1
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	bf49      	itett	mi
 8007cf0:	f1c4 0301 	rsbmi	r3, r4, #1
 8007cf4:	2300      	movpl	r3, #0
 8007cf6:	9306      	strmi	r3, [sp, #24]
 8007cf8:	2300      	movmi	r3, #0
 8007cfa:	bf54      	ite	pl
 8007cfc:	9306      	strpl	r3, [sp, #24]
 8007cfe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	db3c      	blt.n	8007d80 <_dtoa_r+0x238>
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007d0c:	444b      	add	r3, r9
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	2300      	movs	r3, #0
 8007d12:	930a      	str	r3, [sp, #40]	; 0x28
 8007d14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d16:	2b09      	cmp	r3, #9
 8007d18:	d86c      	bhi.n	8007df4 <_dtoa_r+0x2ac>
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	bfc4      	itt	gt
 8007d1e:	3b04      	subgt	r3, #4
 8007d20:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d24:	bfc8      	it	gt
 8007d26:	2400      	movgt	r4, #0
 8007d28:	f1a3 0302 	sub.w	r3, r3, #2
 8007d2c:	bfd8      	it	le
 8007d2e:	2401      	movle	r4, #1
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	f200 808b 	bhi.w	8007e4c <_dtoa_r+0x304>
 8007d36:	e8df f003 	tbb	[pc, r3]
 8007d3a:	4f2d      	.short	0x4f2d
 8007d3c:	5b4d      	.short	0x5b4d
 8007d3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007d42:	441c      	add	r4, r3
 8007d44:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	bfc3      	ittte	gt
 8007d4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007d54:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d58:	f1c3 0320 	rsble	r3, r3, #32
 8007d5c:	bfc6      	itte	gt
 8007d5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d62:	4318      	orrgt	r0, r3
 8007d64:	fa06 f003 	lslle.w	r0, r6, r3
 8007d68:	f7f8 fb3c 	bl	80003e4 <__aeabi_ui2d>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007d72:	3c01      	subs	r4, #1
 8007d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d76:	e770      	b.n	8007c5a <_dtoa_r+0x112>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e7b3      	b.n	8007ce4 <_dtoa_r+0x19c>
 8007d7c:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d7e:	e7b2      	b.n	8007ce6 <_dtoa_r+0x19e>
 8007d80:	9b06      	ldr	r3, [sp, #24]
 8007d82:	eba3 0309 	sub.w	r3, r3, r9
 8007d86:	9306      	str	r3, [sp, #24]
 8007d88:	f1c9 0300 	rsb	r3, r9, #0
 8007d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8e:	2300      	movs	r3, #0
 8007d90:	930e      	str	r3, [sp, #56]	; 0x38
 8007d92:	e7bf      	b.n	8007d14 <_dtoa_r+0x1cc>
 8007d94:	2300      	movs	r3, #0
 8007d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	dc59      	bgt.n	8007e52 <_dtoa_r+0x30a>
 8007d9e:	f04f 0b01 	mov.w	fp, #1
 8007da2:	465b      	mov	r3, fp
 8007da4:	f8cd b008 	str.w	fp, [sp, #8]
 8007da8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007dac:	2200      	movs	r2, #0
 8007dae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007db0:	6042      	str	r2, [r0, #4]
 8007db2:	2204      	movs	r2, #4
 8007db4:	f102 0614 	add.w	r6, r2, #20
 8007db8:	429e      	cmp	r6, r3
 8007dba:	6841      	ldr	r1, [r0, #4]
 8007dbc:	d94f      	bls.n	8007e5e <_dtoa_r+0x316>
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f000 fcca 	bl	8008758 <_Balloc>
 8007dc4:	9008      	str	r0, [sp, #32]
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d14d      	bne.n	8007e66 <_dtoa_r+0x31e>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dd0:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <_dtoa_r+0x300>)
 8007dd2:	e6cd      	b.n	8007b70 <_dtoa_r+0x28>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e7de      	b.n	8007d96 <_dtoa_r+0x24e>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ddc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007dde:	eb09 0b03 	add.w	fp, r9, r3
 8007de2:	f10b 0301 	add.w	r3, fp, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	9302      	str	r3, [sp, #8]
 8007dea:	bfb8      	it	lt
 8007dec:	2301      	movlt	r3, #1
 8007dee:	e7dd      	b.n	8007dac <_dtoa_r+0x264>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e7f2      	b.n	8007dda <_dtoa_r+0x292>
 8007df4:	2401      	movs	r4, #1
 8007df6:	2300      	movs	r3, #0
 8007df8:	940b      	str	r4, [sp, #44]	; 0x2c
 8007dfa:	9322      	str	r3, [sp, #136]	; 0x88
 8007dfc:	f04f 3bff 	mov.w	fp, #4294967295
 8007e00:	2200      	movs	r2, #0
 8007e02:	2312      	movs	r3, #18
 8007e04:	f8cd b008 	str.w	fp, [sp, #8]
 8007e08:	9223      	str	r2, [sp, #140]	; 0x8c
 8007e0a:	e7cf      	b.n	8007dac <_dtoa_r+0x264>
 8007e0c:	f3af 8000 	nop.w
 8007e10:	636f4361 	.word	0x636f4361
 8007e14:	3fd287a7 	.word	0x3fd287a7
 8007e18:	8b60c8b3 	.word	0x8b60c8b3
 8007e1c:	3fc68a28 	.word	0x3fc68a28
 8007e20:	509f79fb 	.word	0x509f79fb
 8007e24:	3fd34413 	.word	0x3fd34413
 8007e28:	0800a45d 	.word	0x0800a45d
 8007e2c:	0800a474 	.word	0x0800a474
 8007e30:	7ff00000 	.word	0x7ff00000
 8007e34:	0800a459 	.word	0x0800a459
 8007e38:	0800a450 	.word	0x0800a450
 8007e3c:	0800a42d 	.word	0x0800a42d
 8007e40:	3ff80000 	.word	0x3ff80000
 8007e44:	0800a570 	.word	0x0800a570
 8007e48:	0800a4d3 	.word	0x0800a4d3
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e50:	e7d4      	b.n	8007dfc <_dtoa_r+0x2b4>
 8007e52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007e56:	465b      	mov	r3, fp
 8007e58:	f8cd b008 	str.w	fp, [sp, #8]
 8007e5c:	e7a6      	b.n	8007dac <_dtoa_r+0x264>
 8007e5e:	3101      	adds	r1, #1
 8007e60:	6041      	str	r1, [r0, #4]
 8007e62:	0052      	lsls	r2, r2, #1
 8007e64:	e7a6      	b.n	8007db4 <_dtoa_r+0x26c>
 8007e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e68:	9a08      	ldr	r2, [sp, #32]
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	9b02      	ldr	r3, [sp, #8]
 8007e6e:	2b0e      	cmp	r3, #14
 8007e70:	f200 80a8 	bhi.w	8007fc4 <_dtoa_r+0x47c>
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	f000 80a5 	beq.w	8007fc4 <_dtoa_r+0x47c>
 8007e7a:	f1b9 0f00 	cmp.w	r9, #0
 8007e7e:	dd34      	ble.n	8007eea <_dtoa_r+0x3a2>
 8007e80:	4a9a      	ldr	r2, [pc, #616]	; (80080ec <_dtoa_r+0x5a4>)
 8007e82:	f009 030f 	and.w	r3, r9, #15
 8007e86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e8a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e96:	ea4f 1429 	mov.w	r4, r9, asr #4
 8007e9a:	d016      	beq.n	8007eca <_dtoa_r+0x382>
 8007e9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ea0:	4b93      	ldr	r3, [pc, #588]	; (80080f0 <_dtoa_r+0x5a8>)
 8007ea2:	2703      	movs	r7, #3
 8007ea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ea8:	f7f8 fc40 	bl	800072c <__aeabi_ddiv>
 8007eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007eb0:	f004 040f 	and.w	r4, r4, #15
 8007eb4:	4e8e      	ldr	r6, [pc, #568]	; (80080f0 <_dtoa_r+0x5a8>)
 8007eb6:	b954      	cbnz	r4, 8007ece <_dtoa_r+0x386>
 8007eb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ec0:	f7f8 fc34 	bl	800072c <__aeabi_ddiv>
 8007ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ec8:	e029      	b.n	8007f1e <_dtoa_r+0x3d6>
 8007eca:	2702      	movs	r7, #2
 8007ecc:	e7f2      	b.n	8007eb4 <_dtoa_r+0x36c>
 8007ece:	07e1      	lsls	r1, r4, #31
 8007ed0:	d508      	bpl.n	8007ee4 <_dtoa_r+0x39c>
 8007ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ed6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007eda:	f7f8 fafd 	bl	80004d8 <__aeabi_dmul>
 8007ede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ee2:	3701      	adds	r7, #1
 8007ee4:	1064      	asrs	r4, r4, #1
 8007ee6:	3608      	adds	r6, #8
 8007ee8:	e7e5      	b.n	8007eb6 <_dtoa_r+0x36e>
 8007eea:	f000 80a5 	beq.w	8008038 <_dtoa_r+0x4f0>
 8007eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ef2:	f1c9 0400 	rsb	r4, r9, #0
 8007ef6:	4b7d      	ldr	r3, [pc, #500]	; (80080ec <_dtoa_r+0x5a4>)
 8007ef8:	f004 020f 	and.w	r2, r4, #15
 8007efc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f04:	f7f8 fae8 	bl	80004d8 <__aeabi_dmul>
 8007f08:	2702      	movs	r7, #2
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f10:	4e77      	ldr	r6, [pc, #476]	; (80080f0 <_dtoa_r+0x5a8>)
 8007f12:	1124      	asrs	r4, r4, #4
 8007f14:	2c00      	cmp	r4, #0
 8007f16:	f040 8084 	bne.w	8008022 <_dtoa_r+0x4da>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1d2      	bne.n	8007ec4 <_dtoa_r+0x37c>
 8007f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 808b 	beq.w	800803c <_dtoa_r+0x4f4>
 8007f26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007f2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f32:	2200      	movs	r2, #0
 8007f34:	4b6f      	ldr	r3, [pc, #444]	; (80080f4 <_dtoa_r+0x5ac>)
 8007f36:	f7f8 fd41 	bl	80009bc <__aeabi_dcmplt>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d07e      	beq.n	800803c <_dtoa_r+0x4f4>
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d07b      	beq.n	800803c <_dtoa_r+0x4f4>
 8007f44:	f1bb 0f00 	cmp.w	fp, #0
 8007f48:	dd38      	ble.n	8007fbc <_dtoa_r+0x474>
 8007f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4b69      	ldr	r3, [pc, #420]	; (80080f8 <_dtoa_r+0x5b0>)
 8007f52:	f7f8 fac1 	bl	80004d8 <__aeabi_dmul>
 8007f56:	465c      	mov	r4, fp
 8007f58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f5c:	f109 38ff 	add.w	r8, r9, #4294967295
 8007f60:	3701      	adds	r7, #1
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7f8 fa4e 	bl	8000404 <__aeabi_i2d>
 8007f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f6c:	f7f8 fab4 	bl	80004d8 <__aeabi_dmul>
 8007f70:	2200      	movs	r2, #0
 8007f72:	4b62      	ldr	r3, [pc, #392]	; (80080fc <_dtoa_r+0x5b4>)
 8007f74:	f7f8 f8fa 	bl	800016c <__adddf3>
 8007f78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007f7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f80:	9611      	str	r6, [sp, #68]	; 0x44
 8007f82:	2c00      	cmp	r4, #0
 8007f84:	d15d      	bne.n	8008042 <_dtoa_r+0x4fa>
 8007f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4b5c      	ldr	r3, [pc, #368]	; (8008100 <_dtoa_r+0x5b8>)
 8007f8e:	f7f8 f8eb 	bl	8000168 <__aeabi_dsub>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f9a:	4633      	mov	r3, r6
 8007f9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f9e:	f7f8 fd2b 	bl	80009f8 <__aeabi_dcmpgt>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	f040 829e 	bne.w	80084e4 <_dtoa_r+0x99c>
 8007fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007fb2:	f7f8 fd03 	bl	80009bc <__aeabi_dcmplt>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f040 8292 	bne.w	80084e0 <_dtoa_r+0x998>
 8007fbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007fc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f2c0 8153 	blt.w	8008272 <_dtoa_r+0x72a>
 8007fcc:	f1b9 0f0e 	cmp.w	r9, #14
 8007fd0:	f300 814f 	bgt.w	8008272 <_dtoa_r+0x72a>
 8007fd4:	4b45      	ldr	r3, [pc, #276]	; (80080ec <_dtoa_r+0x5a4>)
 8007fd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007fe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f280 80db 	bge.w	80081a0 <_dtoa_r+0x658>
 8007fea:	9b02      	ldr	r3, [sp, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f300 80d7 	bgt.w	80081a0 <_dtoa_r+0x658>
 8007ff2:	f040 8274 	bne.w	80084de <_dtoa_r+0x996>
 8007ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4b40      	ldr	r3, [pc, #256]	; (8008100 <_dtoa_r+0x5b8>)
 8007ffe:	f7f8 fa6b 	bl	80004d8 <__aeabi_dmul>
 8008002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008006:	f7f8 fced 	bl	80009e4 <__aeabi_dcmpge>
 800800a:	9c02      	ldr	r4, [sp, #8]
 800800c:	4626      	mov	r6, r4
 800800e:	2800      	cmp	r0, #0
 8008010:	f040 824a 	bne.w	80084a8 <_dtoa_r+0x960>
 8008014:	2331      	movs	r3, #49	; 0x31
 8008016:	9f08      	ldr	r7, [sp, #32]
 8008018:	f109 0901 	add.w	r9, r9, #1
 800801c:	f807 3b01 	strb.w	r3, [r7], #1
 8008020:	e246      	b.n	80084b0 <_dtoa_r+0x968>
 8008022:	07e2      	lsls	r2, r4, #31
 8008024:	d505      	bpl.n	8008032 <_dtoa_r+0x4ea>
 8008026:	e9d6 2300 	ldrd	r2, r3, [r6]
 800802a:	f7f8 fa55 	bl	80004d8 <__aeabi_dmul>
 800802e:	2301      	movs	r3, #1
 8008030:	3701      	adds	r7, #1
 8008032:	1064      	asrs	r4, r4, #1
 8008034:	3608      	adds	r6, #8
 8008036:	e76d      	b.n	8007f14 <_dtoa_r+0x3cc>
 8008038:	2702      	movs	r7, #2
 800803a:	e770      	b.n	8007f1e <_dtoa_r+0x3d6>
 800803c:	46c8      	mov	r8, r9
 800803e:	9c02      	ldr	r4, [sp, #8]
 8008040:	e78f      	b.n	8007f62 <_dtoa_r+0x41a>
 8008042:	9908      	ldr	r1, [sp, #32]
 8008044:	4b29      	ldr	r3, [pc, #164]	; (80080ec <_dtoa_r+0x5a4>)
 8008046:	4421      	add	r1, r4
 8008048:	9112      	str	r1, [sp, #72]	; 0x48
 800804a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800804c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008050:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008054:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008058:	2900      	cmp	r1, #0
 800805a:	d055      	beq.n	8008108 <_dtoa_r+0x5c0>
 800805c:	2000      	movs	r0, #0
 800805e:	4929      	ldr	r1, [pc, #164]	; (8008104 <_dtoa_r+0x5bc>)
 8008060:	f7f8 fb64 	bl	800072c <__aeabi_ddiv>
 8008064:	463b      	mov	r3, r7
 8008066:	4632      	mov	r2, r6
 8008068:	f7f8 f87e 	bl	8000168 <__aeabi_dsub>
 800806c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008070:	9f08      	ldr	r7, [sp, #32]
 8008072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008076:	f7f8 fcdf 	bl	8000a38 <__aeabi_d2iz>
 800807a:	4604      	mov	r4, r0
 800807c:	f7f8 f9c2 	bl	8000404 <__aeabi_i2d>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008088:	f7f8 f86e 	bl	8000168 <__aeabi_dsub>
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	3430      	adds	r4, #48	; 0x30
 8008092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800809a:	f807 4b01 	strb.w	r4, [r7], #1
 800809e:	f7f8 fc8d 	bl	80009bc <__aeabi_dcmplt>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d174      	bne.n	8008190 <_dtoa_r+0x648>
 80080a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080aa:	2000      	movs	r0, #0
 80080ac:	4911      	ldr	r1, [pc, #68]	; (80080f4 <_dtoa_r+0x5ac>)
 80080ae:	f7f8 f85b 	bl	8000168 <__aeabi_dsub>
 80080b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080b6:	f7f8 fc81 	bl	80009bc <__aeabi_dcmplt>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	f040 80b6 	bne.w	800822c <_dtoa_r+0x6e4>
 80080c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080c2:	429f      	cmp	r7, r3
 80080c4:	f43f af7a 	beq.w	8007fbc <_dtoa_r+0x474>
 80080c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080cc:	2200      	movs	r2, #0
 80080ce:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <_dtoa_r+0x5b0>)
 80080d0:	f7f8 fa02 	bl	80004d8 <__aeabi_dmul>
 80080d4:	2200      	movs	r2, #0
 80080d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <_dtoa_r+0x5b0>)
 80080e0:	f7f8 f9fa 	bl	80004d8 <__aeabi_dmul>
 80080e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080e8:	e7c3      	b.n	8008072 <_dtoa_r+0x52a>
 80080ea:	bf00      	nop
 80080ec:	0800a570 	.word	0x0800a570
 80080f0:	0800a548 	.word	0x0800a548
 80080f4:	3ff00000 	.word	0x3ff00000
 80080f8:	40240000 	.word	0x40240000
 80080fc:	401c0000 	.word	0x401c0000
 8008100:	40140000 	.word	0x40140000
 8008104:	3fe00000 	.word	0x3fe00000
 8008108:	4630      	mov	r0, r6
 800810a:	4639      	mov	r1, r7
 800810c:	f7f8 f9e4 	bl	80004d8 <__aeabi_dmul>
 8008110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008112:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008116:	9c08      	ldr	r4, [sp, #32]
 8008118:	9314      	str	r3, [sp, #80]	; 0x50
 800811a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800811e:	f7f8 fc8b 	bl	8000a38 <__aeabi_d2iz>
 8008122:	9015      	str	r0, [sp, #84]	; 0x54
 8008124:	f7f8 f96e 	bl	8000404 <__aeabi_i2d>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008130:	f7f8 f81a 	bl	8000168 <__aeabi_dsub>
 8008134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008136:	4606      	mov	r6, r0
 8008138:	3330      	adds	r3, #48	; 0x30
 800813a:	f804 3b01 	strb.w	r3, [r4], #1
 800813e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008140:	460f      	mov	r7, r1
 8008142:	429c      	cmp	r4, r3
 8008144:	f04f 0200 	mov.w	r2, #0
 8008148:	d124      	bne.n	8008194 <_dtoa_r+0x64c>
 800814a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800814e:	4bb3      	ldr	r3, [pc, #716]	; (800841c <_dtoa_r+0x8d4>)
 8008150:	f7f8 f80c 	bl	800016c <__adddf3>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f7f8 fc4c 	bl	80009f8 <__aeabi_dcmpgt>
 8008160:	2800      	cmp	r0, #0
 8008162:	d162      	bne.n	800822a <_dtoa_r+0x6e2>
 8008164:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008168:	2000      	movs	r0, #0
 800816a:	49ac      	ldr	r1, [pc, #688]	; (800841c <_dtoa_r+0x8d4>)
 800816c:	f7f7 fffc 	bl	8000168 <__aeabi_dsub>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	4630      	mov	r0, r6
 8008176:	4639      	mov	r1, r7
 8008178:	f7f8 fc20 	bl	80009bc <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	f43f af1d 	beq.w	8007fbc <_dtoa_r+0x474>
 8008182:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008184:	1e7b      	subs	r3, r7, #1
 8008186:	9314      	str	r3, [sp, #80]	; 0x50
 8008188:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800818c:	2b30      	cmp	r3, #48	; 0x30
 800818e:	d0f8      	beq.n	8008182 <_dtoa_r+0x63a>
 8008190:	46c1      	mov	r9, r8
 8008192:	e03a      	b.n	800820a <_dtoa_r+0x6c2>
 8008194:	4ba2      	ldr	r3, [pc, #648]	; (8008420 <_dtoa_r+0x8d8>)
 8008196:	f7f8 f99f 	bl	80004d8 <__aeabi_dmul>
 800819a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800819e:	e7bc      	b.n	800811a <_dtoa_r+0x5d2>
 80081a0:	9f08      	ldr	r7, [sp, #32]
 80081a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081aa:	f7f8 fabf 	bl	800072c <__aeabi_ddiv>
 80081ae:	f7f8 fc43 	bl	8000a38 <__aeabi_d2iz>
 80081b2:	4604      	mov	r4, r0
 80081b4:	f7f8 f926 	bl	8000404 <__aeabi_i2d>
 80081b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081bc:	f7f8 f98c 	bl	80004d8 <__aeabi_dmul>
 80081c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80081c4:	460b      	mov	r3, r1
 80081c6:	4602      	mov	r2, r0
 80081c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081cc:	f7f7 ffcc 	bl	8000168 <__aeabi_dsub>
 80081d0:	f807 6b01 	strb.w	r6, [r7], #1
 80081d4:	9e08      	ldr	r6, [sp, #32]
 80081d6:	9b02      	ldr	r3, [sp, #8]
 80081d8:	1bbe      	subs	r6, r7, r6
 80081da:	42b3      	cmp	r3, r6
 80081dc:	d13a      	bne.n	8008254 <_dtoa_r+0x70c>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	f7f7 ffc3 	bl	800016c <__adddf3>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081f2:	f7f8 fc01 	bl	80009f8 <__aeabi_dcmpgt>
 80081f6:	bb58      	cbnz	r0, 8008250 <_dtoa_r+0x708>
 80081f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008200:	f7f8 fbd2 	bl	80009a8 <__aeabi_dcmpeq>
 8008204:	b108      	cbz	r0, 800820a <_dtoa_r+0x6c2>
 8008206:	07e1      	lsls	r1, r4, #31
 8008208:	d422      	bmi.n	8008250 <_dtoa_r+0x708>
 800820a:	4628      	mov	r0, r5
 800820c:	4651      	mov	r1, sl
 800820e:	f000 fae3 	bl	80087d8 <_Bfree>
 8008212:	2300      	movs	r3, #0
 8008214:	703b      	strb	r3, [r7, #0]
 8008216:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008218:	f109 0001 	add.w	r0, r9, #1
 800821c:	6018      	str	r0, [r3, #0]
 800821e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008220:	2b00      	cmp	r3, #0
 8008222:	f43f acdf 	beq.w	8007be4 <_dtoa_r+0x9c>
 8008226:	601f      	str	r7, [r3, #0]
 8008228:	e4dc      	b.n	8007be4 <_dtoa_r+0x9c>
 800822a:	4627      	mov	r7, r4
 800822c:	463b      	mov	r3, r7
 800822e:	461f      	mov	r7, r3
 8008230:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008234:	2a39      	cmp	r2, #57	; 0x39
 8008236:	d107      	bne.n	8008248 <_dtoa_r+0x700>
 8008238:	9a08      	ldr	r2, [sp, #32]
 800823a:	429a      	cmp	r2, r3
 800823c:	d1f7      	bne.n	800822e <_dtoa_r+0x6e6>
 800823e:	2230      	movs	r2, #48	; 0x30
 8008240:	9908      	ldr	r1, [sp, #32]
 8008242:	f108 0801 	add.w	r8, r8, #1
 8008246:	700a      	strb	r2, [r1, #0]
 8008248:	781a      	ldrb	r2, [r3, #0]
 800824a:	3201      	adds	r2, #1
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	e79f      	b.n	8008190 <_dtoa_r+0x648>
 8008250:	46c8      	mov	r8, r9
 8008252:	e7eb      	b.n	800822c <_dtoa_r+0x6e4>
 8008254:	2200      	movs	r2, #0
 8008256:	4b72      	ldr	r3, [pc, #456]	; (8008420 <_dtoa_r+0x8d8>)
 8008258:	f7f8 f93e 	bl	80004d8 <__aeabi_dmul>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008264:	2200      	movs	r2, #0
 8008266:	2300      	movs	r3, #0
 8008268:	f7f8 fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800826c:	2800      	cmp	r0, #0
 800826e:	d098      	beq.n	80081a2 <_dtoa_r+0x65a>
 8008270:	e7cb      	b.n	800820a <_dtoa_r+0x6c2>
 8008272:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008274:	2a00      	cmp	r2, #0
 8008276:	f000 80cd 	beq.w	8008414 <_dtoa_r+0x8cc>
 800827a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800827c:	2a01      	cmp	r2, #1
 800827e:	f300 80af 	bgt.w	80083e0 <_dtoa_r+0x898>
 8008282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008284:	2a00      	cmp	r2, #0
 8008286:	f000 80a7 	beq.w	80083d8 <_dtoa_r+0x890>
 800828a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800828e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008290:	9f06      	ldr	r7, [sp, #24]
 8008292:	9a06      	ldr	r2, [sp, #24]
 8008294:	2101      	movs	r1, #1
 8008296:	441a      	add	r2, r3
 8008298:	9206      	str	r2, [sp, #24]
 800829a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800829c:	4628      	mov	r0, r5
 800829e:	441a      	add	r2, r3
 80082a0:	9209      	str	r2, [sp, #36]	; 0x24
 80082a2:	f000 fb53 	bl	800894c <__i2b>
 80082a6:	4606      	mov	r6, r0
 80082a8:	2f00      	cmp	r7, #0
 80082aa:	dd0c      	ble.n	80082c6 <_dtoa_r+0x77e>
 80082ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	dd09      	ble.n	80082c6 <_dtoa_r+0x77e>
 80082b2:	42bb      	cmp	r3, r7
 80082b4:	bfa8      	it	ge
 80082b6:	463b      	movge	r3, r7
 80082b8:	9a06      	ldr	r2, [sp, #24]
 80082ba:	1aff      	subs	r7, r7, r3
 80082bc:	1ad2      	subs	r2, r2, r3
 80082be:	9206      	str	r2, [sp, #24]
 80082c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	9309      	str	r3, [sp, #36]	; 0x24
 80082c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c8:	b1f3      	cbz	r3, 8008308 <_dtoa_r+0x7c0>
 80082ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80a9 	beq.w	8008424 <_dtoa_r+0x8dc>
 80082d2:	2c00      	cmp	r4, #0
 80082d4:	dd10      	ble.n	80082f8 <_dtoa_r+0x7b0>
 80082d6:	4631      	mov	r1, r6
 80082d8:	4622      	mov	r2, r4
 80082da:	4628      	mov	r0, r5
 80082dc:	f000 fbf0 	bl	8008ac0 <__pow5mult>
 80082e0:	4652      	mov	r2, sl
 80082e2:	4601      	mov	r1, r0
 80082e4:	4606      	mov	r6, r0
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 fb46 	bl	8008978 <__multiply>
 80082ec:	4680      	mov	r8, r0
 80082ee:	4651      	mov	r1, sl
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 fa71 	bl	80087d8 <_Bfree>
 80082f6:	46c2      	mov	sl, r8
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	1b1a      	subs	r2, r3, r4
 80082fc:	d004      	beq.n	8008308 <_dtoa_r+0x7c0>
 80082fe:	4651      	mov	r1, sl
 8008300:	4628      	mov	r0, r5
 8008302:	f000 fbdd 	bl	8008ac0 <__pow5mult>
 8008306:	4682      	mov	sl, r0
 8008308:	2101      	movs	r1, #1
 800830a:	4628      	mov	r0, r5
 800830c:	f000 fb1e 	bl	800894c <__i2b>
 8008310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008312:	4604      	mov	r4, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	f340 8087 	ble.w	8008428 <_dtoa_r+0x8e0>
 800831a:	461a      	mov	r2, r3
 800831c:	4601      	mov	r1, r0
 800831e:	4628      	mov	r0, r5
 8008320:	f000 fbce 	bl	8008ac0 <__pow5mult>
 8008324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008326:	4604      	mov	r4, r0
 8008328:	2b01      	cmp	r3, #1
 800832a:	f340 8080 	ble.w	800842e <_dtoa_r+0x8e6>
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008338:	6918      	ldr	r0, [r3, #16]
 800833a:	f000 fab9 	bl	80088b0 <__hi0bits>
 800833e:	f1c0 0020 	rsb	r0, r0, #32
 8008342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008344:	4418      	add	r0, r3
 8008346:	f010 001f 	ands.w	r0, r0, #31
 800834a:	f000 8092 	beq.w	8008472 <_dtoa_r+0x92a>
 800834e:	f1c0 0320 	rsb	r3, r0, #32
 8008352:	2b04      	cmp	r3, #4
 8008354:	f340 808a 	ble.w	800846c <_dtoa_r+0x924>
 8008358:	f1c0 001c 	rsb	r0, r0, #28
 800835c:	9b06      	ldr	r3, [sp, #24]
 800835e:	4407      	add	r7, r0
 8008360:	4403      	add	r3, r0
 8008362:	9306      	str	r3, [sp, #24]
 8008364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008366:	4403      	add	r3, r0
 8008368:	9309      	str	r3, [sp, #36]	; 0x24
 800836a:	9b06      	ldr	r3, [sp, #24]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd05      	ble.n	800837c <_dtoa_r+0x834>
 8008370:	4651      	mov	r1, sl
 8008372:	461a      	mov	r2, r3
 8008374:	4628      	mov	r0, r5
 8008376:	f000 fbfd 	bl	8008b74 <__lshift>
 800837a:	4682      	mov	sl, r0
 800837c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800837e:	2b00      	cmp	r3, #0
 8008380:	dd05      	ble.n	800838e <_dtoa_r+0x846>
 8008382:	4621      	mov	r1, r4
 8008384:	461a      	mov	r2, r3
 8008386:	4628      	mov	r0, r5
 8008388:	f000 fbf4 	bl	8008b74 <__lshift>
 800838c:	4604      	mov	r4, r0
 800838e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d070      	beq.n	8008476 <_dtoa_r+0x92e>
 8008394:	4621      	mov	r1, r4
 8008396:	4650      	mov	r0, sl
 8008398:	f000 fc58 	bl	8008c4c <__mcmp>
 800839c:	2800      	cmp	r0, #0
 800839e:	da6a      	bge.n	8008476 <_dtoa_r+0x92e>
 80083a0:	2300      	movs	r3, #0
 80083a2:	4651      	mov	r1, sl
 80083a4:	220a      	movs	r2, #10
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 fa38 	bl	800881c <__multadd>
 80083ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ae:	4682      	mov	sl, r0
 80083b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8193 	beq.w	80086e0 <_dtoa_r+0xb98>
 80083ba:	4631      	mov	r1, r6
 80083bc:	2300      	movs	r3, #0
 80083be:	220a      	movs	r2, #10
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 fa2b 	bl	800881c <__multadd>
 80083c6:	f1bb 0f00 	cmp.w	fp, #0
 80083ca:	4606      	mov	r6, r0
 80083cc:	f300 8093 	bgt.w	80084f6 <_dtoa_r+0x9ae>
 80083d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	dc57      	bgt.n	8008486 <_dtoa_r+0x93e>
 80083d6:	e08e      	b.n	80084f6 <_dtoa_r+0x9ae>
 80083d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80083da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083de:	e756      	b.n	800828e <_dtoa_r+0x746>
 80083e0:	9b02      	ldr	r3, [sp, #8]
 80083e2:	1e5c      	subs	r4, r3, #1
 80083e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e6:	42a3      	cmp	r3, r4
 80083e8:	bfb7      	itett	lt
 80083ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80083ec:	1b1c      	subge	r4, r3, r4
 80083ee:	1ae2      	sublt	r2, r4, r3
 80083f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80083f2:	bfbe      	ittt	lt
 80083f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 80083f6:	189b      	addlt	r3, r3, r2
 80083f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	bfb8      	it	lt
 80083fe:	2400      	movlt	r4, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	bfbb      	ittet	lt
 8008404:	9b06      	ldrlt	r3, [sp, #24]
 8008406:	9a02      	ldrlt	r2, [sp, #8]
 8008408:	9f06      	ldrge	r7, [sp, #24]
 800840a:	1a9f      	sublt	r7, r3, r2
 800840c:	bfac      	ite	ge
 800840e:	9b02      	ldrge	r3, [sp, #8]
 8008410:	2300      	movlt	r3, #0
 8008412:	e73e      	b.n	8008292 <_dtoa_r+0x74a>
 8008414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008416:	9f06      	ldr	r7, [sp, #24]
 8008418:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800841a:	e745      	b.n	80082a8 <_dtoa_r+0x760>
 800841c:	3fe00000 	.word	0x3fe00000
 8008420:	40240000 	.word	0x40240000
 8008424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008426:	e76a      	b.n	80082fe <_dtoa_r+0x7b6>
 8008428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800842a:	2b01      	cmp	r3, #1
 800842c:	dc19      	bgt.n	8008462 <_dtoa_r+0x91a>
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	b9bb      	cbnz	r3, 8008462 <_dtoa_r+0x91a>
 8008432:	9b05      	ldr	r3, [sp, #20]
 8008434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008438:	b99b      	cbnz	r3, 8008462 <_dtoa_r+0x91a>
 800843a:	9b05      	ldr	r3, [sp, #20]
 800843c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008440:	0d1b      	lsrs	r3, r3, #20
 8008442:	051b      	lsls	r3, r3, #20
 8008444:	b183      	cbz	r3, 8008468 <_dtoa_r+0x920>
 8008446:	f04f 0801 	mov.w	r8, #1
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	3301      	adds	r3, #1
 800844e:	9306      	str	r3, [sp, #24]
 8008450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008452:	3301      	adds	r3, #1
 8008454:	9309      	str	r3, [sp, #36]	; 0x24
 8008456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	f47f af6a 	bne.w	8008332 <_dtoa_r+0x7ea>
 800845e:	2001      	movs	r0, #1
 8008460:	e76f      	b.n	8008342 <_dtoa_r+0x7fa>
 8008462:	f04f 0800 	mov.w	r8, #0
 8008466:	e7f6      	b.n	8008456 <_dtoa_r+0x90e>
 8008468:	4698      	mov	r8, r3
 800846a:	e7f4      	b.n	8008456 <_dtoa_r+0x90e>
 800846c:	f43f af7d 	beq.w	800836a <_dtoa_r+0x822>
 8008470:	4618      	mov	r0, r3
 8008472:	301c      	adds	r0, #28
 8008474:	e772      	b.n	800835c <_dtoa_r+0x814>
 8008476:	9b02      	ldr	r3, [sp, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	dc36      	bgt.n	80084ea <_dtoa_r+0x9a2>
 800847c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800847e:	2b02      	cmp	r3, #2
 8008480:	dd33      	ble.n	80084ea <_dtoa_r+0x9a2>
 8008482:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008486:	f1bb 0f00 	cmp.w	fp, #0
 800848a:	d10d      	bne.n	80084a8 <_dtoa_r+0x960>
 800848c:	4621      	mov	r1, r4
 800848e:	465b      	mov	r3, fp
 8008490:	2205      	movs	r2, #5
 8008492:	4628      	mov	r0, r5
 8008494:	f000 f9c2 	bl	800881c <__multadd>
 8008498:	4601      	mov	r1, r0
 800849a:	4604      	mov	r4, r0
 800849c:	4650      	mov	r0, sl
 800849e:	f000 fbd5 	bl	8008c4c <__mcmp>
 80084a2:	2800      	cmp	r0, #0
 80084a4:	f73f adb6 	bgt.w	8008014 <_dtoa_r+0x4cc>
 80084a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084aa:	9f08      	ldr	r7, [sp, #32]
 80084ac:	ea6f 0903 	mvn.w	r9, r3
 80084b0:	f04f 0800 	mov.w	r8, #0
 80084b4:	4621      	mov	r1, r4
 80084b6:	4628      	mov	r0, r5
 80084b8:	f000 f98e 	bl	80087d8 <_Bfree>
 80084bc:	2e00      	cmp	r6, #0
 80084be:	f43f aea4 	beq.w	800820a <_dtoa_r+0x6c2>
 80084c2:	f1b8 0f00 	cmp.w	r8, #0
 80084c6:	d005      	beq.n	80084d4 <_dtoa_r+0x98c>
 80084c8:	45b0      	cmp	r8, r6
 80084ca:	d003      	beq.n	80084d4 <_dtoa_r+0x98c>
 80084cc:	4641      	mov	r1, r8
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f982 	bl	80087d8 <_Bfree>
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	f000 f97e 	bl	80087d8 <_Bfree>
 80084dc:	e695      	b.n	800820a <_dtoa_r+0x6c2>
 80084de:	2400      	movs	r4, #0
 80084e0:	4626      	mov	r6, r4
 80084e2:	e7e1      	b.n	80084a8 <_dtoa_r+0x960>
 80084e4:	46c1      	mov	r9, r8
 80084e6:	4626      	mov	r6, r4
 80084e8:	e594      	b.n	8008014 <_dtoa_r+0x4cc>
 80084ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f000 80fc 	beq.w	80086ee <_dtoa_r+0xba6>
 80084f6:	2f00      	cmp	r7, #0
 80084f8:	dd05      	ble.n	8008506 <_dtoa_r+0x9be>
 80084fa:	4631      	mov	r1, r6
 80084fc:	463a      	mov	r2, r7
 80084fe:	4628      	mov	r0, r5
 8008500:	f000 fb38 	bl	8008b74 <__lshift>
 8008504:	4606      	mov	r6, r0
 8008506:	f1b8 0f00 	cmp.w	r8, #0
 800850a:	d05c      	beq.n	80085c6 <_dtoa_r+0xa7e>
 800850c:	4628      	mov	r0, r5
 800850e:	6871      	ldr	r1, [r6, #4]
 8008510:	f000 f922 	bl	8008758 <_Balloc>
 8008514:	4607      	mov	r7, r0
 8008516:	b928      	cbnz	r0, 8008524 <_dtoa_r+0x9dc>
 8008518:	4602      	mov	r2, r0
 800851a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800851e:	4b7e      	ldr	r3, [pc, #504]	; (8008718 <_dtoa_r+0xbd0>)
 8008520:	f7ff bb26 	b.w	8007b70 <_dtoa_r+0x28>
 8008524:	6932      	ldr	r2, [r6, #16]
 8008526:	f106 010c 	add.w	r1, r6, #12
 800852a:	3202      	adds	r2, #2
 800852c:	0092      	lsls	r2, r2, #2
 800852e:	300c      	adds	r0, #12
 8008530:	f7fe fde6 	bl	8007100 <memcpy>
 8008534:	2201      	movs	r2, #1
 8008536:	4639      	mov	r1, r7
 8008538:	4628      	mov	r0, r5
 800853a:	f000 fb1b 	bl	8008b74 <__lshift>
 800853e:	46b0      	mov	r8, r6
 8008540:	4606      	mov	r6, r0
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	3301      	adds	r3, #1
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	9b08      	ldr	r3, [sp, #32]
 800854a:	445b      	add	r3, fp
 800854c:	930a      	str	r3, [sp, #40]	; 0x28
 800854e:	9b04      	ldr	r3, [sp, #16]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	9309      	str	r3, [sp, #36]	; 0x24
 8008556:	9b02      	ldr	r3, [sp, #8]
 8008558:	4621      	mov	r1, r4
 800855a:	4650      	mov	r0, sl
 800855c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008560:	f7ff fa64 	bl	8007a2c <quorem>
 8008564:	4603      	mov	r3, r0
 8008566:	4641      	mov	r1, r8
 8008568:	3330      	adds	r3, #48	; 0x30
 800856a:	9004      	str	r0, [sp, #16]
 800856c:	4650      	mov	r0, sl
 800856e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008570:	f000 fb6c 	bl	8008c4c <__mcmp>
 8008574:	4632      	mov	r2, r6
 8008576:	9006      	str	r0, [sp, #24]
 8008578:	4621      	mov	r1, r4
 800857a:	4628      	mov	r0, r5
 800857c:	f000 fb82 	bl	8008c84 <__mdiff>
 8008580:	68c2      	ldr	r2, [r0, #12]
 8008582:	4607      	mov	r7, r0
 8008584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008586:	bb02      	cbnz	r2, 80085ca <_dtoa_r+0xa82>
 8008588:	4601      	mov	r1, r0
 800858a:	4650      	mov	r0, sl
 800858c:	f000 fb5e 	bl	8008c4c <__mcmp>
 8008590:	4602      	mov	r2, r0
 8008592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008594:	4639      	mov	r1, r7
 8008596:	4628      	mov	r0, r5
 8008598:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800859c:	f000 f91c 	bl	80087d8 <_Bfree>
 80085a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085a4:	9f02      	ldr	r7, [sp, #8]
 80085a6:	ea43 0102 	orr.w	r1, r3, r2
 80085aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ac:	430b      	orrs	r3, r1
 80085ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b0:	d10d      	bne.n	80085ce <_dtoa_r+0xa86>
 80085b2:	2b39      	cmp	r3, #57	; 0x39
 80085b4:	d027      	beq.n	8008606 <_dtoa_r+0xabe>
 80085b6:	9a06      	ldr	r2, [sp, #24]
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	dd01      	ble.n	80085c0 <_dtoa_r+0xa78>
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	3331      	adds	r3, #49	; 0x31
 80085c0:	f88b 3000 	strb.w	r3, [fp]
 80085c4:	e776      	b.n	80084b4 <_dtoa_r+0x96c>
 80085c6:	4630      	mov	r0, r6
 80085c8:	e7b9      	b.n	800853e <_dtoa_r+0x9f6>
 80085ca:	2201      	movs	r2, #1
 80085cc:	e7e2      	b.n	8008594 <_dtoa_r+0xa4c>
 80085ce:	9906      	ldr	r1, [sp, #24]
 80085d0:	2900      	cmp	r1, #0
 80085d2:	db04      	blt.n	80085de <_dtoa_r+0xa96>
 80085d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80085d6:	4301      	orrs	r1, r0
 80085d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085da:	4301      	orrs	r1, r0
 80085dc:	d120      	bne.n	8008620 <_dtoa_r+0xad8>
 80085de:	2a00      	cmp	r2, #0
 80085e0:	ddee      	ble.n	80085c0 <_dtoa_r+0xa78>
 80085e2:	4651      	mov	r1, sl
 80085e4:	2201      	movs	r2, #1
 80085e6:	4628      	mov	r0, r5
 80085e8:	9302      	str	r3, [sp, #8]
 80085ea:	f000 fac3 	bl	8008b74 <__lshift>
 80085ee:	4621      	mov	r1, r4
 80085f0:	4682      	mov	sl, r0
 80085f2:	f000 fb2b 	bl	8008c4c <__mcmp>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	9b02      	ldr	r3, [sp, #8]
 80085fa:	dc02      	bgt.n	8008602 <_dtoa_r+0xaba>
 80085fc:	d1e0      	bne.n	80085c0 <_dtoa_r+0xa78>
 80085fe:	07da      	lsls	r2, r3, #31
 8008600:	d5de      	bpl.n	80085c0 <_dtoa_r+0xa78>
 8008602:	2b39      	cmp	r3, #57	; 0x39
 8008604:	d1da      	bne.n	80085bc <_dtoa_r+0xa74>
 8008606:	2339      	movs	r3, #57	; 0x39
 8008608:	f88b 3000 	strb.w	r3, [fp]
 800860c:	463b      	mov	r3, r7
 800860e:	461f      	mov	r7, r3
 8008610:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008614:	3b01      	subs	r3, #1
 8008616:	2a39      	cmp	r2, #57	; 0x39
 8008618:	d050      	beq.n	80086bc <_dtoa_r+0xb74>
 800861a:	3201      	adds	r2, #1
 800861c:	701a      	strb	r2, [r3, #0]
 800861e:	e749      	b.n	80084b4 <_dtoa_r+0x96c>
 8008620:	2a00      	cmp	r2, #0
 8008622:	dd03      	ble.n	800862c <_dtoa_r+0xae4>
 8008624:	2b39      	cmp	r3, #57	; 0x39
 8008626:	d0ee      	beq.n	8008606 <_dtoa_r+0xabe>
 8008628:	3301      	adds	r3, #1
 800862a:	e7c9      	b.n	80085c0 <_dtoa_r+0xa78>
 800862c:	9a02      	ldr	r2, [sp, #8]
 800862e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008630:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008634:	428a      	cmp	r2, r1
 8008636:	d02a      	beq.n	800868e <_dtoa_r+0xb46>
 8008638:	4651      	mov	r1, sl
 800863a:	2300      	movs	r3, #0
 800863c:	220a      	movs	r2, #10
 800863e:	4628      	mov	r0, r5
 8008640:	f000 f8ec 	bl	800881c <__multadd>
 8008644:	45b0      	cmp	r8, r6
 8008646:	4682      	mov	sl, r0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	f04f 020a 	mov.w	r2, #10
 8008650:	4641      	mov	r1, r8
 8008652:	4628      	mov	r0, r5
 8008654:	d107      	bne.n	8008666 <_dtoa_r+0xb1e>
 8008656:	f000 f8e1 	bl	800881c <__multadd>
 800865a:	4680      	mov	r8, r0
 800865c:	4606      	mov	r6, r0
 800865e:	9b02      	ldr	r3, [sp, #8]
 8008660:	3301      	adds	r3, #1
 8008662:	9302      	str	r3, [sp, #8]
 8008664:	e777      	b.n	8008556 <_dtoa_r+0xa0e>
 8008666:	f000 f8d9 	bl	800881c <__multadd>
 800866a:	4631      	mov	r1, r6
 800866c:	4680      	mov	r8, r0
 800866e:	2300      	movs	r3, #0
 8008670:	220a      	movs	r2, #10
 8008672:	4628      	mov	r0, r5
 8008674:	f000 f8d2 	bl	800881c <__multadd>
 8008678:	4606      	mov	r6, r0
 800867a:	e7f0      	b.n	800865e <_dtoa_r+0xb16>
 800867c:	f1bb 0f00 	cmp.w	fp, #0
 8008680:	bfcc      	ite	gt
 8008682:	465f      	movgt	r7, fp
 8008684:	2701      	movle	r7, #1
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	9a08      	ldr	r2, [sp, #32]
 800868c:	4417      	add	r7, r2
 800868e:	4651      	mov	r1, sl
 8008690:	2201      	movs	r2, #1
 8008692:	4628      	mov	r0, r5
 8008694:	9302      	str	r3, [sp, #8]
 8008696:	f000 fa6d 	bl	8008b74 <__lshift>
 800869a:	4621      	mov	r1, r4
 800869c:	4682      	mov	sl, r0
 800869e:	f000 fad5 	bl	8008c4c <__mcmp>
 80086a2:	2800      	cmp	r0, #0
 80086a4:	dcb2      	bgt.n	800860c <_dtoa_r+0xac4>
 80086a6:	d102      	bne.n	80086ae <_dtoa_r+0xb66>
 80086a8:	9b02      	ldr	r3, [sp, #8]
 80086aa:	07db      	lsls	r3, r3, #31
 80086ac:	d4ae      	bmi.n	800860c <_dtoa_r+0xac4>
 80086ae:	463b      	mov	r3, r7
 80086b0:	461f      	mov	r7, r3
 80086b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b6:	2a30      	cmp	r2, #48	; 0x30
 80086b8:	d0fa      	beq.n	80086b0 <_dtoa_r+0xb68>
 80086ba:	e6fb      	b.n	80084b4 <_dtoa_r+0x96c>
 80086bc:	9a08      	ldr	r2, [sp, #32]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d1a5      	bne.n	800860e <_dtoa_r+0xac6>
 80086c2:	2331      	movs	r3, #49	; 0x31
 80086c4:	f109 0901 	add.w	r9, r9, #1
 80086c8:	7013      	strb	r3, [r2, #0]
 80086ca:	e6f3      	b.n	80084b4 <_dtoa_r+0x96c>
 80086cc:	4b13      	ldr	r3, [pc, #76]	; (800871c <_dtoa_r+0xbd4>)
 80086ce:	f7ff baa7 	b.w	8007c20 <_dtoa_r+0xd8>
 80086d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f47f aa80 	bne.w	8007bda <_dtoa_r+0x92>
 80086da:	4b11      	ldr	r3, [pc, #68]	; (8008720 <_dtoa_r+0xbd8>)
 80086dc:	f7ff baa0 	b.w	8007c20 <_dtoa_r+0xd8>
 80086e0:	f1bb 0f00 	cmp.w	fp, #0
 80086e4:	dc03      	bgt.n	80086ee <_dtoa_r+0xba6>
 80086e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	f73f aecc 	bgt.w	8008486 <_dtoa_r+0x93e>
 80086ee:	9f08      	ldr	r7, [sp, #32]
 80086f0:	4621      	mov	r1, r4
 80086f2:	4650      	mov	r0, sl
 80086f4:	f7ff f99a 	bl	8007a2c <quorem>
 80086f8:	9a08      	ldr	r2, [sp, #32]
 80086fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086fe:	f807 3b01 	strb.w	r3, [r7], #1
 8008702:	1aba      	subs	r2, r7, r2
 8008704:	4593      	cmp	fp, r2
 8008706:	ddb9      	ble.n	800867c <_dtoa_r+0xb34>
 8008708:	4651      	mov	r1, sl
 800870a:	2300      	movs	r3, #0
 800870c:	220a      	movs	r2, #10
 800870e:	4628      	mov	r0, r5
 8008710:	f000 f884 	bl	800881c <__multadd>
 8008714:	4682      	mov	sl, r0
 8008716:	e7eb      	b.n	80086f0 <_dtoa_r+0xba8>
 8008718:	0800a4d3 	.word	0x0800a4d3
 800871c:	0800a42c 	.word	0x0800a42c
 8008720:	0800a450 	.word	0x0800a450

08008724 <_localeconv_r>:
 8008724:	4800      	ldr	r0, [pc, #0]	; (8008728 <_localeconv_r+0x4>)
 8008726:	4770      	bx	lr
 8008728:	20000174 	.word	0x20000174

0800872c <malloc>:
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <malloc+0xc>)
 800872e:	4601      	mov	r1, r0
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f000 bbed 	b.w	8008f10 <_malloc_r>
 8008736:	bf00      	nop
 8008738:	20000020 	.word	0x20000020

0800873c <memchr>:
 800873c:	4603      	mov	r3, r0
 800873e:	b510      	push	{r4, lr}
 8008740:	b2c9      	uxtb	r1, r1
 8008742:	4402      	add	r2, r0
 8008744:	4293      	cmp	r3, r2
 8008746:	4618      	mov	r0, r3
 8008748:	d101      	bne.n	800874e <memchr+0x12>
 800874a:	2000      	movs	r0, #0
 800874c:	e003      	b.n	8008756 <memchr+0x1a>
 800874e:	7804      	ldrb	r4, [r0, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	428c      	cmp	r4, r1
 8008754:	d1f6      	bne.n	8008744 <memchr+0x8>
 8008756:	bd10      	pop	{r4, pc}

08008758 <_Balloc>:
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800875c:	4604      	mov	r4, r0
 800875e:	460d      	mov	r5, r1
 8008760:	b976      	cbnz	r6, 8008780 <_Balloc+0x28>
 8008762:	2010      	movs	r0, #16
 8008764:	f7ff ffe2 	bl	800872c <malloc>
 8008768:	4602      	mov	r2, r0
 800876a:	6260      	str	r0, [r4, #36]	; 0x24
 800876c:	b920      	cbnz	r0, 8008778 <_Balloc+0x20>
 800876e:	2166      	movs	r1, #102	; 0x66
 8008770:	4b17      	ldr	r3, [pc, #92]	; (80087d0 <_Balloc+0x78>)
 8008772:	4818      	ldr	r0, [pc, #96]	; (80087d4 <_Balloc+0x7c>)
 8008774:	f000 fd92 	bl	800929c <__assert_func>
 8008778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800877c:	6006      	str	r6, [r0, #0]
 800877e:	60c6      	str	r6, [r0, #12]
 8008780:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008782:	68f3      	ldr	r3, [r6, #12]
 8008784:	b183      	cbz	r3, 80087a8 <_Balloc+0x50>
 8008786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800878e:	b9b8      	cbnz	r0, 80087c0 <_Balloc+0x68>
 8008790:	2101      	movs	r1, #1
 8008792:	fa01 f605 	lsl.w	r6, r1, r5
 8008796:	1d72      	adds	r2, r6, #5
 8008798:	4620      	mov	r0, r4
 800879a:	0092      	lsls	r2, r2, #2
 800879c:	f000 fb5e 	bl	8008e5c <_calloc_r>
 80087a0:	b160      	cbz	r0, 80087bc <_Balloc+0x64>
 80087a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087a6:	e00e      	b.n	80087c6 <_Balloc+0x6e>
 80087a8:	2221      	movs	r2, #33	; 0x21
 80087aa:	2104      	movs	r1, #4
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fb55 	bl	8008e5c <_calloc_r>
 80087b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b4:	60f0      	str	r0, [r6, #12]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e4      	bne.n	8008786 <_Balloc+0x2e>
 80087bc:	2000      	movs	r0, #0
 80087be:	bd70      	pop	{r4, r5, r6, pc}
 80087c0:	6802      	ldr	r2, [r0, #0]
 80087c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087c6:	2300      	movs	r3, #0
 80087c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087cc:	e7f7      	b.n	80087be <_Balloc+0x66>
 80087ce:	bf00      	nop
 80087d0:	0800a45d 	.word	0x0800a45d
 80087d4:	0800a4e4 	.word	0x0800a4e4

080087d8 <_Bfree>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087dc:	4605      	mov	r5, r0
 80087de:	460c      	mov	r4, r1
 80087e0:	b976      	cbnz	r6, 8008800 <_Bfree+0x28>
 80087e2:	2010      	movs	r0, #16
 80087e4:	f7ff ffa2 	bl	800872c <malloc>
 80087e8:	4602      	mov	r2, r0
 80087ea:	6268      	str	r0, [r5, #36]	; 0x24
 80087ec:	b920      	cbnz	r0, 80087f8 <_Bfree+0x20>
 80087ee:	218a      	movs	r1, #138	; 0x8a
 80087f0:	4b08      	ldr	r3, [pc, #32]	; (8008814 <_Bfree+0x3c>)
 80087f2:	4809      	ldr	r0, [pc, #36]	; (8008818 <_Bfree+0x40>)
 80087f4:	f000 fd52 	bl	800929c <__assert_func>
 80087f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087fc:	6006      	str	r6, [r0, #0]
 80087fe:	60c6      	str	r6, [r0, #12]
 8008800:	b13c      	cbz	r4, 8008812 <_Bfree+0x3a>
 8008802:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008804:	6862      	ldr	r2, [r4, #4]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800880c:	6021      	str	r1, [r4, #0]
 800880e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	0800a45d 	.word	0x0800a45d
 8008818:	0800a4e4 	.word	0x0800a4e4

0800881c <__multadd>:
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008820:	4698      	mov	r8, r3
 8008822:	460c      	mov	r4, r1
 8008824:	2300      	movs	r3, #0
 8008826:	690e      	ldr	r6, [r1, #16]
 8008828:	4607      	mov	r7, r0
 800882a:	f101 0014 	add.w	r0, r1, #20
 800882e:	6805      	ldr	r5, [r0, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	b2a9      	uxth	r1, r5
 8008834:	fb02 8101 	mla	r1, r2, r1, r8
 8008838:	0c2d      	lsrs	r5, r5, #16
 800883a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800883e:	fb02 c505 	mla	r5, r2, r5, ip
 8008842:	b289      	uxth	r1, r1
 8008844:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008848:	429e      	cmp	r6, r3
 800884a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800884e:	f840 1b04 	str.w	r1, [r0], #4
 8008852:	dcec      	bgt.n	800882e <__multadd+0x12>
 8008854:	f1b8 0f00 	cmp.w	r8, #0
 8008858:	d022      	beq.n	80088a0 <__multadd+0x84>
 800885a:	68a3      	ldr	r3, [r4, #8]
 800885c:	42b3      	cmp	r3, r6
 800885e:	dc19      	bgt.n	8008894 <__multadd+0x78>
 8008860:	6861      	ldr	r1, [r4, #4]
 8008862:	4638      	mov	r0, r7
 8008864:	3101      	adds	r1, #1
 8008866:	f7ff ff77 	bl	8008758 <_Balloc>
 800886a:	4605      	mov	r5, r0
 800886c:	b928      	cbnz	r0, 800887a <__multadd+0x5e>
 800886e:	4602      	mov	r2, r0
 8008870:	21b5      	movs	r1, #181	; 0xb5
 8008872:	4b0d      	ldr	r3, [pc, #52]	; (80088a8 <__multadd+0x8c>)
 8008874:	480d      	ldr	r0, [pc, #52]	; (80088ac <__multadd+0x90>)
 8008876:	f000 fd11 	bl	800929c <__assert_func>
 800887a:	6922      	ldr	r2, [r4, #16]
 800887c:	f104 010c 	add.w	r1, r4, #12
 8008880:	3202      	adds	r2, #2
 8008882:	0092      	lsls	r2, r2, #2
 8008884:	300c      	adds	r0, #12
 8008886:	f7fe fc3b 	bl	8007100 <memcpy>
 800888a:	4621      	mov	r1, r4
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff ffa3 	bl	80087d8 <_Bfree>
 8008892:	462c      	mov	r4, r5
 8008894:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008898:	3601      	adds	r6, #1
 800889a:	f8c3 8014 	str.w	r8, [r3, #20]
 800889e:	6126      	str	r6, [r4, #16]
 80088a0:	4620      	mov	r0, r4
 80088a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a6:	bf00      	nop
 80088a8:	0800a4d3 	.word	0x0800a4d3
 80088ac:	0800a4e4 	.word	0x0800a4e4

080088b0 <__hi0bits>:
 80088b0:	0c02      	lsrs	r2, r0, #16
 80088b2:	0412      	lsls	r2, r2, #16
 80088b4:	4603      	mov	r3, r0
 80088b6:	b9ca      	cbnz	r2, 80088ec <__hi0bits+0x3c>
 80088b8:	0403      	lsls	r3, r0, #16
 80088ba:	2010      	movs	r0, #16
 80088bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80088c0:	bf04      	itt	eq
 80088c2:	021b      	lsleq	r3, r3, #8
 80088c4:	3008      	addeq	r0, #8
 80088c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80088ca:	bf04      	itt	eq
 80088cc:	011b      	lsleq	r3, r3, #4
 80088ce:	3004      	addeq	r0, #4
 80088d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80088d4:	bf04      	itt	eq
 80088d6:	009b      	lsleq	r3, r3, #2
 80088d8:	3002      	addeq	r0, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	db05      	blt.n	80088ea <__hi0bits+0x3a>
 80088de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80088e2:	f100 0001 	add.w	r0, r0, #1
 80088e6:	bf08      	it	eq
 80088e8:	2020      	moveq	r0, #32
 80088ea:	4770      	bx	lr
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7e5      	b.n	80088bc <__hi0bits+0xc>

080088f0 <__lo0bits>:
 80088f0:	6803      	ldr	r3, [r0, #0]
 80088f2:	4602      	mov	r2, r0
 80088f4:	f013 0007 	ands.w	r0, r3, #7
 80088f8:	d00b      	beq.n	8008912 <__lo0bits+0x22>
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	d422      	bmi.n	8008944 <__lo0bits+0x54>
 80088fe:	0798      	lsls	r0, r3, #30
 8008900:	bf49      	itett	mi
 8008902:	085b      	lsrmi	r3, r3, #1
 8008904:	089b      	lsrpl	r3, r3, #2
 8008906:	2001      	movmi	r0, #1
 8008908:	6013      	strmi	r3, [r2, #0]
 800890a:	bf5c      	itt	pl
 800890c:	2002      	movpl	r0, #2
 800890e:	6013      	strpl	r3, [r2, #0]
 8008910:	4770      	bx	lr
 8008912:	b299      	uxth	r1, r3
 8008914:	b909      	cbnz	r1, 800891a <__lo0bits+0x2a>
 8008916:	2010      	movs	r0, #16
 8008918:	0c1b      	lsrs	r3, r3, #16
 800891a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800891e:	bf04      	itt	eq
 8008920:	0a1b      	lsreq	r3, r3, #8
 8008922:	3008      	addeq	r0, #8
 8008924:	0719      	lsls	r1, r3, #28
 8008926:	bf04      	itt	eq
 8008928:	091b      	lsreq	r3, r3, #4
 800892a:	3004      	addeq	r0, #4
 800892c:	0799      	lsls	r1, r3, #30
 800892e:	bf04      	itt	eq
 8008930:	089b      	lsreq	r3, r3, #2
 8008932:	3002      	addeq	r0, #2
 8008934:	07d9      	lsls	r1, r3, #31
 8008936:	d403      	bmi.n	8008940 <__lo0bits+0x50>
 8008938:	085b      	lsrs	r3, r3, #1
 800893a:	f100 0001 	add.w	r0, r0, #1
 800893e:	d003      	beq.n	8008948 <__lo0bits+0x58>
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	4770      	bx	lr
 8008944:	2000      	movs	r0, #0
 8008946:	4770      	bx	lr
 8008948:	2020      	movs	r0, #32
 800894a:	4770      	bx	lr

0800894c <__i2b>:
 800894c:	b510      	push	{r4, lr}
 800894e:	460c      	mov	r4, r1
 8008950:	2101      	movs	r1, #1
 8008952:	f7ff ff01 	bl	8008758 <_Balloc>
 8008956:	4602      	mov	r2, r0
 8008958:	b928      	cbnz	r0, 8008966 <__i2b+0x1a>
 800895a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800895e:	4b04      	ldr	r3, [pc, #16]	; (8008970 <__i2b+0x24>)
 8008960:	4804      	ldr	r0, [pc, #16]	; (8008974 <__i2b+0x28>)
 8008962:	f000 fc9b 	bl	800929c <__assert_func>
 8008966:	2301      	movs	r3, #1
 8008968:	6144      	str	r4, [r0, #20]
 800896a:	6103      	str	r3, [r0, #16]
 800896c:	bd10      	pop	{r4, pc}
 800896e:	bf00      	nop
 8008970:	0800a4d3 	.word	0x0800a4d3
 8008974:	0800a4e4 	.word	0x0800a4e4

08008978 <__multiply>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	4614      	mov	r4, r2
 800897e:	690a      	ldr	r2, [r1, #16]
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	460d      	mov	r5, r1
 8008984:	429a      	cmp	r2, r3
 8008986:	bfbe      	ittt	lt
 8008988:	460b      	movlt	r3, r1
 800898a:	4625      	movlt	r5, r4
 800898c:	461c      	movlt	r4, r3
 800898e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008992:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008996:	68ab      	ldr	r3, [r5, #8]
 8008998:	6869      	ldr	r1, [r5, #4]
 800899a:	eb0a 0709 	add.w	r7, sl, r9
 800899e:	42bb      	cmp	r3, r7
 80089a0:	b085      	sub	sp, #20
 80089a2:	bfb8      	it	lt
 80089a4:	3101      	addlt	r1, #1
 80089a6:	f7ff fed7 	bl	8008758 <_Balloc>
 80089aa:	b930      	cbnz	r0, 80089ba <__multiply+0x42>
 80089ac:	4602      	mov	r2, r0
 80089ae:	f240 115d 	movw	r1, #349	; 0x15d
 80089b2:	4b41      	ldr	r3, [pc, #260]	; (8008ab8 <__multiply+0x140>)
 80089b4:	4841      	ldr	r0, [pc, #260]	; (8008abc <__multiply+0x144>)
 80089b6:	f000 fc71 	bl	800929c <__assert_func>
 80089ba:	f100 0614 	add.w	r6, r0, #20
 80089be:	4633      	mov	r3, r6
 80089c0:	2200      	movs	r2, #0
 80089c2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80089c6:	4543      	cmp	r3, r8
 80089c8:	d31e      	bcc.n	8008a08 <__multiply+0x90>
 80089ca:	f105 0c14 	add.w	ip, r5, #20
 80089ce:	f104 0314 	add.w	r3, r4, #20
 80089d2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80089d6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80089da:	9202      	str	r2, [sp, #8]
 80089dc:	ebac 0205 	sub.w	r2, ip, r5
 80089e0:	3a15      	subs	r2, #21
 80089e2:	f022 0203 	bic.w	r2, r2, #3
 80089e6:	3204      	adds	r2, #4
 80089e8:	f105 0115 	add.w	r1, r5, #21
 80089ec:	458c      	cmp	ip, r1
 80089ee:	bf38      	it	cc
 80089f0:	2204      	movcc	r2, #4
 80089f2:	9201      	str	r2, [sp, #4]
 80089f4:	9a02      	ldr	r2, [sp, #8]
 80089f6:	9303      	str	r3, [sp, #12]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d808      	bhi.n	8008a0e <__multiply+0x96>
 80089fc:	2f00      	cmp	r7, #0
 80089fe:	dc55      	bgt.n	8008aac <__multiply+0x134>
 8008a00:	6107      	str	r7, [r0, #16]
 8008a02:	b005      	add	sp, #20
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	f843 2b04 	str.w	r2, [r3], #4
 8008a0c:	e7db      	b.n	80089c6 <__multiply+0x4e>
 8008a0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a12:	f1ba 0f00 	cmp.w	sl, #0
 8008a16:	d020      	beq.n	8008a5a <__multiply+0xe2>
 8008a18:	46b1      	mov	r9, r6
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f105 0e14 	add.w	lr, r5, #20
 8008a20:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a24:	f8d9 b000 	ldr.w	fp, [r9]
 8008a28:	b2a1      	uxth	r1, r4
 8008a2a:	fa1f fb8b 	uxth.w	fp, fp
 8008a2e:	fb0a b101 	mla	r1, sl, r1, fp
 8008a32:	4411      	add	r1, r2
 8008a34:	f8d9 2000 	ldr.w	r2, [r9]
 8008a38:	0c24      	lsrs	r4, r4, #16
 8008a3a:	0c12      	lsrs	r2, r2, #16
 8008a3c:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a40:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a44:	b289      	uxth	r1, r1
 8008a46:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a4a:	45f4      	cmp	ip, lr
 8008a4c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008a50:	f849 1b04 	str.w	r1, [r9], #4
 8008a54:	d8e4      	bhi.n	8008a20 <__multiply+0xa8>
 8008a56:	9901      	ldr	r1, [sp, #4]
 8008a58:	5072      	str	r2, [r6, r1]
 8008a5a:	9a03      	ldr	r2, [sp, #12]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	d01f      	beq.n	8008aa8 <__multiply+0x130>
 8008a68:	46b6      	mov	lr, r6
 8008a6a:	f04f 0a00 	mov.w	sl, #0
 8008a6e:	6834      	ldr	r4, [r6, #0]
 8008a70:	f105 0114 	add.w	r1, r5, #20
 8008a74:	880a      	ldrh	r2, [r1, #0]
 8008a76:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a7a:	b2a4      	uxth	r4, r4
 8008a7c:	fb09 b202 	mla	r2, r9, r2, fp
 8008a80:	4492      	add	sl, r2
 8008a82:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a86:	f84e 4b04 	str.w	r4, [lr], #4
 8008a8a:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a8e:	f8be 2000 	ldrh.w	r2, [lr]
 8008a92:	0c24      	lsrs	r4, r4, #16
 8008a94:	fb09 2404 	mla	r4, r9, r4, r2
 8008a98:	458c      	cmp	ip, r1
 8008a9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a9e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008aa2:	d8e7      	bhi.n	8008a74 <__multiply+0xfc>
 8008aa4:	9a01      	ldr	r2, [sp, #4]
 8008aa6:	50b4      	str	r4, [r6, r2]
 8008aa8:	3604      	adds	r6, #4
 8008aaa:	e7a3      	b.n	80089f4 <__multiply+0x7c>
 8008aac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1a5      	bne.n	8008a00 <__multiply+0x88>
 8008ab4:	3f01      	subs	r7, #1
 8008ab6:	e7a1      	b.n	80089fc <__multiply+0x84>
 8008ab8:	0800a4d3 	.word	0x0800a4d3
 8008abc:	0800a4e4 	.word	0x0800a4e4

08008ac0 <__pow5mult>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	4615      	mov	r5, r2
 8008ac6:	f012 0203 	ands.w	r2, r2, #3
 8008aca:	4606      	mov	r6, r0
 8008acc:	460f      	mov	r7, r1
 8008ace:	d007      	beq.n	8008ae0 <__pow5mult+0x20>
 8008ad0:	4c25      	ldr	r4, [pc, #148]	; (8008b68 <__pow5mult+0xa8>)
 8008ad2:	3a01      	subs	r2, #1
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ada:	f7ff fe9f 	bl	800881c <__multadd>
 8008ade:	4607      	mov	r7, r0
 8008ae0:	10ad      	asrs	r5, r5, #2
 8008ae2:	d03d      	beq.n	8008b60 <__pow5mult+0xa0>
 8008ae4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ae6:	b97c      	cbnz	r4, 8008b08 <__pow5mult+0x48>
 8008ae8:	2010      	movs	r0, #16
 8008aea:	f7ff fe1f 	bl	800872c <malloc>
 8008aee:	4602      	mov	r2, r0
 8008af0:	6270      	str	r0, [r6, #36]	; 0x24
 8008af2:	b928      	cbnz	r0, 8008b00 <__pow5mult+0x40>
 8008af4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008af8:	4b1c      	ldr	r3, [pc, #112]	; (8008b6c <__pow5mult+0xac>)
 8008afa:	481d      	ldr	r0, [pc, #116]	; (8008b70 <__pow5mult+0xb0>)
 8008afc:	f000 fbce 	bl	800929c <__assert_func>
 8008b00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b04:	6004      	str	r4, [r0, #0]
 8008b06:	60c4      	str	r4, [r0, #12]
 8008b08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b10:	b94c      	cbnz	r4, 8008b26 <__pow5mult+0x66>
 8008b12:	f240 2171 	movw	r1, #625	; 0x271
 8008b16:	4630      	mov	r0, r6
 8008b18:	f7ff ff18 	bl	800894c <__i2b>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b24:	6003      	str	r3, [r0, #0]
 8008b26:	f04f 0900 	mov.w	r9, #0
 8008b2a:	07eb      	lsls	r3, r5, #31
 8008b2c:	d50a      	bpl.n	8008b44 <__pow5mult+0x84>
 8008b2e:	4639      	mov	r1, r7
 8008b30:	4622      	mov	r2, r4
 8008b32:	4630      	mov	r0, r6
 8008b34:	f7ff ff20 	bl	8008978 <__multiply>
 8008b38:	4680      	mov	r8, r0
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7ff fe4b 	bl	80087d8 <_Bfree>
 8008b42:	4647      	mov	r7, r8
 8008b44:	106d      	asrs	r5, r5, #1
 8008b46:	d00b      	beq.n	8008b60 <__pow5mult+0xa0>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	b938      	cbnz	r0, 8008b5c <__pow5mult+0x9c>
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4630      	mov	r0, r6
 8008b52:	f7ff ff11 	bl	8008978 <__multiply>
 8008b56:	6020      	str	r0, [r4, #0]
 8008b58:	f8c0 9000 	str.w	r9, [r0]
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	e7e4      	b.n	8008b2a <__pow5mult+0x6a>
 8008b60:	4638      	mov	r0, r7
 8008b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b66:	bf00      	nop
 8008b68:	0800a638 	.word	0x0800a638
 8008b6c:	0800a45d 	.word	0x0800a45d
 8008b70:	0800a4e4 	.word	0x0800a4e4

08008b74 <__lshift>:
 8008b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	460c      	mov	r4, r1
 8008b7a:	4607      	mov	r7, r0
 8008b7c:	4691      	mov	r9, r2
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	6849      	ldr	r1, [r1, #4]
 8008b82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b8c:	f108 0601 	add.w	r6, r8, #1
 8008b90:	42b3      	cmp	r3, r6
 8008b92:	db0b      	blt.n	8008bac <__lshift+0x38>
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff fddf 	bl	8008758 <_Balloc>
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	b948      	cbnz	r0, 8008bb2 <__lshift+0x3e>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ba4:	4b27      	ldr	r3, [pc, #156]	; (8008c44 <__lshift+0xd0>)
 8008ba6:	4828      	ldr	r0, [pc, #160]	; (8008c48 <__lshift+0xd4>)
 8008ba8:	f000 fb78 	bl	800929c <__assert_func>
 8008bac:	3101      	adds	r1, #1
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	e7ee      	b.n	8008b90 <__lshift+0x1c>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f100 0114 	add.w	r1, r0, #20
 8008bb8:	f100 0210 	add.w	r2, r0, #16
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	4553      	cmp	r3, sl
 8008bc0:	db33      	blt.n	8008c2a <__lshift+0xb6>
 8008bc2:	6920      	ldr	r0, [r4, #16]
 8008bc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bc8:	f104 0314 	add.w	r3, r4, #20
 8008bcc:	f019 091f 	ands.w	r9, r9, #31
 8008bd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bd8:	d02b      	beq.n	8008c32 <__lshift+0xbe>
 8008bda:	468a      	mov	sl, r1
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f1c9 0e20 	rsb	lr, r9, #32
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	fa00 f009 	lsl.w	r0, r0, r9
 8008be8:	4302      	orrs	r2, r0
 8008bea:	f84a 2b04 	str.w	r2, [sl], #4
 8008bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf2:	459c      	cmp	ip, r3
 8008bf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bf8:	d8f3      	bhi.n	8008be2 <__lshift+0x6e>
 8008bfa:	ebac 0304 	sub.w	r3, ip, r4
 8008bfe:	3b15      	subs	r3, #21
 8008c00:	f023 0303 	bic.w	r3, r3, #3
 8008c04:	3304      	adds	r3, #4
 8008c06:	f104 0015 	add.w	r0, r4, #21
 8008c0a:	4584      	cmp	ip, r0
 8008c0c:	bf38      	it	cc
 8008c0e:	2304      	movcc	r3, #4
 8008c10:	50ca      	str	r2, [r1, r3]
 8008c12:	b10a      	cbz	r2, 8008c18 <__lshift+0xa4>
 8008c14:	f108 0602 	add.w	r6, r8, #2
 8008c18:	3e01      	subs	r6, #1
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	612e      	str	r6, [r5, #16]
 8008c20:	f7ff fdda 	bl	80087d8 <_Bfree>
 8008c24:	4628      	mov	r0, r5
 8008c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c2e:	3301      	adds	r3, #1
 8008c30:	e7c5      	b.n	8008bbe <__lshift+0x4a>
 8008c32:	3904      	subs	r1, #4
 8008c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c38:	459c      	cmp	ip, r3
 8008c3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c3e:	d8f9      	bhi.n	8008c34 <__lshift+0xc0>
 8008c40:	e7ea      	b.n	8008c18 <__lshift+0xa4>
 8008c42:	bf00      	nop
 8008c44:	0800a4d3 	.word	0x0800a4d3
 8008c48:	0800a4e4 	.word	0x0800a4e4

08008c4c <__mcmp>:
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	690a      	ldr	r2, [r1, #16]
 8008c50:	6900      	ldr	r0, [r0, #16]
 8008c52:	b530      	push	{r4, r5, lr}
 8008c54:	1a80      	subs	r0, r0, r2
 8008c56:	d10d      	bne.n	8008c74 <__mcmp+0x28>
 8008c58:	3314      	adds	r3, #20
 8008c5a:	3114      	adds	r1, #20
 8008c5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c6c:	4295      	cmp	r5, r2
 8008c6e:	d002      	beq.n	8008c76 <__mcmp+0x2a>
 8008c70:	d304      	bcc.n	8008c7c <__mcmp+0x30>
 8008c72:	2001      	movs	r0, #1
 8008c74:	bd30      	pop	{r4, r5, pc}
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d3f4      	bcc.n	8008c64 <__mcmp+0x18>
 8008c7a:	e7fb      	b.n	8008c74 <__mcmp+0x28>
 8008c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c80:	e7f8      	b.n	8008c74 <__mcmp+0x28>
	...

08008c84 <__mdiff>:
 8008c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c88:	460c      	mov	r4, r1
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4692      	mov	sl, r2
 8008c92:	f7ff ffdb 	bl	8008c4c <__mcmp>
 8008c96:	1e05      	subs	r5, r0, #0
 8008c98:	d111      	bne.n	8008cbe <__mdiff+0x3a>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7ff fd5b 	bl	8008758 <_Balloc>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	b928      	cbnz	r0, 8008cb2 <__mdiff+0x2e>
 8008ca6:	f240 2132 	movw	r1, #562	; 0x232
 8008caa:	4b3c      	ldr	r3, [pc, #240]	; (8008d9c <__mdiff+0x118>)
 8008cac:	483c      	ldr	r0, [pc, #240]	; (8008da0 <__mdiff+0x11c>)
 8008cae:	f000 faf5 	bl	800929c <__assert_func>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cb8:	4610      	mov	r0, r2
 8008cba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbe:	bfa4      	itt	ge
 8008cc0:	4653      	movge	r3, sl
 8008cc2:	46a2      	movge	sl, r4
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008cca:	bfa6      	itte	ge
 8008ccc:	461c      	movge	r4, r3
 8008cce:	2500      	movge	r5, #0
 8008cd0:	2501      	movlt	r5, #1
 8008cd2:	f7ff fd41 	bl	8008758 <_Balloc>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	b918      	cbnz	r0, 8008ce2 <__mdiff+0x5e>
 8008cda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cde:	4b2f      	ldr	r3, [pc, #188]	; (8008d9c <__mdiff+0x118>)
 8008ce0:	e7e4      	b.n	8008cac <__mdiff+0x28>
 8008ce2:	f100 0814 	add.w	r8, r0, #20
 8008ce6:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008cea:	60c5      	str	r5, [r0, #12]
 8008cec:	f04f 0c00 	mov.w	ip, #0
 8008cf0:	f10a 0514 	add.w	r5, sl, #20
 8008cf4:	f10a 0010 	add.w	r0, sl, #16
 8008cf8:	46c2      	mov	sl, r8
 8008cfa:	6926      	ldr	r6, [r4, #16]
 8008cfc:	f104 0914 	add.w	r9, r4, #20
 8008d00:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008d04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d08:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008d0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d10:	fa1f f18b 	uxth.w	r1, fp
 8008d14:	4461      	add	r1, ip
 8008d16:	fa1f fc83 	uxth.w	ip, r3
 8008d1a:	0c1b      	lsrs	r3, r3, #16
 8008d1c:	eba1 010c 	sub.w	r1, r1, ip
 8008d20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d24:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008d28:	b289      	uxth	r1, r1
 8008d2a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008d2e:	454e      	cmp	r6, r9
 8008d30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008d34:	f84a 3b04 	str.w	r3, [sl], #4
 8008d38:	d8e6      	bhi.n	8008d08 <__mdiff+0x84>
 8008d3a:	1b33      	subs	r3, r6, r4
 8008d3c:	3b15      	subs	r3, #21
 8008d3e:	f023 0303 	bic.w	r3, r3, #3
 8008d42:	3415      	adds	r4, #21
 8008d44:	3304      	adds	r3, #4
 8008d46:	42a6      	cmp	r6, r4
 8008d48:	bf38      	it	cc
 8008d4a:	2304      	movcc	r3, #4
 8008d4c:	441d      	add	r5, r3
 8008d4e:	4443      	add	r3, r8
 8008d50:	461e      	mov	r6, r3
 8008d52:	462c      	mov	r4, r5
 8008d54:	4574      	cmp	r4, lr
 8008d56:	d30e      	bcc.n	8008d76 <__mdiff+0xf2>
 8008d58:	f10e 0103 	add.w	r1, lr, #3
 8008d5c:	1b49      	subs	r1, r1, r5
 8008d5e:	f021 0103 	bic.w	r1, r1, #3
 8008d62:	3d03      	subs	r5, #3
 8008d64:	45ae      	cmp	lr, r5
 8008d66:	bf38      	it	cc
 8008d68:	2100      	movcc	r1, #0
 8008d6a:	4419      	add	r1, r3
 8008d6c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008d70:	b18b      	cbz	r3, 8008d96 <__mdiff+0x112>
 8008d72:	6117      	str	r7, [r2, #16]
 8008d74:	e7a0      	b.n	8008cb8 <__mdiff+0x34>
 8008d76:	f854 8b04 	ldr.w	r8, [r4], #4
 8008d7a:	fa1f f188 	uxth.w	r1, r8
 8008d7e:	4461      	add	r1, ip
 8008d80:	1408      	asrs	r0, r1, #16
 8008d82:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008d86:	b289      	uxth	r1, r1
 8008d88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d90:	f846 1b04 	str.w	r1, [r6], #4
 8008d94:	e7de      	b.n	8008d54 <__mdiff+0xd0>
 8008d96:	3f01      	subs	r7, #1
 8008d98:	e7e8      	b.n	8008d6c <__mdiff+0xe8>
 8008d9a:	bf00      	nop
 8008d9c:	0800a4d3 	.word	0x0800a4d3
 8008da0:	0800a4e4 	.word	0x0800a4e4

08008da4 <__d2b>:
 8008da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008da8:	2101      	movs	r1, #1
 8008daa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008dae:	4690      	mov	r8, r2
 8008db0:	461d      	mov	r5, r3
 8008db2:	f7ff fcd1 	bl	8008758 <_Balloc>
 8008db6:	4604      	mov	r4, r0
 8008db8:	b930      	cbnz	r0, 8008dc8 <__d2b+0x24>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008dc0:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <__d2b+0xb0>)
 8008dc2:	4825      	ldr	r0, [pc, #148]	; (8008e58 <__d2b+0xb4>)
 8008dc4:	f000 fa6a 	bl	800929c <__assert_func>
 8008dc8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008dcc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008dd0:	bb2d      	cbnz	r5, 8008e1e <__d2b+0x7a>
 8008dd2:	9301      	str	r3, [sp, #4]
 8008dd4:	f1b8 0300 	subs.w	r3, r8, #0
 8008dd8:	d026      	beq.n	8008e28 <__d2b+0x84>
 8008dda:	4668      	mov	r0, sp
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	f7ff fd87 	bl	80088f0 <__lo0bits>
 8008de2:	9900      	ldr	r1, [sp, #0]
 8008de4:	b1f0      	cbz	r0, 8008e24 <__d2b+0x80>
 8008de6:	9a01      	ldr	r2, [sp, #4]
 8008de8:	f1c0 0320 	rsb	r3, r0, #32
 8008dec:	fa02 f303 	lsl.w	r3, r2, r3
 8008df0:	430b      	orrs	r3, r1
 8008df2:	40c2      	lsrs	r2, r0
 8008df4:	6163      	str	r3, [r4, #20]
 8008df6:	9201      	str	r2, [sp, #4]
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	bf14      	ite	ne
 8008dfe:	2102      	movne	r1, #2
 8008e00:	2101      	moveq	r1, #1
 8008e02:	61a3      	str	r3, [r4, #24]
 8008e04:	6121      	str	r1, [r4, #16]
 8008e06:	b1c5      	cbz	r5, 8008e3a <__d2b+0x96>
 8008e08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e0c:	4405      	add	r5, r0
 8008e0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e12:	603d      	str	r5, [r7, #0]
 8008e14:	6030      	str	r0, [r6, #0]
 8008e16:	4620      	mov	r0, r4
 8008e18:	b002      	add	sp, #8
 8008e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e22:	e7d6      	b.n	8008dd2 <__d2b+0x2e>
 8008e24:	6161      	str	r1, [r4, #20]
 8008e26:	e7e7      	b.n	8008df8 <__d2b+0x54>
 8008e28:	a801      	add	r0, sp, #4
 8008e2a:	f7ff fd61 	bl	80088f0 <__lo0bits>
 8008e2e:	2101      	movs	r1, #1
 8008e30:	9b01      	ldr	r3, [sp, #4]
 8008e32:	6121      	str	r1, [r4, #16]
 8008e34:	6163      	str	r3, [r4, #20]
 8008e36:	3020      	adds	r0, #32
 8008e38:	e7e5      	b.n	8008e06 <__d2b+0x62>
 8008e3a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008e3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e42:	6038      	str	r0, [r7, #0]
 8008e44:	6918      	ldr	r0, [r3, #16]
 8008e46:	f7ff fd33 	bl	80088b0 <__hi0bits>
 8008e4a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008e4e:	6031      	str	r1, [r6, #0]
 8008e50:	e7e1      	b.n	8008e16 <__d2b+0x72>
 8008e52:	bf00      	nop
 8008e54:	0800a4d3 	.word	0x0800a4d3
 8008e58:	0800a4e4 	.word	0x0800a4e4

08008e5c <_calloc_r>:
 8008e5c:	b538      	push	{r3, r4, r5, lr}
 8008e5e:	fb02 f501 	mul.w	r5, r2, r1
 8008e62:	4629      	mov	r1, r5
 8008e64:	f000 f854 	bl	8008f10 <_malloc_r>
 8008e68:	4604      	mov	r4, r0
 8008e6a:	b118      	cbz	r0, 8008e74 <_calloc_r+0x18>
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f7fe f954 	bl	800711c <memset>
 8008e74:	4620      	mov	r0, r4
 8008e76:	bd38      	pop	{r3, r4, r5, pc}

08008e78 <_free_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	2900      	cmp	r1, #0
 8008e7e:	d043      	beq.n	8008f08 <_free_r+0x90>
 8008e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e84:	1f0c      	subs	r4, r1, #4
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	bfb8      	it	lt
 8008e8a:	18e4      	addlt	r4, r4, r3
 8008e8c:	f000 fa62 	bl	8009354 <__malloc_lock>
 8008e90:	4a1e      	ldr	r2, [pc, #120]	; (8008f0c <_free_r+0x94>)
 8008e92:	6813      	ldr	r3, [r2, #0]
 8008e94:	4610      	mov	r0, r2
 8008e96:	b933      	cbnz	r3, 8008ea6 <_free_r+0x2e>
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	6014      	str	r4, [r2, #0]
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ea2:	f000 ba5d 	b.w	8009360 <__malloc_unlock>
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	d90a      	bls.n	8008ec0 <_free_r+0x48>
 8008eaa:	6821      	ldr	r1, [r4, #0]
 8008eac:	1862      	adds	r2, r4, r1
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	bf01      	itttt	eq
 8008eb2:	681a      	ldreq	r2, [r3, #0]
 8008eb4:	685b      	ldreq	r3, [r3, #4]
 8008eb6:	1852      	addeq	r2, r2, r1
 8008eb8:	6022      	streq	r2, [r4, #0]
 8008eba:	6063      	str	r3, [r4, #4]
 8008ebc:	6004      	str	r4, [r0, #0]
 8008ebe:	e7ed      	b.n	8008e9c <_free_r+0x24>
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	b10b      	cbz	r3, 8008eca <_free_r+0x52>
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	d9fa      	bls.n	8008ec0 <_free_r+0x48>
 8008eca:	6811      	ldr	r1, [r2, #0]
 8008ecc:	1850      	adds	r0, r2, r1
 8008ece:	42a0      	cmp	r0, r4
 8008ed0:	d10b      	bne.n	8008eea <_free_r+0x72>
 8008ed2:	6820      	ldr	r0, [r4, #0]
 8008ed4:	4401      	add	r1, r0
 8008ed6:	1850      	adds	r0, r2, r1
 8008ed8:	4283      	cmp	r3, r0
 8008eda:	6011      	str	r1, [r2, #0]
 8008edc:	d1de      	bne.n	8008e9c <_free_r+0x24>
 8008ede:	6818      	ldr	r0, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	4401      	add	r1, r0
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	6053      	str	r3, [r2, #4]
 8008ee8:	e7d8      	b.n	8008e9c <_free_r+0x24>
 8008eea:	d902      	bls.n	8008ef2 <_free_r+0x7a>
 8008eec:	230c      	movs	r3, #12
 8008eee:	602b      	str	r3, [r5, #0]
 8008ef0:	e7d4      	b.n	8008e9c <_free_r+0x24>
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	1821      	adds	r1, r4, r0
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	bf01      	itttt	eq
 8008efa:	6819      	ldreq	r1, [r3, #0]
 8008efc:	685b      	ldreq	r3, [r3, #4]
 8008efe:	1809      	addeq	r1, r1, r0
 8008f00:	6021      	streq	r1, [r4, #0]
 8008f02:	6063      	str	r3, [r4, #4]
 8008f04:	6054      	str	r4, [r2, #4]
 8008f06:	e7c9      	b.n	8008e9c <_free_r+0x24>
 8008f08:	bd38      	pop	{r3, r4, r5, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200002c8 	.word	0x200002c8

08008f10 <_malloc_r>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	1ccd      	adds	r5, r1, #3
 8008f14:	f025 0503 	bic.w	r5, r5, #3
 8008f18:	3508      	adds	r5, #8
 8008f1a:	2d0c      	cmp	r5, #12
 8008f1c:	bf38      	it	cc
 8008f1e:	250c      	movcc	r5, #12
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	4606      	mov	r6, r0
 8008f24:	db01      	blt.n	8008f2a <_malloc_r+0x1a>
 8008f26:	42a9      	cmp	r1, r5
 8008f28:	d903      	bls.n	8008f32 <_malloc_r+0x22>
 8008f2a:	230c      	movs	r3, #12
 8008f2c:	6033      	str	r3, [r6, #0]
 8008f2e:	2000      	movs	r0, #0
 8008f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f32:	f000 fa0f 	bl	8009354 <__malloc_lock>
 8008f36:	4921      	ldr	r1, [pc, #132]	; (8008fbc <_malloc_r+0xac>)
 8008f38:	680a      	ldr	r2, [r1, #0]
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	b99c      	cbnz	r4, 8008f66 <_malloc_r+0x56>
 8008f3e:	4f20      	ldr	r7, [pc, #128]	; (8008fc0 <_malloc_r+0xb0>)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	b923      	cbnz	r3, 8008f4e <_malloc_r+0x3e>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4630      	mov	r0, r6
 8008f48:	f000 f998 	bl	800927c <_sbrk_r>
 8008f4c:	6038      	str	r0, [r7, #0]
 8008f4e:	4629      	mov	r1, r5
 8008f50:	4630      	mov	r0, r6
 8008f52:	f000 f993 	bl	800927c <_sbrk_r>
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	d123      	bne.n	8008fa2 <_malloc_r+0x92>
 8008f5a:	230c      	movs	r3, #12
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	6033      	str	r3, [r6, #0]
 8008f60:	f000 f9fe 	bl	8009360 <__malloc_unlock>
 8008f64:	e7e3      	b.n	8008f2e <_malloc_r+0x1e>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	1b5b      	subs	r3, r3, r5
 8008f6a:	d417      	bmi.n	8008f9c <_malloc_r+0x8c>
 8008f6c:	2b0b      	cmp	r3, #11
 8008f6e:	d903      	bls.n	8008f78 <_malloc_r+0x68>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	441c      	add	r4, r3
 8008f74:	6025      	str	r5, [r4, #0]
 8008f76:	e004      	b.n	8008f82 <_malloc_r+0x72>
 8008f78:	6863      	ldr	r3, [r4, #4]
 8008f7a:	42a2      	cmp	r2, r4
 8008f7c:	bf0c      	ite	eq
 8008f7e:	600b      	streq	r3, [r1, #0]
 8008f80:	6053      	strne	r3, [r2, #4]
 8008f82:	4630      	mov	r0, r6
 8008f84:	f000 f9ec 	bl	8009360 <__malloc_unlock>
 8008f88:	f104 000b 	add.w	r0, r4, #11
 8008f8c:	1d23      	adds	r3, r4, #4
 8008f8e:	f020 0007 	bic.w	r0, r0, #7
 8008f92:	1ac2      	subs	r2, r0, r3
 8008f94:	d0cc      	beq.n	8008f30 <_malloc_r+0x20>
 8008f96:	1a1b      	subs	r3, r3, r0
 8008f98:	50a3      	str	r3, [r4, r2]
 8008f9a:	e7c9      	b.n	8008f30 <_malloc_r+0x20>
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	6864      	ldr	r4, [r4, #4]
 8008fa0:	e7cc      	b.n	8008f3c <_malloc_r+0x2c>
 8008fa2:	1cc4      	adds	r4, r0, #3
 8008fa4:	f024 0403 	bic.w	r4, r4, #3
 8008fa8:	42a0      	cmp	r0, r4
 8008faa:	d0e3      	beq.n	8008f74 <_malloc_r+0x64>
 8008fac:	1a21      	subs	r1, r4, r0
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 f964 	bl	800927c <_sbrk_r>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d1dd      	bne.n	8008f74 <_malloc_r+0x64>
 8008fb8:	e7cf      	b.n	8008f5a <_malloc_r+0x4a>
 8008fba:	bf00      	nop
 8008fbc:	200002c8 	.word	0x200002c8
 8008fc0:	200002cc 	.word	0x200002cc

08008fc4 <__ssputs_r>:
 8008fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc8:	688e      	ldr	r6, [r1, #8]
 8008fca:	4682      	mov	sl, r0
 8008fcc:	429e      	cmp	r6, r3
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4690      	mov	r8, r2
 8008fd2:	461f      	mov	r7, r3
 8008fd4:	d838      	bhi.n	8009048 <__ssputs_r+0x84>
 8008fd6:	898a      	ldrh	r2, [r1, #12]
 8008fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fdc:	d032      	beq.n	8009044 <__ssputs_r+0x80>
 8008fde:	6825      	ldr	r5, [r4, #0]
 8008fe0:	6909      	ldr	r1, [r1, #16]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	eba5 0901 	sub.w	r9, r5, r1
 8008fe8:	6965      	ldr	r5, [r4, #20]
 8008fea:	444b      	add	r3, r9
 8008fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ff0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ff4:	106d      	asrs	r5, r5, #1
 8008ff6:	429d      	cmp	r5, r3
 8008ff8:	bf38      	it	cc
 8008ffa:	461d      	movcc	r5, r3
 8008ffc:	0553      	lsls	r3, r2, #21
 8008ffe:	d531      	bpl.n	8009064 <__ssputs_r+0xa0>
 8009000:	4629      	mov	r1, r5
 8009002:	f7ff ff85 	bl	8008f10 <_malloc_r>
 8009006:	4606      	mov	r6, r0
 8009008:	b950      	cbnz	r0, 8009020 <__ssputs_r+0x5c>
 800900a:	230c      	movs	r3, #12
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	f8ca 3000 	str.w	r3, [sl]
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009020:	464a      	mov	r2, r9
 8009022:	6921      	ldr	r1, [r4, #16]
 8009024:	f7fe f86c 	bl	8007100 <memcpy>
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800902e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009032:	81a3      	strh	r3, [r4, #12]
 8009034:	6126      	str	r6, [r4, #16]
 8009036:	444e      	add	r6, r9
 8009038:	6026      	str	r6, [r4, #0]
 800903a:	463e      	mov	r6, r7
 800903c:	6165      	str	r5, [r4, #20]
 800903e:	eba5 0509 	sub.w	r5, r5, r9
 8009042:	60a5      	str	r5, [r4, #8]
 8009044:	42be      	cmp	r6, r7
 8009046:	d900      	bls.n	800904a <__ssputs_r+0x86>
 8009048:	463e      	mov	r6, r7
 800904a:	4632      	mov	r2, r6
 800904c:	4641      	mov	r1, r8
 800904e:	6820      	ldr	r0, [r4, #0]
 8009050:	f000 f966 	bl	8009320 <memmove>
 8009054:	68a3      	ldr	r3, [r4, #8]
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	1b9b      	subs	r3, r3, r6
 800905a:	4432      	add	r2, r6
 800905c:	2000      	movs	r0, #0
 800905e:	60a3      	str	r3, [r4, #8]
 8009060:	6022      	str	r2, [r4, #0]
 8009062:	e7db      	b.n	800901c <__ssputs_r+0x58>
 8009064:	462a      	mov	r2, r5
 8009066:	f000 f981 	bl	800936c <_realloc_r>
 800906a:	4606      	mov	r6, r0
 800906c:	2800      	cmp	r0, #0
 800906e:	d1e1      	bne.n	8009034 <__ssputs_r+0x70>
 8009070:	4650      	mov	r0, sl
 8009072:	6921      	ldr	r1, [r4, #16]
 8009074:	f7ff ff00 	bl	8008e78 <_free_r>
 8009078:	e7c7      	b.n	800900a <__ssputs_r+0x46>
	...

0800907c <_svfiprintf_r>:
 800907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	4698      	mov	r8, r3
 8009082:	898b      	ldrh	r3, [r1, #12]
 8009084:	4607      	mov	r7, r0
 8009086:	061b      	lsls	r3, r3, #24
 8009088:	460d      	mov	r5, r1
 800908a:	4614      	mov	r4, r2
 800908c:	b09d      	sub	sp, #116	; 0x74
 800908e:	d50e      	bpl.n	80090ae <_svfiprintf_r+0x32>
 8009090:	690b      	ldr	r3, [r1, #16]
 8009092:	b963      	cbnz	r3, 80090ae <_svfiprintf_r+0x32>
 8009094:	2140      	movs	r1, #64	; 0x40
 8009096:	f7ff ff3b 	bl	8008f10 <_malloc_r>
 800909a:	6028      	str	r0, [r5, #0]
 800909c:	6128      	str	r0, [r5, #16]
 800909e:	b920      	cbnz	r0, 80090aa <_svfiprintf_r+0x2e>
 80090a0:	230c      	movs	r3, #12
 80090a2:	603b      	str	r3, [r7, #0]
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295
 80090a8:	e0d1      	b.n	800924e <_svfiprintf_r+0x1d2>
 80090aa:	2340      	movs	r3, #64	; 0x40
 80090ac:	616b      	str	r3, [r5, #20]
 80090ae:	2300      	movs	r3, #0
 80090b0:	9309      	str	r3, [sp, #36]	; 0x24
 80090b2:	2320      	movs	r3, #32
 80090b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090b8:	2330      	movs	r3, #48	; 0x30
 80090ba:	f04f 0901 	mov.w	r9, #1
 80090be:	f8cd 800c 	str.w	r8, [sp, #12]
 80090c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009268 <_svfiprintf_r+0x1ec>
 80090c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090ca:	4623      	mov	r3, r4
 80090cc:	469a      	mov	sl, r3
 80090ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090d2:	b10a      	cbz	r2, 80090d8 <_svfiprintf_r+0x5c>
 80090d4:	2a25      	cmp	r2, #37	; 0x25
 80090d6:	d1f9      	bne.n	80090cc <_svfiprintf_r+0x50>
 80090d8:	ebba 0b04 	subs.w	fp, sl, r4
 80090dc:	d00b      	beq.n	80090f6 <_svfiprintf_r+0x7a>
 80090de:	465b      	mov	r3, fp
 80090e0:	4622      	mov	r2, r4
 80090e2:	4629      	mov	r1, r5
 80090e4:	4638      	mov	r0, r7
 80090e6:	f7ff ff6d 	bl	8008fc4 <__ssputs_r>
 80090ea:	3001      	adds	r0, #1
 80090ec:	f000 80aa 	beq.w	8009244 <_svfiprintf_r+0x1c8>
 80090f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090f2:	445a      	add	r2, fp
 80090f4:	9209      	str	r2, [sp, #36]	; 0x24
 80090f6:	f89a 3000 	ldrb.w	r3, [sl]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 80a2 	beq.w	8009244 <_svfiprintf_r+0x1c8>
 8009100:	2300      	movs	r3, #0
 8009102:	f04f 32ff 	mov.w	r2, #4294967295
 8009106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800910a:	f10a 0a01 	add.w	sl, sl, #1
 800910e:	9304      	str	r3, [sp, #16]
 8009110:	9307      	str	r3, [sp, #28]
 8009112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009116:	931a      	str	r3, [sp, #104]	; 0x68
 8009118:	4654      	mov	r4, sl
 800911a:	2205      	movs	r2, #5
 800911c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009120:	4851      	ldr	r0, [pc, #324]	; (8009268 <_svfiprintf_r+0x1ec>)
 8009122:	f7ff fb0b 	bl	800873c <memchr>
 8009126:	9a04      	ldr	r2, [sp, #16]
 8009128:	b9d8      	cbnz	r0, 8009162 <_svfiprintf_r+0xe6>
 800912a:	06d0      	lsls	r0, r2, #27
 800912c:	bf44      	itt	mi
 800912e:	2320      	movmi	r3, #32
 8009130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009134:	0711      	lsls	r1, r2, #28
 8009136:	bf44      	itt	mi
 8009138:	232b      	movmi	r3, #43	; 0x2b
 800913a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913e:	f89a 3000 	ldrb.w	r3, [sl]
 8009142:	2b2a      	cmp	r3, #42	; 0x2a
 8009144:	d015      	beq.n	8009172 <_svfiprintf_r+0xf6>
 8009146:	4654      	mov	r4, sl
 8009148:	2000      	movs	r0, #0
 800914a:	f04f 0c0a 	mov.w	ip, #10
 800914e:	9a07      	ldr	r2, [sp, #28]
 8009150:	4621      	mov	r1, r4
 8009152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009156:	3b30      	subs	r3, #48	; 0x30
 8009158:	2b09      	cmp	r3, #9
 800915a:	d94e      	bls.n	80091fa <_svfiprintf_r+0x17e>
 800915c:	b1b0      	cbz	r0, 800918c <_svfiprintf_r+0x110>
 800915e:	9207      	str	r2, [sp, #28]
 8009160:	e014      	b.n	800918c <_svfiprintf_r+0x110>
 8009162:	eba0 0308 	sub.w	r3, r0, r8
 8009166:	fa09 f303 	lsl.w	r3, r9, r3
 800916a:	4313      	orrs	r3, r2
 800916c:	46a2      	mov	sl, r4
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	e7d2      	b.n	8009118 <_svfiprintf_r+0x9c>
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	1d19      	adds	r1, r3, #4
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	9103      	str	r1, [sp, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	bfbb      	ittet	lt
 800917e:	425b      	neglt	r3, r3
 8009180:	f042 0202 	orrlt.w	r2, r2, #2
 8009184:	9307      	strge	r3, [sp, #28]
 8009186:	9307      	strlt	r3, [sp, #28]
 8009188:	bfb8      	it	lt
 800918a:	9204      	strlt	r2, [sp, #16]
 800918c:	7823      	ldrb	r3, [r4, #0]
 800918e:	2b2e      	cmp	r3, #46	; 0x2e
 8009190:	d10c      	bne.n	80091ac <_svfiprintf_r+0x130>
 8009192:	7863      	ldrb	r3, [r4, #1]
 8009194:	2b2a      	cmp	r3, #42	; 0x2a
 8009196:	d135      	bne.n	8009204 <_svfiprintf_r+0x188>
 8009198:	9b03      	ldr	r3, [sp, #12]
 800919a:	3402      	adds	r4, #2
 800919c:	1d1a      	adds	r2, r3, #4
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	9203      	str	r2, [sp, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfb8      	it	lt
 80091a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80091aa:	9305      	str	r3, [sp, #20]
 80091ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009278 <_svfiprintf_r+0x1fc>
 80091b0:	2203      	movs	r2, #3
 80091b2:	4650      	mov	r0, sl
 80091b4:	7821      	ldrb	r1, [r4, #0]
 80091b6:	f7ff fac1 	bl	800873c <memchr>
 80091ba:	b140      	cbz	r0, 80091ce <_svfiprintf_r+0x152>
 80091bc:	2340      	movs	r3, #64	; 0x40
 80091be:	eba0 000a 	sub.w	r0, r0, sl
 80091c2:	fa03 f000 	lsl.w	r0, r3, r0
 80091c6:	9b04      	ldr	r3, [sp, #16]
 80091c8:	3401      	adds	r4, #1
 80091ca:	4303      	orrs	r3, r0
 80091cc:	9304      	str	r3, [sp, #16]
 80091ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d2:	2206      	movs	r2, #6
 80091d4:	4825      	ldr	r0, [pc, #148]	; (800926c <_svfiprintf_r+0x1f0>)
 80091d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091da:	f7ff faaf 	bl	800873c <memchr>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d038      	beq.n	8009254 <_svfiprintf_r+0x1d8>
 80091e2:	4b23      	ldr	r3, [pc, #140]	; (8009270 <_svfiprintf_r+0x1f4>)
 80091e4:	bb1b      	cbnz	r3, 800922e <_svfiprintf_r+0x1b2>
 80091e6:	9b03      	ldr	r3, [sp, #12]
 80091e8:	3307      	adds	r3, #7
 80091ea:	f023 0307 	bic.w	r3, r3, #7
 80091ee:	3308      	adds	r3, #8
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f4:	4433      	add	r3, r6
 80091f6:	9309      	str	r3, [sp, #36]	; 0x24
 80091f8:	e767      	b.n	80090ca <_svfiprintf_r+0x4e>
 80091fa:	460c      	mov	r4, r1
 80091fc:	2001      	movs	r0, #1
 80091fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009202:	e7a5      	b.n	8009150 <_svfiprintf_r+0xd4>
 8009204:	2300      	movs	r3, #0
 8009206:	f04f 0c0a 	mov.w	ip, #10
 800920a:	4619      	mov	r1, r3
 800920c:	3401      	adds	r4, #1
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	4620      	mov	r0, r4
 8009212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009216:	3a30      	subs	r2, #48	; 0x30
 8009218:	2a09      	cmp	r2, #9
 800921a:	d903      	bls.n	8009224 <_svfiprintf_r+0x1a8>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0c5      	beq.n	80091ac <_svfiprintf_r+0x130>
 8009220:	9105      	str	r1, [sp, #20]
 8009222:	e7c3      	b.n	80091ac <_svfiprintf_r+0x130>
 8009224:	4604      	mov	r4, r0
 8009226:	2301      	movs	r3, #1
 8009228:	fb0c 2101 	mla	r1, ip, r1, r2
 800922c:	e7f0      	b.n	8009210 <_svfiprintf_r+0x194>
 800922e:	ab03      	add	r3, sp, #12
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	462a      	mov	r2, r5
 8009234:	4638      	mov	r0, r7
 8009236:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <_svfiprintf_r+0x1f8>)
 8009238:	a904      	add	r1, sp, #16
 800923a:	f7fe f815 	bl	8007268 <_printf_float>
 800923e:	1c42      	adds	r2, r0, #1
 8009240:	4606      	mov	r6, r0
 8009242:	d1d6      	bne.n	80091f2 <_svfiprintf_r+0x176>
 8009244:	89ab      	ldrh	r3, [r5, #12]
 8009246:	065b      	lsls	r3, r3, #25
 8009248:	f53f af2c 	bmi.w	80090a4 <_svfiprintf_r+0x28>
 800924c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800924e:	b01d      	add	sp, #116	; 0x74
 8009250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009254:	ab03      	add	r3, sp, #12
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	462a      	mov	r2, r5
 800925a:	4638      	mov	r0, r7
 800925c:	4b05      	ldr	r3, [pc, #20]	; (8009274 <_svfiprintf_r+0x1f8>)
 800925e:	a904      	add	r1, sp, #16
 8009260:	f7fe fa9e 	bl	80077a0 <_printf_i>
 8009264:	e7eb      	b.n	800923e <_svfiprintf_r+0x1c2>
 8009266:	bf00      	nop
 8009268:	0800a644 	.word	0x0800a644
 800926c:	0800a64e 	.word	0x0800a64e
 8009270:	08007269 	.word	0x08007269
 8009274:	08008fc5 	.word	0x08008fc5
 8009278:	0800a64a 	.word	0x0800a64a

0800927c <_sbrk_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	2300      	movs	r3, #0
 8009280:	4d05      	ldr	r5, [pc, #20]	; (8009298 <_sbrk_r+0x1c>)
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7fa f9f8 	bl	800367c <_sbrk>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_sbrk_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_sbrk_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	200005d8 	.word	0x200005d8

0800929c <__assert_func>:
 800929c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800929e:	4614      	mov	r4, r2
 80092a0:	461a      	mov	r2, r3
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <__assert_func+0x2c>)
 80092a4:	4605      	mov	r5, r0
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68d8      	ldr	r0, [r3, #12]
 80092aa:	b14c      	cbz	r4, 80092c0 <__assert_func+0x24>
 80092ac:	4b07      	ldr	r3, [pc, #28]	; (80092cc <__assert_func+0x30>)
 80092ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092b2:	9100      	str	r1, [sp, #0]
 80092b4:	462b      	mov	r3, r5
 80092b6:	4906      	ldr	r1, [pc, #24]	; (80092d0 <__assert_func+0x34>)
 80092b8:	f000 f80e 	bl	80092d8 <fiprintf>
 80092bc:	f000 faa2 	bl	8009804 <abort>
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <__assert_func+0x38>)
 80092c2:	461c      	mov	r4, r3
 80092c4:	e7f3      	b.n	80092ae <__assert_func+0x12>
 80092c6:	bf00      	nop
 80092c8:	20000020 	.word	0x20000020
 80092cc:	0800a655 	.word	0x0800a655
 80092d0:	0800a662 	.word	0x0800a662
 80092d4:	0800a690 	.word	0x0800a690

080092d8 <fiprintf>:
 80092d8:	b40e      	push	{r1, r2, r3}
 80092da:	b503      	push	{r0, r1, lr}
 80092dc:	4601      	mov	r1, r0
 80092de:	ab03      	add	r3, sp, #12
 80092e0:	4805      	ldr	r0, [pc, #20]	; (80092f8 <fiprintf+0x20>)
 80092e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e6:	6800      	ldr	r0, [r0, #0]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	f000 f88d 	bl	8009408 <_vfiprintf_r>
 80092ee:	b002      	add	sp, #8
 80092f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f4:	b003      	add	sp, #12
 80092f6:	4770      	bx	lr
 80092f8:	20000020 	.word	0x20000020

080092fc <__ascii_mbtowc>:
 80092fc:	b082      	sub	sp, #8
 80092fe:	b901      	cbnz	r1, 8009302 <__ascii_mbtowc+0x6>
 8009300:	a901      	add	r1, sp, #4
 8009302:	b142      	cbz	r2, 8009316 <__ascii_mbtowc+0x1a>
 8009304:	b14b      	cbz	r3, 800931a <__ascii_mbtowc+0x1e>
 8009306:	7813      	ldrb	r3, [r2, #0]
 8009308:	600b      	str	r3, [r1, #0]
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	1e10      	subs	r0, r2, #0
 800930e:	bf18      	it	ne
 8009310:	2001      	movne	r0, #1
 8009312:	b002      	add	sp, #8
 8009314:	4770      	bx	lr
 8009316:	4610      	mov	r0, r2
 8009318:	e7fb      	b.n	8009312 <__ascii_mbtowc+0x16>
 800931a:	f06f 0001 	mvn.w	r0, #1
 800931e:	e7f8      	b.n	8009312 <__ascii_mbtowc+0x16>

08009320 <memmove>:
 8009320:	4288      	cmp	r0, r1
 8009322:	b510      	push	{r4, lr}
 8009324:	eb01 0402 	add.w	r4, r1, r2
 8009328:	d902      	bls.n	8009330 <memmove+0x10>
 800932a:	4284      	cmp	r4, r0
 800932c:	4623      	mov	r3, r4
 800932e:	d807      	bhi.n	8009340 <memmove+0x20>
 8009330:	1e43      	subs	r3, r0, #1
 8009332:	42a1      	cmp	r1, r4
 8009334:	d008      	beq.n	8009348 <memmove+0x28>
 8009336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800933a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800933e:	e7f8      	b.n	8009332 <memmove+0x12>
 8009340:	4601      	mov	r1, r0
 8009342:	4402      	add	r2, r0
 8009344:	428a      	cmp	r2, r1
 8009346:	d100      	bne.n	800934a <memmove+0x2a>
 8009348:	bd10      	pop	{r4, pc}
 800934a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800934e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009352:	e7f7      	b.n	8009344 <memmove+0x24>

08009354 <__malloc_lock>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__malloc_lock+0x8>)
 8009356:	f000 bc15 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 800935a:	bf00      	nop
 800935c:	200005e0 	.word	0x200005e0

08009360 <__malloc_unlock>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__malloc_unlock+0x8>)
 8009362:	f000 bc10 	b.w	8009b86 <__retarget_lock_release_recursive>
 8009366:	bf00      	nop
 8009368:	200005e0 	.word	0x200005e0

0800936c <_realloc_r>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	4607      	mov	r7, r0
 8009370:	4614      	mov	r4, r2
 8009372:	460e      	mov	r6, r1
 8009374:	b921      	cbnz	r1, 8009380 <_realloc_r+0x14>
 8009376:	4611      	mov	r1, r2
 8009378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800937c:	f7ff bdc8 	b.w	8008f10 <_malloc_r>
 8009380:	b922      	cbnz	r2, 800938c <_realloc_r+0x20>
 8009382:	f7ff fd79 	bl	8008e78 <_free_r>
 8009386:	4625      	mov	r5, r4
 8009388:	4628      	mov	r0, r5
 800938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938c:	f000 fc60 	bl	8009c50 <_malloc_usable_size_r>
 8009390:	42a0      	cmp	r0, r4
 8009392:	d20f      	bcs.n	80093b4 <_realloc_r+0x48>
 8009394:	4621      	mov	r1, r4
 8009396:	4638      	mov	r0, r7
 8009398:	f7ff fdba 	bl	8008f10 <_malloc_r>
 800939c:	4605      	mov	r5, r0
 800939e:	2800      	cmp	r0, #0
 80093a0:	d0f2      	beq.n	8009388 <_realloc_r+0x1c>
 80093a2:	4631      	mov	r1, r6
 80093a4:	4622      	mov	r2, r4
 80093a6:	f7fd feab 	bl	8007100 <memcpy>
 80093aa:	4631      	mov	r1, r6
 80093ac:	4638      	mov	r0, r7
 80093ae:	f7ff fd63 	bl	8008e78 <_free_r>
 80093b2:	e7e9      	b.n	8009388 <_realloc_r+0x1c>
 80093b4:	4635      	mov	r5, r6
 80093b6:	e7e7      	b.n	8009388 <_realloc_r+0x1c>

080093b8 <__sfputc_r>:
 80093b8:	6893      	ldr	r3, [r2, #8]
 80093ba:	b410      	push	{r4}
 80093bc:	3b01      	subs	r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	6093      	str	r3, [r2, #8]
 80093c2:	da07      	bge.n	80093d4 <__sfputc_r+0x1c>
 80093c4:	6994      	ldr	r4, [r2, #24]
 80093c6:	42a3      	cmp	r3, r4
 80093c8:	db01      	blt.n	80093ce <__sfputc_r+0x16>
 80093ca:	290a      	cmp	r1, #10
 80093cc:	d102      	bne.n	80093d4 <__sfputc_r+0x1c>
 80093ce:	bc10      	pop	{r4}
 80093d0:	f000 b94a 	b.w	8009668 <__swbuf_r>
 80093d4:	6813      	ldr	r3, [r2, #0]
 80093d6:	1c58      	adds	r0, r3, #1
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	7019      	strb	r1, [r3, #0]
 80093dc:	4608      	mov	r0, r1
 80093de:	bc10      	pop	{r4}
 80093e0:	4770      	bx	lr

080093e2 <__sfputs_r>:
 80093e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e4:	4606      	mov	r6, r0
 80093e6:	460f      	mov	r7, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	18d5      	adds	r5, r2, r3
 80093ec:	42ac      	cmp	r4, r5
 80093ee:	d101      	bne.n	80093f4 <__sfputs_r+0x12>
 80093f0:	2000      	movs	r0, #0
 80093f2:	e007      	b.n	8009404 <__sfputs_r+0x22>
 80093f4:	463a      	mov	r2, r7
 80093f6:	4630      	mov	r0, r6
 80093f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fc:	f7ff ffdc 	bl	80093b8 <__sfputc_r>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d1f3      	bne.n	80093ec <__sfputs_r+0xa>
 8009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009408 <_vfiprintf_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	460d      	mov	r5, r1
 800940e:	4614      	mov	r4, r2
 8009410:	4698      	mov	r8, r3
 8009412:	4606      	mov	r6, r0
 8009414:	b09d      	sub	sp, #116	; 0x74
 8009416:	b118      	cbz	r0, 8009420 <_vfiprintf_r+0x18>
 8009418:	6983      	ldr	r3, [r0, #24]
 800941a:	b90b      	cbnz	r3, 8009420 <_vfiprintf_r+0x18>
 800941c:	f000 fb14 	bl	8009a48 <__sinit>
 8009420:	4b89      	ldr	r3, [pc, #548]	; (8009648 <_vfiprintf_r+0x240>)
 8009422:	429d      	cmp	r5, r3
 8009424:	d11b      	bne.n	800945e <_vfiprintf_r+0x56>
 8009426:	6875      	ldr	r5, [r6, #4]
 8009428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942a:	07d9      	lsls	r1, r3, #31
 800942c:	d405      	bmi.n	800943a <_vfiprintf_r+0x32>
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	059a      	lsls	r2, r3, #22
 8009432:	d402      	bmi.n	800943a <_vfiprintf_r+0x32>
 8009434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009436:	f000 fba5 	bl	8009b84 <__retarget_lock_acquire_recursive>
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	071b      	lsls	r3, r3, #28
 800943e:	d501      	bpl.n	8009444 <_vfiprintf_r+0x3c>
 8009440:	692b      	ldr	r3, [r5, #16]
 8009442:	b9eb      	cbnz	r3, 8009480 <_vfiprintf_r+0x78>
 8009444:	4629      	mov	r1, r5
 8009446:	4630      	mov	r0, r6
 8009448:	f000 f96e 	bl	8009728 <__swsetup_r>
 800944c:	b1c0      	cbz	r0, 8009480 <_vfiprintf_r+0x78>
 800944e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009450:	07dc      	lsls	r4, r3, #31
 8009452:	d50e      	bpl.n	8009472 <_vfiprintf_r+0x6a>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	b01d      	add	sp, #116	; 0x74
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	4b7b      	ldr	r3, [pc, #492]	; (800964c <_vfiprintf_r+0x244>)
 8009460:	429d      	cmp	r5, r3
 8009462:	d101      	bne.n	8009468 <_vfiprintf_r+0x60>
 8009464:	68b5      	ldr	r5, [r6, #8]
 8009466:	e7df      	b.n	8009428 <_vfiprintf_r+0x20>
 8009468:	4b79      	ldr	r3, [pc, #484]	; (8009650 <_vfiprintf_r+0x248>)
 800946a:	429d      	cmp	r5, r3
 800946c:	bf08      	it	eq
 800946e:	68f5      	ldreq	r5, [r6, #12]
 8009470:	e7da      	b.n	8009428 <_vfiprintf_r+0x20>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	0598      	lsls	r0, r3, #22
 8009476:	d4ed      	bmi.n	8009454 <_vfiprintf_r+0x4c>
 8009478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947a:	f000 fb84 	bl	8009b86 <__retarget_lock_release_recursive>
 800947e:	e7e9      	b.n	8009454 <_vfiprintf_r+0x4c>
 8009480:	2300      	movs	r3, #0
 8009482:	9309      	str	r3, [sp, #36]	; 0x24
 8009484:	2320      	movs	r3, #32
 8009486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800948a:	2330      	movs	r3, #48	; 0x30
 800948c:	f04f 0901 	mov.w	r9, #1
 8009490:	f8cd 800c 	str.w	r8, [sp, #12]
 8009494:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009654 <_vfiprintf_r+0x24c>
 8009498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800949c:	4623      	mov	r3, r4
 800949e:	469a      	mov	sl, r3
 80094a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a4:	b10a      	cbz	r2, 80094aa <_vfiprintf_r+0xa2>
 80094a6:	2a25      	cmp	r2, #37	; 0x25
 80094a8:	d1f9      	bne.n	800949e <_vfiprintf_r+0x96>
 80094aa:	ebba 0b04 	subs.w	fp, sl, r4
 80094ae:	d00b      	beq.n	80094c8 <_vfiprintf_r+0xc0>
 80094b0:	465b      	mov	r3, fp
 80094b2:	4622      	mov	r2, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7ff ff93 	bl	80093e2 <__sfputs_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	f000 80aa 	beq.w	8009616 <_vfiprintf_r+0x20e>
 80094c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c4:	445a      	add	r2, fp
 80094c6:	9209      	str	r2, [sp, #36]	; 0x24
 80094c8:	f89a 3000 	ldrb.w	r3, [sl]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80a2 	beq.w	8009616 <_vfiprintf_r+0x20e>
 80094d2:	2300      	movs	r3, #0
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094dc:	f10a 0a01 	add.w	sl, sl, #1
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	9307      	str	r3, [sp, #28]
 80094e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094e8:	931a      	str	r3, [sp, #104]	; 0x68
 80094ea:	4654      	mov	r4, sl
 80094ec:	2205      	movs	r2, #5
 80094ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f2:	4858      	ldr	r0, [pc, #352]	; (8009654 <_vfiprintf_r+0x24c>)
 80094f4:	f7ff f922 	bl	800873c <memchr>
 80094f8:	9a04      	ldr	r2, [sp, #16]
 80094fa:	b9d8      	cbnz	r0, 8009534 <_vfiprintf_r+0x12c>
 80094fc:	06d1      	lsls	r1, r2, #27
 80094fe:	bf44      	itt	mi
 8009500:	2320      	movmi	r3, #32
 8009502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009506:	0713      	lsls	r3, r2, #28
 8009508:	bf44      	itt	mi
 800950a:	232b      	movmi	r3, #43	; 0x2b
 800950c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009510:	f89a 3000 	ldrb.w	r3, [sl]
 8009514:	2b2a      	cmp	r3, #42	; 0x2a
 8009516:	d015      	beq.n	8009544 <_vfiprintf_r+0x13c>
 8009518:	4654      	mov	r4, sl
 800951a:	2000      	movs	r0, #0
 800951c:	f04f 0c0a 	mov.w	ip, #10
 8009520:	9a07      	ldr	r2, [sp, #28]
 8009522:	4621      	mov	r1, r4
 8009524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009528:	3b30      	subs	r3, #48	; 0x30
 800952a:	2b09      	cmp	r3, #9
 800952c:	d94e      	bls.n	80095cc <_vfiprintf_r+0x1c4>
 800952e:	b1b0      	cbz	r0, 800955e <_vfiprintf_r+0x156>
 8009530:	9207      	str	r2, [sp, #28]
 8009532:	e014      	b.n	800955e <_vfiprintf_r+0x156>
 8009534:	eba0 0308 	sub.w	r3, r0, r8
 8009538:	fa09 f303 	lsl.w	r3, r9, r3
 800953c:	4313      	orrs	r3, r2
 800953e:	46a2      	mov	sl, r4
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	e7d2      	b.n	80094ea <_vfiprintf_r+0xe2>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	1d19      	adds	r1, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	9103      	str	r1, [sp, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	bfbb      	ittet	lt
 8009550:	425b      	neglt	r3, r3
 8009552:	f042 0202 	orrlt.w	r2, r2, #2
 8009556:	9307      	strge	r3, [sp, #28]
 8009558:	9307      	strlt	r3, [sp, #28]
 800955a:	bfb8      	it	lt
 800955c:	9204      	strlt	r2, [sp, #16]
 800955e:	7823      	ldrb	r3, [r4, #0]
 8009560:	2b2e      	cmp	r3, #46	; 0x2e
 8009562:	d10c      	bne.n	800957e <_vfiprintf_r+0x176>
 8009564:	7863      	ldrb	r3, [r4, #1]
 8009566:	2b2a      	cmp	r3, #42	; 0x2a
 8009568:	d135      	bne.n	80095d6 <_vfiprintf_r+0x1ce>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	3402      	adds	r4, #2
 800956e:	1d1a      	adds	r2, r3, #4
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	9203      	str	r2, [sp, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	bfb8      	it	lt
 8009578:	f04f 33ff 	movlt.w	r3, #4294967295
 800957c:	9305      	str	r3, [sp, #20]
 800957e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009664 <_vfiprintf_r+0x25c>
 8009582:	2203      	movs	r2, #3
 8009584:	4650      	mov	r0, sl
 8009586:	7821      	ldrb	r1, [r4, #0]
 8009588:	f7ff f8d8 	bl	800873c <memchr>
 800958c:	b140      	cbz	r0, 80095a0 <_vfiprintf_r+0x198>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	eba0 000a 	sub.w	r0, r0, sl
 8009594:	fa03 f000 	lsl.w	r0, r3, r0
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	3401      	adds	r4, #1
 800959c:	4303      	orrs	r3, r0
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a4:	2206      	movs	r2, #6
 80095a6:	482c      	ldr	r0, [pc, #176]	; (8009658 <_vfiprintf_r+0x250>)
 80095a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ac:	f7ff f8c6 	bl	800873c <memchr>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d03f      	beq.n	8009634 <_vfiprintf_r+0x22c>
 80095b4:	4b29      	ldr	r3, [pc, #164]	; (800965c <_vfiprintf_r+0x254>)
 80095b6:	bb1b      	cbnz	r3, 8009600 <_vfiprintf_r+0x1f8>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	3307      	adds	r3, #7
 80095bc:	f023 0307 	bic.w	r3, r3, #7
 80095c0:	3308      	adds	r3, #8
 80095c2:	9303      	str	r3, [sp, #12]
 80095c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c6:	443b      	add	r3, r7
 80095c8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ca:	e767      	b.n	800949c <_vfiprintf_r+0x94>
 80095cc:	460c      	mov	r4, r1
 80095ce:	2001      	movs	r0, #1
 80095d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d4:	e7a5      	b.n	8009522 <_vfiprintf_r+0x11a>
 80095d6:	2300      	movs	r3, #0
 80095d8:	f04f 0c0a 	mov.w	ip, #10
 80095dc:	4619      	mov	r1, r3
 80095de:	3401      	adds	r4, #1
 80095e0:	9305      	str	r3, [sp, #20]
 80095e2:	4620      	mov	r0, r4
 80095e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e8:	3a30      	subs	r2, #48	; 0x30
 80095ea:	2a09      	cmp	r2, #9
 80095ec:	d903      	bls.n	80095f6 <_vfiprintf_r+0x1ee>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c5      	beq.n	800957e <_vfiprintf_r+0x176>
 80095f2:	9105      	str	r1, [sp, #20]
 80095f4:	e7c3      	b.n	800957e <_vfiprintf_r+0x176>
 80095f6:	4604      	mov	r4, r0
 80095f8:	2301      	movs	r3, #1
 80095fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80095fe:	e7f0      	b.n	80095e2 <_vfiprintf_r+0x1da>
 8009600:	ab03      	add	r3, sp, #12
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	462a      	mov	r2, r5
 8009606:	4630      	mov	r0, r6
 8009608:	4b15      	ldr	r3, [pc, #84]	; (8009660 <_vfiprintf_r+0x258>)
 800960a:	a904      	add	r1, sp, #16
 800960c:	f7fd fe2c 	bl	8007268 <_printf_float>
 8009610:	4607      	mov	r7, r0
 8009612:	1c78      	adds	r0, r7, #1
 8009614:	d1d6      	bne.n	80095c4 <_vfiprintf_r+0x1bc>
 8009616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009618:	07d9      	lsls	r1, r3, #31
 800961a:	d405      	bmi.n	8009628 <_vfiprintf_r+0x220>
 800961c:	89ab      	ldrh	r3, [r5, #12]
 800961e:	059a      	lsls	r2, r3, #22
 8009620:	d402      	bmi.n	8009628 <_vfiprintf_r+0x220>
 8009622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009624:	f000 faaf 	bl	8009b86 <__retarget_lock_release_recursive>
 8009628:	89ab      	ldrh	r3, [r5, #12]
 800962a:	065b      	lsls	r3, r3, #25
 800962c:	f53f af12 	bmi.w	8009454 <_vfiprintf_r+0x4c>
 8009630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009632:	e711      	b.n	8009458 <_vfiprintf_r+0x50>
 8009634:	ab03      	add	r3, sp, #12
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	462a      	mov	r2, r5
 800963a:	4630      	mov	r0, r6
 800963c:	4b08      	ldr	r3, [pc, #32]	; (8009660 <_vfiprintf_r+0x258>)
 800963e:	a904      	add	r1, sp, #16
 8009640:	f7fe f8ae 	bl	80077a0 <_printf_i>
 8009644:	e7e4      	b.n	8009610 <_vfiprintf_r+0x208>
 8009646:	bf00      	nop
 8009648:	0800a7bc 	.word	0x0800a7bc
 800964c:	0800a7dc 	.word	0x0800a7dc
 8009650:	0800a79c 	.word	0x0800a79c
 8009654:	0800a644 	.word	0x0800a644
 8009658:	0800a64e 	.word	0x0800a64e
 800965c:	08007269 	.word	0x08007269
 8009660:	080093e3 	.word	0x080093e3
 8009664:	0800a64a 	.word	0x0800a64a

08009668 <__swbuf_r>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	460e      	mov	r6, r1
 800966c:	4614      	mov	r4, r2
 800966e:	4605      	mov	r5, r0
 8009670:	b118      	cbz	r0, 800967a <__swbuf_r+0x12>
 8009672:	6983      	ldr	r3, [r0, #24]
 8009674:	b90b      	cbnz	r3, 800967a <__swbuf_r+0x12>
 8009676:	f000 f9e7 	bl	8009a48 <__sinit>
 800967a:	4b21      	ldr	r3, [pc, #132]	; (8009700 <__swbuf_r+0x98>)
 800967c:	429c      	cmp	r4, r3
 800967e:	d12b      	bne.n	80096d8 <__swbuf_r+0x70>
 8009680:	686c      	ldr	r4, [r5, #4]
 8009682:	69a3      	ldr	r3, [r4, #24]
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	071a      	lsls	r2, r3, #28
 800968a:	d52f      	bpl.n	80096ec <__swbuf_r+0x84>
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b36b      	cbz	r3, 80096ec <__swbuf_r+0x84>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	6820      	ldr	r0, [r4, #0]
 8009694:	b2f6      	uxtb	r6, r6
 8009696:	1ac0      	subs	r0, r0, r3
 8009698:	6963      	ldr	r3, [r4, #20]
 800969a:	4637      	mov	r7, r6
 800969c:	4283      	cmp	r3, r0
 800969e:	dc04      	bgt.n	80096aa <__swbuf_r+0x42>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f93c 	bl	8009920 <_fflush_r>
 80096a8:	bb30      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	3001      	adds	r0, #1
 80096ae:	3b01      	subs	r3, #1
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	6022      	str	r2, [r4, #0]
 80096b8:	701e      	strb	r6, [r3, #0]
 80096ba:	6963      	ldr	r3, [r4, #20]
 80096bc:	4283      	cmp	r3, r0
 80096be:	d004      	beq.n	80096ca <__swbuf_r+0x62>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	07db      	lsls	r3, r3, #31
 80096c4:	d506      	bpl.n	80096d4 <__swbuf_r+0x6c>
 80096c6:	2e0a      	cmp	r6, #10
 80096c8:	d104      	bne.n	80096d4 <__swbuf_r+0x6c>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 f927 	bl	8009920 <_fflush_r>
 80096d2:	b988      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096d4:	4638      	mov	r0, r7
 80096d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <__swbuf_r+0x9c>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	d101      	bne.n	80096e2 <__swbuf_r+0x7a>
 80096de:	68ac      	ldr	r4, [r5, #8]
 80096e0:	e7cf      	b.n	8009682 <__swbuf_r+0x1a>
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <__swbuf_r+0xa0>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	bf08      	it	eq
 80096e8:	68ec      	ldreq	r4, [r5, #12]
 80096ea:	e7ca      	b.n	8009682 <__swbuf_r+0x1a>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f000 f81a 	bl	8009728 <__swsetup_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0cb      	beq.n	8009690 <__swbuf_r+0x28>
 80096f8:	f04f 37ff 	mov.w	r7, #4294967295
 80096fc:	e7ea      	b.n	80096d4 <__swbuf_r+0x6c>
 80096fe:	bf00      	nop
 8009700:	0800a7bc 	.word	0x0800a7bc
 8009704:	0800a7dc 	.word	0x0800a7dc
 8009708:	0800a79c 	.word	0x0800a79c

0800970c <__ascii_wctomb>:
 800970c:	4603      	mov	r3, r0
 800970e:	4608      	mov	r0, r1
 8009710:	b141      	cbz	r1, 8009724 <__ascii_wctomb+0x18>
 8009712:	2aff      	cmp	r2, #255	; 0xff
 8009714:	d904      	bls.n	8009720 <__ascii_wctomb+0x14>
 8009716:	228a      	movs	r2, #138	; 0x8a
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	601a      	str	r2, [r3, #0]
 800971e:	4770      	bx	lr
 8009720:	2001      	movs	r0, #1
 8009722:	700a      	strb	r2, [r1, #0]
 8009724:	4770      	bx	lr
	...

08009728 <__swsetup_r>:
 8009728:	4b32      	ldr	r3, [pc, #200]	; (80097f4 <__swsetup_r+0xcc>)
 800972a:	b570      	push	{r4, r5, r6, lr}
 800972c:	681d      	ldr	r5, [r3, #0]
 800972e:	4606      	mov	r6, r0
 8009730:	460c      	mov	r4, r1
 8009732:	b125      	cbz	r5, 800973e <__swsetup_r+0x16>
 8009734:	69ab      	ldr	r3, [r5, #24]
 8009736:	b913      	cbnz	r3, 800973e <__swsetup_r+0x16>
 8009738:	4628      	mov	r0, r5
 800973a:	f000 f985 	bl	8009a48 <__sinit>
 800973e:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <__swsetup_r+0xd0>)
 8009740:	429c      	cmp	r4, r3
 8009742:	d10f      	bne.n	8009764 <__swsetup_r+0x3c>
 8009744:	686c      	ldr	r4, [r5, #4]
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800974c:	0719      	lsls	r1, r3, #28
 800974e:	d42c      	bmi.n	80097aa <__swsetup_r+0x82>
 8009750:	06dd      	lsls	r5, r3, #27
 8009752:	d411      	bmi.n	8009778 <__swsetup_r+0x50>
 8009754:	2309      	movs	r3, #9
 8009756:	6033      	str	r3, [r6, #0]
 8009758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	e03e      	b.n	80097e2 <__swsetup_r+0xba>
 8009764:	4b25      	ldr	r3, [pc, #148]	; (80097fc <__swsetup_r+0xd4>)
 8009766:	429c      	cmp	r4, r3
 8009768:	d101      	bne.n	800976e <__swsetup_r+0x46>
 800976a:	68ac      	ldr	r4, [r5, #8]
 800976c:	e7eb      	b.n	8009746 <__swsetup_r+0x1e>
 800976e:	4b24      	ldr	r3, [pc, #144]	; (8009800 <__swsetup_r+0xd8>)
 8009770:	429c      	cmp	r4, r3
 8009772:	bf08      	it	eq
 8009774:	68ec      	ldreq	r4, [r5, #12]
 8009776:	e7e6      	b.n	8009746 <__swsetup_r+0x1e>
 8009778:	0758      	lsls	r0, r3, #29
 800977a:	d512      	bpl.n	80097a2 <__swsetup_r+0x7a>
 800977c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800977e:	b141      	cbz	r1, 8009792 <__swsetup_r+0x6a>
 8009780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009784:	4299      	cmp	r1, r3
 8009786:	d002      	beq.n	800978e <__swsetup_r+0x66>
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff fb75 	bl	8008e78 <_free_r>
 800978e:	2300      	movs	r3, #0
 8009790:	6363      	str	r3, [r4, #52]	; 0x34
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	2300      	movs	r3, #0
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f043 0308 	orr.w	r3, r3, #8
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	b94b      	cbnz	r3, 80097c2 <__swsetup_r+0x9a>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b8:	d003      	beq.n	80097c2 <__swsetup_r+0x9a>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4630      	mov	r0, r6
 80097be:	f000 fa07 	bl	8009bd0 <__smakebuf_r>
 80097c2:	89a0      	ldrh	r0, [r4, #12]
 80097c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097c8:	f010 0301 	ands.w	r3, r0, #1
 80097cc:	d00a      	beq.n	80097e4 <__swsetup_r+0xbc>
 80097ce:	2300      	movs	r3, #0
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	6963      	ldr	r3, [r4, #20]
 80097d4:	425b      	negs	r3, r3
 80097d6:	61a3      	str	r3, [r4, #24]
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	b943      	cbnz	r3, 80097ee <__swsetup_r+0xc6>
 80097dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097e0:	d1ba      	bne.n	8009758 <__swsetup_r+0x30>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	0781      	lsls	r1, r0, #30
 80097e6:	bf58      	it	pl
 80097e8:	6963      	ldrpl	r3, [r4, #20]
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	e7f4      	b.n	80097d8 <__swsetup_r+0xb0>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e7f7      	b.n	80097e2 <__swsetup_r+0xba>
 80097f2:	bf00      	nop
 80097f4:	20000020 	.word	0x20000020
 80097f8:	0800a7bc 	.word	0x0800a7bc
 80097fc:	0800a7dc 	.word	0x0800a7dc
 8009800:	0800a79c 	.word	0x0800a79c

08009804 <abort>:
 8009804:	2006      	movs	r0, #6
 8009806:	b508      	push	{r3, lr}
 8009808:	f000 fa52 	bl	8009cb0 <raise>
 800980c:	2001      	movs	r0, #1
 800980e:	f7f9 fec2 	bl	8003596 <_exit>
	...

08009814 <__sflush_r>:
 8009814:	898a      	ldrh	r2, [r1, #12]
 8009816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	4605      	mov	r5, r0
 800981c:	0710      	lsls	r0, r2, #28
 800981e:	460c      	mov	r4, r1
 8009820:	d458      	bmi.n	80098d4 <__sflush_r+0xc0>
 8009822:	684b      	ldr	r3, [r1, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dc05      	bgt.n	8009834 <__sflush_r+0x20>
 8009828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	dc02      	bgt.n	8009834 <__sflush_r+0x20>
 800982e:	2000      	movs	r0, #0
 8009830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009836:	2e00      	cmp	r6, #0
 8009838:	d0f9      	beq.n	800982e <__sflush_r+0x1a>
 800983a:	2300      	movs	r3, #0
 800983c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009840:	682f      	ldr	r7, [r5, #0]
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	d032      	beq.n	80098ac <__sflush_r+0x98>
 8009846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	075a      	lsls	r2, r3, #29
 800984c:	d505      	bpl.n	800985a <__sflush_r+0x46>
 800984e:	6863      	ldr	r3, [r4, #4]
 8009850:	1ac0      	subs	r0, r0, r3
 8009852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009854:	b10b      	cbz	r3, 800985a <__sflush_r+0x46>
 8009856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009858:	1ac0      	subs	r0, r0, r3
 800985a:	2300      	movs	r3, #0
 800985c:	4602      	mov	r2, r0
 800985e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009860:	4628      	mov	r0, r5
 8009862:	6a21      	ldr	r1, [r4, #32]
 8009864:	47b0      	blx	r6
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	d106      	bne.n	800987a <__sflush_r+0x66>
 800986c:	6829      	ldr	r1, [r5, #0]
 800986e:	291d      	cmp	r1, #29
 8009870:	d82c      	bhi.n	80098cc <__sflush_r+0xb8>
 8009872:	4a2a      	ldr	r2, [pc, #168]	; (800991c <__sflush_r+0x108>)
 8009874:	40ca      	lsrs	r2, r1
 8009876:	07d6      	lsls	r6, r2, #31
 8009878:	d528      	bpl.n	80098cc <__sflush_r+0xb8>
 800987a:	2200      	movs	r2, #0
 800987c:	6062      	str	r2, [r4, #4]
 800987e:	6922      	ldr	r2, [r4, #16]
 8009880:	04d9      	lsls	r1, r3, #19
 8009882:	6022      	str	r2, [r4, #0]
 8009884:	d504      	bpl.n	8009890 <__sflush_r+0x7c>
 8009886:	1c42      	adds	r2, r0, #1
 8009888:	d101      	bne.n	800988e <__sflush_r+0x7a>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	b903      	cbnz	r3, 8009890 <__sflush_r+0x7c>
 800988e:	6560      	str	r0, [r4, #84]	; 0x54
 8009890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009892:	602f      	str	r7, [r5, #0]
 8009894:	2900      	cmp	r1, #0
 8009896:	d0ca      	beq.n	800982e <__sflush_r+0x1a>
 8009898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800989c:	4299      	cmp	r1, r3
 800989e:	d002      	beq.n	80098a6 <__sflush_r+0x92>
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7ff fae9 	bl	8008e78 <_free_r>
 80098a6:	2000      	movs	r0, #0
 80098a8:	6360      	str	r0, [r4, #52]	; 0x34
 80098aa:	e7c1      	b.n	8009830 <__sflush_r+0x1c>
 80098ac:	6a21      	ldr	r1, [r4, #32]
 80098ae:	2301      	movs	r3, #1
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b0      	blx	r6
 80098b4:	1c41      	adds	r1, r0, #1
 80098b6:	d1c7      	bne.n	8009848 <__sflush_r+0x34>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c4      	beq.n	8009848 <__sflush_r+0x34>
 80098be:	2b1d      	cmp	r3, #29
 80098c0:	d001      	beq.n	80098c6 <__sflush_r+0xb2>
 80098c2:	2b16      	cmp	r3, #22
 80098c4:	d101      	bne.n	80098ca <__sflush_r+0xb6>
 80098c6:	602f      	str	r7, [r5, #0]
 80098c8:	e7b1      	b.n	800982e <__sflush_r+0x1a>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	e7ad      	b.n	8009830 <__sflush_r+0x1c>
 80098d4:	690f      	ldr	r7, [r1, #16]
 80098d6:	2f00      	cmp	r7, #0
 80098d8:	d0a9      	beq.n	800982e <__sflush_r+0x1a>
 80098da:	0793      	lsls	r3, r2, #30
 80098dc:	bf18      	it	ne
 80098de:	2300      	movne	r3, #0
 80098e0:	680e      	ldr	r6, [r1, #0]
 80098e2:	bf08      	it	eq
 80098e4:	694b      	ldreq	r3, [r1, #20]
 80098e6:	eba6 0807 	sub.w	r8, r6, r7
 80098ea:	600f      	str	r7, [r1, #0]
 80098ec:	608b      	str	r3, [r1, #8]
 80098ee:	f1b8 0f00 	cmp.w	r8, #0
 80098f2:	dd9c      	ble.n	800982e <__sflush_r+0x1a>
 80098f4:	4643      	mov	r3, r8
 80098f6:	463a      	mov	r2, r7
 80098f8:	4628      	mov	r0, r5
 80098fa:	6a21      	ldr	r1, [r4, #32]
 80098fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098fe:	47b0      	blx	r6
 8009900:	2800      	cmp	r0, #0
 8009902:	dc06      	bgt.n	8009912 <__sflush_r+0xfe>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f04f 30ff 	mov.w	r0, #4294967295
 800990a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	e78e      	b.n	8009830 <__sflush_r+0x1c>
 8009912:	4407      	add	r7, r0
 8009914:	eba8 0800 	sub.w	r8, r8, r0
 8009918:	e7e9      	b.n	80098ee <__sflush_r+0xda>
 800991a:	bf00      	nop
 800991c:	20400001 	.word	0x20400001

08009920 <_fflush_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	4605      	mov	r5, r0
 8009926:	460c      	mov	r4, r1
 8009928:	b913      	cbnz	r3, 8009930 <_fflush_r+0x10>
 800992a:	2500      	movs	r5, #0
 800992c:	4628      	mov	r0, r5
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	b118      	cbz	r0, 800993a <_fflush_r+0x1a>
 8009932:	6983      	ldr	r3, [r0, #24]
 8009934:	b90b      	cbnz	r3, 800993a <_fflush_r+0x1a>
 8009936:	f000 f887 	bl	8009a48 <__sinit>
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <_fflush_r+0x6c>)
 800993c:	429c      	cmp	r4, r3
 800993e:	d11b      	bne.n	8009978 <_fflush_r+0x58>
 8009940:	686c      	ldr	r4, [r5, #4]
 8009942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0ef      	beq.n	800992a <_fflush_r+0xa>
 800994a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800994c:	07d0      	lsls	r0, r2, #31
 800994e:	d404      	bmi.n	800995a <_fflush_r+0x3a>
 8009950:	0599      	lsls	r1, r3, #22
 8009952:	d402      	bmi.n	800995a <_fflush_r+0x3a>
 8009954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009956:	f000 f915 	bl	8009b84 <__retarget_lock_acquire_recursive>
 800995a:	4628      	mov	r0, r5
 800995c:	4621      	mov	r1, r4
 800995e:	f7ff ff59 	bl	8009814 <__sflush_r>
 8009962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009964:	4605      	mov	r5, r0
 8009966:	07da      	lsls	r2, r3, #31
 8009968:	d4e0      	bmi.n	800992c <_fflush_r+0xc>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	059b      	lsls	r3, r3, #22
 800996e:	d4dd      	bmi.n	800992c <_fflush_r+0xc>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 f908 	bl	8009b86 <__retarget_lock_release_recursive>
 8009976:	e7d9      	b.n	800992c <_fflush_r+0xc>
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <_fflush_r+0x70>)
 800997a:	429c      	cmp	r4, r3
 800997c:	d101      	bne.n	8009982 <_fflush_r+0x62>
 800997e:	68ac      	ldr	r4, [r5, #8]
 8009980:	e7df      	b.n	8009942 <_fflush_r+0x22>
 8009982:	4b04      	ldr	r3, [pc, #16]	; (8009994 <_fflush_r+0x74>)
 8009984:	429c      	cmp	r4, r3
 8009986:	bf08      	it	eq
 8009988:	68ec      	ldreq	r4, [r5, #12]
 800998a:	e7da      	b.n	8009942 <_fflush_r+0x22>
 800998c:	0800a7bc 	.word	0x0800a7bc
 8009990:	0800a7dc 	.word	0x0800a7dc
 8009994:	0800a79c 	.word	0x0800a79c

08009998 <std>:
 8009998:	2300      	movs	r3, #0
 800999a:	b510      	push	{r4, lr}
 800999c:	4604      	mov	r4, r0
 800999e:	e9c0 3300 	strd	r3, r3, [r0]
 80099a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099a6:	6083      	str	r3, [r0, #8]
 80099a8:	8181      	strh	r1, [r0, #12]
 80099aa:	6643      	str	r3, [r0, #100]	; 0x64
 80099ac:	81c2      	strh	r2, [r0, #14]
 80099ae:	6183      	str	r3, [r0, #24]
 80099b0:	4619      	mov	r1, r3
 80099b2:	2208      	movs	r2, #8
 80099b4:	305c      	adds	r0, #92	; 0x5c
 80099b6:	f7fd fbb1 	bl	800711c <memset>
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <std+0x38>)
 80099bc:	6224      	str	r4, [r4, #32]
 80099be:	6263      	str	r3, [r4, #36]	; 0x24
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <std+0x3c>)
 80099c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80099c4:	4b04      	ldr	r3, [pc, #16]	; (80099d8 <std+0x40>)
 80099c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099c8:	4b04      	ldr	r3, [pc, #16]	; (80099dc <std+0x44>)
 80099ca:	6323      	str	r3, [r4, #48]	; 0x30
 80099cc:	bd10      	pop	{r4, pc}
 80099ce:	bf00      	nop
 80099d0:	08009ce9 	.word	0x08009ce9
 80099d4:	08009d0b 	.word	0x08009d0b
 80099d8:	08009d43 	.word	0x08009d43
 80099dc:	08009d67 	.word	0x08009d67

080099e0 <_cleanup_r>:
 80099e0:	4901      	ldr	r1, [pc, #4]	; (80099e8 <_cleanup_r+0x8>)
 80099e2:	f000 b8af 	b.w	8009b44 <_fwalk_reent>
 80099e6:	bf00      	nop
 80099e8:	08009921 	.word	0x08009921

080099ec <__sfmoreglue>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	2568      	movs	r5, #104	; 0x68
 80099f0:	1e4a      	subs	r2, r1, #1
 80099f2:	4355      	muls	r5, r2
 80099f4:	460e      	mov	r6, r1
 80099f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099fa:	f7ff fa89 	bl	8008f10 <_malloc_r>
 80099fe:	4604      	mov	r4, r0
 8009a00:	b140      	cbz	r0, 8009a14 <__sfmoreglue+0x28>
 8009a02:	2100      	movs	r1, #0
 8009a04:	e9c0 1600 	strd	r1, r6, [r0]
 8009a08:	300c      	adds	r0, #12
 8009a0a:	60a0      	str	r0, [r4, #8]
 8009a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a10:	f7fd fb84 	bl	800711c <memset>
 8009a14:	4620      	mov	r0, r4
 8009a16:	bd70      	pop	{r4, r5, r6, pc}

08009a18 <__sfp_lock_acquire>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__sfp_lock_acquire+0x8>)
 8009a1a:	f000 b8b3 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	200005e4 	.word	0x200005e4

08009a24 <__sfp_lock_release>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__sfp_lock_release+0x8>)
 8009a26:	f000 b8ae 	b.w	8009b86 <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	200005e4 	.word	0x200005e4

08009a30 <__sinit_lock_acquire>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__sinit_lock_acquire+0x8>)
 8009a32:	f000 b8a7 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 8009a36:	bf00      	nop
 8009a38:	200005df 	.word	0x200005df

08009a3c <__sinit_lock_release>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__sinit_lock_release+0x8>)
 8009a3e:	f000 b8a2 	b.w	8009b86 <__retarget_lock_release_recursive>
 8009a42:	bf00      	nop
 8009a44:	200005df 	.word	0x200005df

08009a48 <__sinit>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	f7ff fff0 	bl	8009a30 <__sinit_lock_acquire>
 8009a50:	69a3      	ldr	r3, [r4, #24]
 8009a52:	b11b      	cbz	r3, 8009a5c <__sinit+0x14>
 8009a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a58:	f7ff bff0 	b.w	8009a3c <__sinit_lock_release>
 8009a5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a60:	6523      	str	r3, [r4, #80]	; 0x50
 8009a62:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <__sinit+0x68>)
 8009a64:	4a13      	ldr	r2, [pc, #76]	; (8009ab4 <__sinit+0x6c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	bf08      	it	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	4620      	mov	r0, r4
 8009a72:	bf08      	it	eq
 8009a74:	61a3      	streq	r3, [r4, #24]
 8009a76:	f000 f81f 	bl	8009ab8 <__sfp>
 8009a7a:	6060      	str	r0, [r4, #4]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 f81b 	bl	8009ab8 <__sfp>
 8009a82:	60a0      	str	r0, [r4, #8]
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 f817 	bl	8009ab8 <__sfp>
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	60e0      	str	r0, [r4, #12]
 8009a90:	6860      	ldr	r0, [r4, #4]
 8009a92:	f7ff ff81 	bl	8009998 <std>
 8009a96:	2201      	movs	r2, #1
 8009a98:	2109      	movs	r1, #9
 8009a9a:	68a0      	ldr	r0, [r4, #8]
 8009a9c:	f7ff ff7c 	bl	8009998 <std>
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	2112      	movs	r1, #18
 8009aa4:	68e0      	ldr	r0, [r4, #12]
 8009aa6:	f7ff ff77 	bl	8009998 <std>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	61a3      	str	r3, [r4, #24]
 8009aae:	e7d1      	b.n	8009a54 <__sinit+0xc>
 8009ab0:	0800a418 	.word	0x0800a418
 8009ab4:	080099e1 	.word	0x080099e1

08009ab8 <__sfp>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	4607      	mov	r7, r0
 8009abc:	f7ff ffac 	bl	8009a18 <__sfp_lock_acquire>
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <__sfp+0x84>)
 8009ac2:	681e      	ldr	r6, [r3, #0]
 8009ac4:	69b3      	ldr	r3, [r6, #24]
 8009ac6:	b913      	cbnz	r3, 8009ace <__sfp+0x16>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff ffbd 	bl	8009a48 <__sinit>
 8009ace:	3648      	adds	r6, #72	; 0x48
 8009ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	d503      	bpl.n	8009ae0 <__sfp+0x28>
 8009ad8:	6833      	ldr	r3, [r6, #0]
 8009ada:	b30b      	cbz	r3, 8009b20 <__sfp+0x68>
 8009adc:	6836      	ldr	r6, [r6, #0]
 8009ade:	e7f7      	b.n	8009ad0 <__sfp+0x18>
 8009ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ae4:	b9d5      	cbnz	r5, 8009b1c <__sfp+0x64>
 8009ae6:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <__sfp+0x88>)
 8009ae8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009aec:	60e3      	str	r3, [r4, #12]
 8009aee:	6665      	str	r5, [r4, #100]	; 0x64
 8009af0:	f000 f847 	bl	8009b82 <__retarget_lock_init_recursive>
 8009af4:	f7ff ff96 	bl	8009a24 <__sfp_lock_release>
 8009af8:	2208      	movs	r2, #8
 8009afa:	4629      	mov	r1, r5
 8009afc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b04:	6025      	str	r5, [r4, #0]
 8009b06:	61a5      	str	r5, [r4, #24]
 8009b08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b0c:	f7fd fb06 	bl	800711c <memset>
 8009b10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b18:	4620      	mov	r0, r4
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1c:	3468      	adds	r4, #104	; 0x68
 8009b1e:	e7d9      	b.n	8009ad4 <__sfp+0x1c>
 8009b20:	2104      	movs	r1, #4
 8009b22:	4638      	mov	r0, r7
 8009b24:	f7ff ff62 	bl	80099ec <__sfmoreglue>
 8009b28:	4604      	mov	r4, r0
 8009b2a:	6030      	str	r0, [r6, #0]
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d1d5      	bne.n	8009adc <__sfp+0x24>
 8009b30:	f7ff ff78 	bl	8009a24 <__sfp_lock_release>
 8009b34:	230c      	movs	r3, #12
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	e7ee      	b.n	8009b18 <__sfp+0x60>
 8009b3a:	bf00      	nop
 8009b3c:	0800a418 	.word	0x0800a418
 8009b40:	ffff0001 	.word	0xffff0001

08009b44 <_fwalk_reent>:
 8009b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	4606      	mov	r6, r0
 8009b4a:	4688      	mov	r8, r1
 8009b4c:	2700      	movs	r7, #0
 8009b4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b56:	f1b9 0901 	subs.w	r9, r9, #1
 8009b5a:	d505      	bpl.n	8009b68 <_fwalk_reent+0x24>
 8009b5c:	6824      	ldr	r4, [r4, #0]
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d1f7      	bne.n	8009b52 <_fwalk_reent+0xe>
 8009b62:	4638      	mov	r0, r7
 8009b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b68:	89ab      	ldrh	r3, [r5, #12]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d907      	bls.n	8009b7e <_fwalk_reent+0x3a>
 8009b6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b72:	3301      	adds	r3, #1
 8009b74:	d003      	beq.n	8009b7e <_fwalk_reent+0x3a>
 8009b76:	4629      	mov	r1, r5
 8009b78:	4630      	mov	r0, r6
 8009b7a:	47c0      	blx	r8
 8009b7c:	4307      	orrs	r7, r0
 8009b7e:	3568      	adds	r5, #104	; 0x68
 8009b80:	e7e9      	b.n	8009b56 <_fwalk_reent+0x12>

08009b82 <__retarget_lock_init_recursive>:
 8009b82:	4770      	bx	lr

08009b84 <__retarget_lock_acquire_recursive>:
 8009b84:	4770      	bx	lr

08009b86 <__retarget_lock_release_recursive>:
 8009b86:	4770      	bx	lr

08009b88 <__swhatbuf_r>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	460e      	mov	r6, r1
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	4614      	mov	r4, r2
 8009b92:	2900      	cmp	r1, #0
 8009b94:	461d      	mov	r5, r3
 8009b96:	b096      	sub	sp, #88	; 0x58
 8009b98:	da07      	bge.n	8009baa <__swhatbuf_r+0x22>
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	602b      	str	r3, [r5, #0]
 8009b9e:	89b3      	ldrh	r3, [r6, #12]
 8009ba0:	061a      	lsls	r2, r3, #24
 8009ba2:	d410      	bmi.n	8009bc6 <__swhatbuf_r+0x3e>
 8009ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ba8:	e00e      	b.n	8009bc8 <__swhatbuf_r+0x40>
 8009baa:	466a      	mov	r2, sp
 8009bac:	f000 f902 	bl	8009db4 <_fstat_r>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	dbf2      	blt.n	8009b9a <__swhatbuf_r+0x12>
 8009bb4:	9a01      	ldr	r2, [sp, #4]
 8009bb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bbe:	425a      	negs	r2, r3
 8009bc0:	415a      	adcs	r2, r3
 8009bc2:	602a      	str	r2, [r5, #0]
 8009bc4:	e7ee      	b.n	8009ba4 <__swhatbuf_r+0x1c>
 8009bc6:	2340      	movs	r3, #64	; 0x40
 8009bc8:	2000      	movs	r0, #0
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	b016      	add	sp, #88	; 0x58
 8009bce:	bd70      	pop	{r4, r5, r6, pc}

08009bd0 <__smakebuf_r>:
 8009bd0:	898b      	ldrh	r3, [r1, #12]
 8009bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bd4:	079d      	lsls	r5, r3, #30
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	460c      	mov	r4, r1
 8009bda:	d507      	bpl.n	8009bec <__smakebuf_r+0x1c>
 8009bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	2301      	movs	r3, #1
 8009be6:	6163      	str	r3, [r4, #20]
 8009be8:	b002      	add	sp, #8
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	466a      	mov	r2, sp
 8009bee:	ab01      	add	r3, sp, #4
 8009bf0:	f7ff ffca 	bl	8009b88 <__swhatbuf_r>
 8009bf4:	9900      	ldr	r1, [sp, #0]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff f989 	bl	8008f10 <_malloc_r>
 8009bfe:	b948      	cbnz	r0, 8009c14 <__smakebuf_r+0x44>
 8009c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c04:	059a      	lsls	r2, r3, #22
 8009c06:	d4ef      	bmi.n	8009be8 <__smakebuf_r+0x18>
 8009c08:	f023 0303 	bic.w	r3, r3, #3
 8009c0c:	f043 0302 	orr.w	r3, r3, #2
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	e7e3      	b.n	8009bdc <__smakebuf_r+0xc>
 8009c14:	4b0d      	ldr	r3, [pc, #52]	; (8009c4c <__smakebuf_r+0x7c>)
 8009c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	6020      	str	r0, [r4, #0]
 8009c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	9b00      	ldr	r3, [sp, #0]
 8009c24:	6120      	str	r0, [r4, #16]
 8009c26:	6163      	str	r3, [r4, #20]
 8009c28:	9b01      	ldr	r3, [sp, #4]
 8009c2a:	b15b      	cbz	r3, 8009c44 <__smakebuf_r+0x74>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c32:	f000 f8d1 	bl	8009dd8 <_isatty_r>
 8009c36:	b128      	cbz	r0, 8009c44 <__smakebuf_r+0x74>
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	f023 0303 	bic.w	r3, r3, #3
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	81a3      	strh	r3, [r4, #12]
 8009c44:	89a0      	ldrh	r0, [r4, #12]
 8009c46:	4305      	orrs	r5, r0
 8009c48:	81a5      	strh	r5, [r4, #12]
 8009c4a:	e7cd      	b.n	8009be8 <__smakebuf_r+0x18>
 8009c4c:	080099e1 	.word	0x080099e1

08009c50 <_malloc_usable_size_r>:
 8009c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c54:	1f18      	subs	r0, r3, #4
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	bfbc      	itt	lt
 8009c5a:	580b      	ldrlt	r3, [r1, r0]
 8009c5c:	18c0      	addlt	r0, r0, r3
 8009c5e:	4770      	bx	lr

08009c60 <_raise_r>:
 8009c60:	291f      	cmp	r1, #31
 8009c62:	b538      	push	{r3, r4, r5, lr}
 8009c64:	4604      	mov	r4, r0
 8009c66:	460d      	mov	r5, r1
 8009c68:	d904      	bls.n	8009c74 <_raise_r+0x14>
 8009c6a:	2316      	movs	r3, #22
 8009c6c:	6003      	str	r3, [r0, #0]
 8009c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c76:	b112      	cbz	r2, 8009c7e <_raise_r+0x1e>
 8009c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c7c:	b94b      	cbnz	r3, 8009c92 <_raise_r+0x32>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 f830 	bl	8009ce4 <_getpid_r>
 8009c84:	462a      	mov	r2, r5
 8009c86:	4601      	mov	r1, r0
 8009c88:	4620      	mov	r0, r4
 8009c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c8e:	f000 b817 	b.w	8009cc0 <_kill_r>
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d00a      	beq.n	8009cac <_raise_r+0x4c>
 8009c96:	1c59      	adds	r1, r3, #1
 8009c98:	d103      	bne.n	8009ca2 <_raise_r+0x42>
 8009c9a:	2316      	movs	r3, #22
 8009c9c:	6003      	str	r3, [r0, #0]
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	e7e7      	b.n	8009c72 <_raise_r+0x12>
 8009ca2:	2400      	movs	r4, #0
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009caa:	4798      	blx	r3
 8009cac:	2000      	movs	r0, #0
 8009cae:	e7e0      	b.n	8009c72 <_raise_r+0x12>

08009cb0 <raise>:
 8009cb0:	4b02      	ldr	r3, [pc, #8]	; (8009cbc <raise+0xc>)
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	6818      	ldr	r0, [r3, #0]
 8009cb6:	f7ff bfd3 	b.w	8009c60 <_raise_r>
 8009cba:	bf00      	nop
 8009cbc:	20000020 	.word	0x20000020

08009cc0 <_kill_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4d06      	ldr	r5, [pc, #24]	; (8009ce0 <_kill_r+0x20>)
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	4608      	mov	r0, r1
 8009cca:	4611      	mov	r1, r2
 8009ccc:	602b      	str	r3, [r5, #0]
 8009cce:	f7f9 fc52 	bl	8003576 <_kill>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	d102      	bne.n	8009cdc <_kill_r+0x1c>
 8009cd6:	682b      	ldr	r3, [r5, #0]
 8009cd8:	b103      	cbz	r3, 8009cdc <_kill_r+0x1c>
 8009cda:	6023      	str	r3, [r4, #0]
 8009cdc:	bd38      	pop	{r3, r4, r5, pc}
 8009cde:	bf00      	nop
 8009ce0:	200005d8 	.word	0x200005d8

08009ce4 <_getpid_r>:
 8009ce4:	f7f9 bc40 	b.w	8003568 <_getpid>

08009ce8 <__sread>:
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	460c      	mov	r4, r1
 8009cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf0:	f000 f894 	bl	8009e1c <_read_r>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	bfab      	itete	ge
 8009cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8009cfc:	181b      	addge	r3, r3, r0
 8009cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d02:	bfac      	ite	ge
 8009d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d06:	81a3      	strhlt	r3, [r4, #12]
 8009d08:	bd10      	pop	{r4, pc}

08009d0a <__swrite>:
 8009d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0e:	461f      	mov	r7, r3
 8009d10:	898b      	ldrh	r3, [r1, #12]
 8009d12:	4605      	mov	r5, r0
 8009d14:	05db      	lsls	r3, r3, #23
 8009d16:	460c      	mov	r4, r1
 8009d18:	4616      	mov	r6, r2
 8009d1a:	d505      	bpl.n	8009d28 <__swrite+0x1e>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d24:	f000 f868 	bl	8009df8 <_lseek_r>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	4632      	mov	r2, r6
 8009d2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	4628      	mov	r0, r5
 8009d34:	463b      	mov	r3, r7
 8009d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3e:	f000 b817 	b.w	8009d70 <_write_r>

08009d42 <__sseek>:
 8009d42:	b510      	push	{r4, lr}
 8009d44:	460c      	mov	r4, r1
 8009d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4a:	f000 f855 	bl	8009df8 <_lseek_r>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	bf15      	itete	ne
 8009d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d5e:	81a3      	strheq	r3, [r4, #12]
 8009d60:	bf18      	it	ne
 8009d62:	81a3      	strhne	r3, [r4, #12]
 8009d64:	bd10      	pop	{r4, pc}

08009d66 <__sclose>:
 8009d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6a:	f000 b813 	b.w	8009d94 <_close_r>
	...

08009d70 <_write_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	2200      	movs	r2, #0
 8009d7a:	4d05      	ldr	r5, [pc, #20]	; (8009d90 <_write_r+0x20>)
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f7f9 fc30 	bl	80035e4 <_write>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_write_r+0x1e>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_write_r+0x1e>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	200005d8 	.word	0x200005d8

08009d94 <_close_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	2300      	movs	r3, #0
 8009d98:	4d05      	ldr	r5, [pc, #20]	; (8009db0 <_close_r+0x1c>)
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	602b      	str	r3, [r5, #0]
 8009da0:	f7f9 fc3c 	bl	800361c <_close>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_close_r+0x1a>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_close_r+0x1a>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	200005d8 	.word	0x200005d8

08009db4 <_fstat_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	2300      	movs	r3, #0
 8009db8:	4d06      	ldr	r5, [pc, #24]	; (8009dd4 <_fstat_r+0x20>)
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	602b      	str	r3, [r5, #0]
 8009dc2:	f7f9 fc36 	bl	8003632 <_fstat>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d102      	bne.n	8009dd0 <_fstat_r+0x1c>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	b103      	cbz	r3, 8009dd0 <_fstat_r+0x1c>
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	bd38      	pop	{r3, r4, r5, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200005d8 	.word	0x200005d8

08009dd8 <_isatty_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4d05      	ldr	r5, [pc, #20]	; (8009df4 <_isatty_r+0x1c>)
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	f7f9 fc34 	bl	8003650 <_isatty>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_isatty_r+0x1a>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_isatty_r+0x1a>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	200005d8 	.word	0x200005d8

08009df8 <_lseek_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	4608      	mov	r0, r1
 8009dfe:	4611      	mov	r1, r2
 8009e00:	2200      	movs	r2, #0
 8009e02:	4d05      	ldr	r5, [pc, #20]	; (8009e18 <_lseek_r+0x20>)
 8009e04:	602a      	str	r2, [r5, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f7f9 fc2c 	bl	8003664 <_lseek>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_lseek_r+0x1e>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_lseek_r+0x1e>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	200005d8 	.word	0x200005d8

08009e1c <_read_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4608      	mov	r0, r1
 8009e22:	4611      	mov	r1, r2
 8009e24:	2200      	movs	r2, #0
 8009e26:	4d05      	ldr	r5, [pc, #20]	; (8009e3c <_read_r+0x20>)
 8009e28:	602a      	str	r2, [r5, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	f7f9 fbbd 	bl	80035aa <_read>
 8009e30:	1c43      	adds	r3, r0, #1
 8009e32:	d102      	bne.n	8009e3a <_read_r+0x1e>
 8009e34:	682b      	ldr	r3, [r5, #0]
 8009e36:	b103      	cbz	r3, 8009e3a <_read_r+0x1e>
 8009e38:	6023      	str	r3, [r4, #0]
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}
 8009e3c:	200005d8 	.word	0x200005d8

08009e40 <_init>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	bf00      	nop
 8009e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e46:	bc08      	pop	{r3}
 8009e48:	469e      	mov	lr, r3
 8009e4a:	4770      	bx	lr

08009e4c <_fini>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr
